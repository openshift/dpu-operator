// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.1
// source: SoftwareManagement.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoftwareManagementServiceClient is the client API for SoftwareManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoftwareManagementServiceClient interface {
	// Set RPC, send from server-OAM to vDU-OAM. Used to trigger vDU software upgrade.
	SoftwareUpgrade(ctx context.Context, in *SoftwareUpgradeRequest, opts ...grpc.CallOption) (*SoftwareUpgradeResponse, error)
	// Set RPC, send from operator to vDU-OAM. Used to trigger vDU software upgrade.
	SoftwareUpgradeStream(ctx context.Context, opts ...grpc.CallOption) (SoftwareManagementService_SoftwareUpgradeStreamClient, error)
	// Set RPC, send from server-OAM to vDU-OAM. Used to trigger vDU software stop.
	SoftwareStop(ctx context.Context, in *SoftwareStopRequest, opts ...grpc.CallOption) (*SoftwareStopResponse, error)
}

type softwareManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftwareManagementServiceClient(cc grpc.ClientConnInterface) SoftwareManagementServiceClient {
	return &softwareManagementServiceClient{cc}
}

func (c *softwareManagementServiceClient) SoftwareUpgrade(ctx context.Context, in *SoftwareUpgradeRequest, opts ...grpc.CallOption) (*SoftwareUpgradeResponse, error) {
	out := new(SoftwareUpgradeResponse)
	err := c.cc.Invoke(ctx, "/SoftwareManagementService/SoftwareUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareManagementServiceClient) SoftwareUpgradeStream(ctx context.Context, opts ...grpc.CallOption) (SoftwareManagementService_SoftwareUpgradeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SoftwareManagementService_ServiceDesc.Streams[0], "/SoftwareManagementService/SoftwareUpgradeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &softwareManagementServiceSoftwareUpgradeStreamClient{stream}
	return x, nil
}

type SoftwareManagementService_SoftwareUpgradeStreamClient interface {
	Send(*SoftwareUpgradeStreamRequest) error
	CloseAndRecv() (*SoftwareUpgradeResponse, error)
	grpc.ClientStream
}

type softwareManagementServiceSoftwareUpgradeStreamClient struct {
	grpc.ClientStream
}

func (x *softwareManagementServiceSoftwareUpgradeStreamClient) Send(m *SoftwareUpgradeStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *softwareManagementServiceSoftwareUpgradeStreamClient) CloseAndRecv() (*SoftwareUpgradeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SoftwareUpgradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *softwareManagementServiceClient) SoftwareStop(ctx context.Context, in *SoftwareStopRequest, opts ...grpc.CallOption) (*SoftwareStopResponse, error) {
	out := new(SoftwareStopResponse)
	err := c.cc.Invoke(ctx, "/SoftwareManagementService/SoftwareStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareManagementServiceServer is the server API for SoftwareManagementService service.
// All implementations must embed UnimplementedSoftwareManagementServiceServer
// for forward compatibility
type SoftwareManagementServiceServer interface {
	// Set RPC, send from server-OAM to vDU-OAM. Used to trigger vDU software upgrade.
	SoftwareUpgrade(context.Context, *SoftwareUpgradeRequest) (*SoftwareUpgradeResponse, error)
	// Set RPC, send from operator to vDU-OAM. Used to trigger vDU software upgrade.
	SoftwareUpgradeStream(SoftwareManagementService_SoftwareUpgradeStreamServer) error
	// Set RPC, send from server-OAM to vDU-OAM. Used to trigger vDU software stop.
	SoftwareStop(context.Context, *SoftwareStopRequest) (*SoftwareStopResponse, error)
	mustEmbedUnimplementedSoftwareManagementServiceServer()
}

// UnimplementedSoftwareManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoftwareManagementServiceServer struct {
}

func (UnimplementedSoftwareManagementServiceServer) SoftwareUpgrade(context.Context, *SoftwareUpgradeRequest) (*SoftwareUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareUpgrade not implemented")
}
func (UnimplementedSoftwareManagementServiceServer) SoftwareUpgradeStream(SoftwareManagementService_SoftwareUpgradeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SoftwareUpgradeStream not implemented")
}
func (UnimplementedSoftwareManagementServiceServer) SoftwareStop(context.Context, *SoftwareStopRequest) (*SoftwareStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareStop not implemented")
}
func (UnimplementedSoftwareManagementServiceServer) mustEmbedUnimplementedSoftwareManagementServiceServer() {
}

// UnsafeSoftwareManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftwareManagementServiceServer will
// result in compilation errors.
type UnsafeSoftwareManagementServiceServer interface {
	mustEmbedUnimplementedSoftwareManagementServiceServer()
}

func RegisterSoftwareManagementServiceServer(s grpc.ServiceRegistrar, srv SoftwareManagementServiceServer) {
	s.RegisterService(&SoftwareManagementService_ServiceDesc, srv)
}

func _SoftwareManagementService_SoftwareUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwareUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareManagementServiceServer).SoftwareUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoftwareManagementService/SoftwareUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareManagementServiceServer).SoftwareUpgrade(ctx, req.(*SoftwareUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareManagementService_SoftwareUpgradeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoftwareManagementServiceServer).SoftwareUpgradeStream(&softwareManagementServiceSoftwareUpgradeStreamServer{stream})
}

type SoftwareManagementService_SoftwareUpgradeStreamServer interface {
	SendAndClose(*SoftwareUpgradeResponse) error
	Recv() (*SoftwareUpgradeStreamRequest, error)
	grpc.ServerStream
}

type softwareManagementServiceSoftwareUpgradeStreamServer struct {
	grpc.ServerStream
}

func (x *softwareManagementServiceSoftwareUpgradeStreamServer) SendAndClose(m *SoftwareUpgradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *softwareManagementServiceSoftwareUpgradeStreamServer) Recv() (*SoftwareUpgradeStreamRequest, error) {
	m := new(SoftwareUpgradeStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SoftwareManagementService_SoftwareStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwareStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareManagementServiceServer).SoftwareStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SoftwareManagementService/SoftwareStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareManagementServiceServer).SoftwareStop(ctx, req.(*SoftwareStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoftwareManagementService_ServiceDesc is the grpc.ServiceDesc for SoftwareManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoftwareManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SoftwareManagementService",
	HandlerType: (*SoftwareManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SoftwareUpgrade",
			Handler:    _SoftwareManagementService_SoftwareUpgrade_Handler,
		},
		{
			MethodName: "SoftwareStop",
			Handler:    _SoftwareManagementService_SoftwareStop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SoftwareUpgradeStream",
			Handler:       _SoftwareManagementService_SoftwareUpgradeStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "SoftwareManagement.proto",
}
