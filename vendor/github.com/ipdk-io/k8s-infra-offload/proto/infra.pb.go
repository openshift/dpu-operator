// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infra.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NatEndpoint struct {
	Ipv4Addr             string   `protobuf:"bytes,1,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatEndpoint) Reset()         { *m = NatEndpoint{} }
func (m *NatEndpoint) String() string { return proto.CompactTextString(m) }
func (*NatEndpoint) ProtoMessage()    {}
func (*NatEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{0}
}
func (m *NatEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatEndpoint.Merge(m, src)
}
func (m *NatEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *NatEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_NatEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_NatEndpoint proto.InternalMessageInfo

func (m *NatEndpoint) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

func (m *NatEndpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type NatEndpointTuple struct {
	DstEp                *NatEndpoint `protobuf:"bytes,1,opt,name=dst_ep,json=dstEp,proto3" json:"dst_ep,omitempty"`
	SrcEp                *NatEndpoint `protobuf:"bytes,2,opt,name=src_ep,json=srcEp,proto3" json:"src_ep,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NatEndpointTuple) Reset()         { *m = NatEndpointTuple{} }
func (m *NatEndpointTuple) String() string { return proto.CompactTextString(m) }
func (*NatEndpointTuple) ProtoMessage()    {}
func (*NatEndpointTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{1}
}
func (m *NatEndpointTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatEndpointTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatEndpointTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatEndpointTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatEndpointTuple.Merge(m, src)
}
func (m *NatEndpointTuple) XXX_Size() int {
	return m.Size()
}
func (m *NatEndpointTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_NatEndpointTuple.DiscardUnknown(m)
}

var xxx_messageInfo_NatEndpointTuple proto.InternalMessageInfo

func (m *NatEndpointTuple) GetDstEp() *NatEndpoint {
	if m != nil {
		return m.DstEp
	}
	return nil
}

func (m *NatEndpointTuple) GetSrcEp() *NatEndpoint {
	if m != nil {
		return m.SrcEp
	}
	return nil
}

type NatTranslation struct {
	Endpoint             *NatEndpoint        `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Proto                string              `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	IsRealIp             bool                `protobuf:"varint,4,opt,name=is_real_ip,json=isRealIp,proto3" json:"is_real_ip,omitempty"`
	Backends             []*NatEndpointTuple `protobuf:"bytes,6,rep,name=backends,proto3" json:"backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NatTranslation) Reset()         { *m = NatTranslation{} }
func (m *NatTranslation) String() string { return proto.CompactTextString(m) }
func (*NatTranslation) ProtoMessage()    {}
func (*NatTranslation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{2}
}
func (m *NatTranslation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatTranslation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatTranslation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatTranslation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatTranslation.Merge(m, src)
}
func (m *NatTranslation) XXX_Size() int {
	return m.Size()
}
func (m *NatTranslation) XXX_DiscardUnknown() {
	xxx_messageInfo_NatTranslation.DiscardUnknown(m)
}

var xxx_messageInfo_NatTranslation proto.InternalMessageInfo

func (m *NatTranslation) GetEndpoint() *NatEndpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *NatTranslation) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *NatTranslation) GetIsRealIp() bool {
	if m != nil {
		return m.IsRealIp
	}
	return false
}

func (m *NatTranslation) GetBackends() []*NatEndpointTuple {
	if m != nil {
		return m.Backends
	}
	return nil
}

type Reply struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{3}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Reply) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type SetSnatAddressRequest struct {
	SnatIpv4             string   `protobuf:"bytes,1,opt,name=snat_ipv4,json=snatIpv4,proto3" json:"snat_ipv4,omitempty"`
	SnatIpv6             string   `protobuf:"bytes,2,opt,name=snat_ipv6,json=snatIpv6,proto3" json:"snat_ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSnatAddressRequest) Reset()         { *m = SetSnatAddressRequest{} }
func (m *SetSnatAddressRequest) String() string { return proto.CompactTextString(m) }
func (*SetSnatAddressRequest) ProtoMessage()    {}
func (*SetSnatAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{4}
}
func (m *SetSnatAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSnatAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSnatAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSnatAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSnatAddressRequest.Merge(m, src)
}
func (m *SetSnatAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetSnatAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSnatAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSnatAddressRequest proto.InternalMessageInfo

func (m *SetSnatAddressRequest) GetSnatIpv4() string {
	if m != nil {
		return m.SnatIpv4
	}
	return ""
}

func (m *SetSnatAddressRequest) GetSnatIpv6() string {
	if m != nil {
		return m.SnatIpv6
	}
	return ""
}

type AddDelSnatPrefixRequest struct {
	IsAdd                bool     `protobuf:"varint,1,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDelSnatPrefixRequest) Reset()         { *m = AddDelSnatPrefixRequest{} }
func (m *AddDelSnatPrefixRequest) String() string { return proto.CompactTextString(m) }
func (*AddDelSnatPrefixRequest) ProtoMessage()    {}
func (*AddDelSnatPrefixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{5}
}
func (m *AddDelSnatPrefixRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDelSnatPrefixRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDelSnatPrefixRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDelSnatPrefixRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDelSnatPrefixRequest.Merge(m, src)
}
func (m *AddDelSnatPrefixRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDelSnatPrefixRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDelSnatPrefixRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDelSnatPrefixRequest proto.InternalMessageInfo

func (m *AddDelSnatPrefixRequest) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *AddDelSnatPrefixRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type CreateNetworkRequest struct {
	AddRequest           *AddRequest `protobuf:"bytes,1,opt,name=add_request,json=addRequest,proto3" json:"add_request,omitempty"`
	HostIfName           string      `protobuf:"bytes,2,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	MacAddr              string      `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateNetworkRequest) Reset()         { *m = CreateNetworkRequest{} }
func (m *CreateNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNetworkRequest) ProtoMessage()    {}
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{6}
}
func (m *CreateNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkRequest.Merge(m, src)
}
func (m *CreateNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkRequest proto.InternalMessageInfo

func (m *CreateNetworkRequest) GetAddRequest() *AddRequest {
	if m != nil {
		return m.AddRequest
	}
	return nil
}

func (m *CreateNetworkRequest) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *CreateNetworkRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

type DeleteNetworkRequest struct {
	DelRequest           *DelRequest `protobuf:"bytes,1,opt,name=del_request,json=delRequest,proto3" json:"del_request,omitempty"`
	HostIfName           string      `protobuf:"bytes,2,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	MacAddr              string      `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Ipv4Addr             string      `protobuf:"bytes,4,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeleteNetworkRequest) Reset()         { *m = DeleteNetworkRequest{} }
func (m *DeleteNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNetworkRequest) ProtoMessage()    {}
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{7}
}
func (m *DeleteNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNetworkRequest.Merge(m, src)
}
func (m *DeleteNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNetworkRequest proto.InternalMessageInfo

func (m *DeleteNetworkRequest) GetDelRequest() *DelRequest {
	if m != nil {
		return m.DelRequest
	}
	return nil
}

func (m *DeleteNetworkRequest) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *DeleteNetworkRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *DeleteNetworkRequest) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

type SetupHostInterfaceRequest struct {
	IfName               string   `protobuf:"bytes,1,opt,name=if_name,json=ifName,proto3" json:"if_name,omitempty"`
	Ipv4Addr             string   `protobuf:"bytes,2,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	MacAddr              string   `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetupHostInterfaceRequest) Reset()         { *m = SetupHostInterfaceRequest{} }
func (m *SetupHostInterfaceRequest) String() string { return proto.CompactTextString(m) }
func (*SetupHostInterfaceRequest) ProtoMessage()    {}
func (*SetupHostInterfaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd059abf8f713b80, []int{8}
}
func (m *SetupHostInterfaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetupHostInterfaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetupHostInterfaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetupHostInterfaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupHostInterfaceRequest.Merge(m, src)
}
func (m *SetupHostInterfaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetupHostInterfaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupHostInterfaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetupHostInterfaceRequest proto.InternalMessageInfo

func (m *SetupHostInterfaceRequest) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *SetupHostInterfaceRequest) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

func (m *SetupHostInterfaceRequest) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*NatEndpoint)(nil), "infra.NatEndpoint")
	proto.RegisterType((*NatEndpointTuple)(nil), "infra.NatEndpointTuple")
	proto.RegisterType((*NatTranslation)(nil), "infra.NatTranslation")
	proto.RegisterType((*Reply)(nil), "infra.Reply")
	proto.RegisterType((*SetSnatAddressRequest)(nil), "infra.SetSnatAddressRequest")
	proto.RegisterType((*AddDelSnatPrefixRequest)(nil), "infra.AddDelSnatPrefixRequest")
	proto.RegisterType((*CreateNetworkRequest)(nil), "infra.CreateNetworkRequest")
	proto.RegisterType((*DeleteNetworkRequest)(nil), "infra.DeleteNetworkRequest")
	proto.RegisterType((*SetupHostInterfaceRequest)(nil), "infra.SetupHostInterfaceRequest")
}

func init() { proto.RegisterFile("infra.proto", fileDescriptor_cd059abf8f713b80) }

var fileDescriptor_cd059abf8f713b80 = []byte{
	// 1017 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0xc7, 0x63, 0x02, 0x8e, 0x39, 0x86, 0x40, 0x27, 0x26, 0x06, 0x42, 0x2d, 0x6b, 0x7b, 0x43,
	0x6f, 0xac, 0x86, 0x44, 0x91, 0xd2, 0x2a, 0x89, 0x16, 0x4c, 0x13, 0x4b, 0x80, 0xe8, 0x42, 0x9b,
	0xaa, 0x37, 0xd6, 0xb0, 0x73, 0x4c, 0x46, 0x8c, 0x77, 0xb7, 0x33, 0x63, 0x1a, 0x1e, 0xa0, 0xef,
	0xd0, 0xeb, 0xde, 0xf5, 0x4d, 0x7a, 0xd9, 0x47, 0xa8, 0xe8, 0x75, 0xdf, 0xa1, 0xda, 0x9d, 0xd9,
	0xc5, 0x8b, 0x3d, 0x40, 0xd4, 0x2b, 0x76, 0xcf, 0x9c, 0xf3, 0x3b, 0xff, 0x39, 0x1f, 0x8b, 0xa1,
	0xce, 0xa3, 0x81, 0xa4, 0x9d, 0x44, 0xc6, 0x3a, 0x26, 0x73, 0xd9, 0xcb, 0xfa, 0x72, 0x18, 0xf1,
	0x13, 0x1a, 0x9e, 0x61, 0xc4, 0xcc, 0xc1, 0x3a, 0x19, 0xa0, 0xe0, 0x1f, 0x4b, 0x36, 0xef, 0x35,
	0xd4, 0x0f, 0xa8, 0xde, 0x8d, 0x58, 0x12, 0xf3, 0x48, 0x93, 0x27, 0x30, 0xcf, 0x93, 0xf3, 0xe7,
	0x7d, 0xca, 0x98, 0x5c, 0xad, 0xb4, 0x2b, 0x9b, 0xf3, 0x41, 0x2d, 0x35, 0xf8, 0x8c, 0x49, 0x42,
	0x60, 0x36, 0x89, 0xa5, 0x5e, 0x9d, 0x69, 0x57, 0x36, 0x17, 0x83, 0xec, 0xd9, 0xfb, 0x00, 0xcb,
	0x63, 0xf1, 0xc7, 0xa3, 0x44, 0x20, 0xf9, 0x12, 0xaa, 0x4c, 0xe9, 0x3e, 0x26, 0x19, 0xa1, 0xbe,
	0x45, 0x3a, 0x46, 0xde, 0x98, 0x63, 0x30, 0xc7, 0x94, 0xde, 0x4d, 0x52, 0x57, 0x25, 0xc3, 0xd4,
	0x75, 0xc6, 0xed, 0xaa, 0x64, 0xb8, 0x9b, 0x78, 0x7f, 0x54, 0xe0, 0xe1, 0x01, 0xd5, 0xc7, 0x92,
	0x46, 0x4a, 0x50, 0xcd, 0xe3, 0x88, 0x74, 0xa0, 0x86, 0xd6, 0xeb, 0x86, 0xf8, 0xc2, 0x87, 0x34,
	0x60, 0x2e, 0xbb, 0xf5, 0xea, 0xfd, 0xec, 0x66, 0xe6, 0x85, 0x6c, 0x00, 0x70, 0xd5, 0x97, 0x48,
	0x45, 0x9f, 0x27, 0xab, 0xb3, 0xed, 0xca, 0x66, 0x2d, 0xa8, 0x71, 0x15, 0x20, 0x15, 0xbd, 0x84,
	0x3c, 0x83, 0x9a, 0xad, 0x98, 0x5a, 0xad, 0xb6, 0xef, 0x6f, 0xd6, 0xb7, 0x9a, 0x93, 0x39, 0xb2,
	0x7b, 0x07, 0x85, 0xa3, 0xb7, 0x07, 0x73, 0x01, 0x26, 0xe2, 0x82, 0xb4, 0x00, 0xd4, 0x28, 0x0c,
	0x51, 0xa9, 0xc1, 0x48, 0x64, 0xe5, 0xa8, 0x05, 0x63, 0x16, 0xf2, 0x05, 0x2c, 0xa2, 0x94, 0xb1,
	0xec, 0x0f, 0x51, 0x29, 0x7a, 0x8a, 0xd9, 0x35, 0xe6, 0x83, 0x85, 0xcc, 0xb8, 0x6f, 0x6c, 0xde,
	0x77, 0xb0, 0x72, 0x84, 0xfa, 0x28, 0xa2, 0x3a, 0x6d, 0x03, 0x2a, 0x15, 0xe0, 0xcf, 0x23, 0x54,
	0x59, 0xb7, 0x54, 0x44, 0x75, 0x3f, 0xed, 0x50, 0xde, 0xad, 0xd4, 0xd0, 0x4b, 0xce, 0x9f, 0x8f,
	0x1f, 0xbe, 0xb0, 0xd8, 0xfc, 0xf0, 0x85, 0xf7, 0x0e, 0x9a, 0x3e, 0x63, 0x5d, 0x14, 0x29, 0xf5,
	0x50, 0xe2, 0x80, 0x7f, 0xcc, 0xa1, 0x2b, 0x50, 0xe5, 0x2a, 0x1d, 0x00, 0x2b, 0x77, 0x8e, 0x2b,
	0x9f, 0x31, 0xf2, 0x18, 0xaa, 0x49, 0xe6, 0x67, 0x59, 0xf6, 0xcd, 0xfb, 0xb5, 0x02, 0x8d, 0x1d,
	0x89, 0x54, 0xe3, 0x01, 0xea, 0x5f, 0x62, 0x79, 0x96, 0x73, 0xbe, 0x82, 0x3a, 0x65, 0xac, 0x2f,
	0xcd, 0xab, 0x1d, 0x85, 0xa5, 0x4e, 0x18, 0xf1, 0x8e, 0xcf, 0x98, 0xf5, 0x0a, 0x80, 0x16, 0xcf,
	0xa4, 0x0d, 0x0b, 0x1f, 0x62, 0xa5, 0xfb, 0x7c, 0xd0, 0x8f, 0xe8, 0x30, 0xaf, 0x05, 0xa4, 0xb6,
	0xde, 0xe0, 0x80, 0x0e, 0x91, 0xac, 0x41, 0x6d, 0x48, 0x43, 0x33, 0x9d, 0xa6, 0x87, 0x0f, 0x86,
	0x34, 0x4c, 0xab, 0xe2, 0xfd, 0x5e, 0x81, 0x46, 0x17, 0x05, 0x4e, 0xd3, 0xc1, 0x50, 0x4c, 0xd5,
	0xd1, 0x45, 0x51, 0xe8, 0x60, 0xc5, 0xf3, 0xff, 0xd2, 0x51, 0xde, 0xa0, 0xd9, 0xf2, 0x06, 0x79,
	0x02, 0xd6, 0x8e, 0x50, 0x8f, 0x92, 0x77, 0x29, 0x2a, 0xd2, 0x28, 0x07, 0x34, 0xc4, 0x3c, 0x6d,
	0x13, 0x1e, 0xe4, 0x19, 0x4d, 0x2f, 0xab, 0xdc, 0x64, 0x2b, 0x21, 0x67, 0xae, 0x2d, 0xa5, 0x5b,
	0xca, 0xd6, 0xbf, 0x4b, 0x00, 0xbd, 0x74, 0x54, 0xfd, 0x53, 0x8c, 0x34, 0x79, 0x05, 0x8b, 0xa5,
	0x46, 0x91, 0x27, 0x76, 0x90, 0xa7, 0xb5, 0x6f, 0x7d, 0xf1, 0xaa, 0x53, 0x89, 0xb8, 0xf0, 0xee,
	0xa5, 0xe1, 0xa5, 0xfa, 0x16, 0xe1, 0xd3, 0xaa, 0x6e, 0xc3, 0xb3, 0x02, 0x9b, 0xf0, 0x6f, 0x81,
	0x4c, 0x5e, 0x9d, 0xb4, 0x2d, 0xc3, 0x59, 0x95, 0xf5, 0x05, 0xeb, 0x91, 0x73, 0xbe, 0x86, 0xcf,
	0xca, 0x5f, 0x81, 0x74, 0x38, 0x57, 0xae, 0x56, 0x72, 0xec, 0x64, 0x22, 0xf6, 0x35, 0x3c, 0x2c,
	0x2f, 0x12, 0xd9, 0xb8, 0xca, 0x3f, 0xb9, 0x5f, 0x13, 0xf1, 0xdb, 0xb0, 0x7c, 0x7d, 0x6b, 0x48,
	0xcb, 0xfa, 0x38, 0xd6, 0x69, 0x82, 0xf1, 0x0a, 0x1a, 0x65, 0x95, 0xa6, 0x7c, 0x77, 0xbd, 0xc2,
	0x1b, 0x20, 0x7e, 0xa8, 0xf9, 0x39, 0x1e, 0xc6, 0x82, 0x87, 0x17, 0xdf, 0x27, 0x8c, 0x6a, 0x24,
	0x6b, 0x9d, 0xec, 0xd3, 0xde, 0x99, 0x3c, 0xba, 0x0d, 0x10, 0xe0, 0x30, 0x3e, 0x9f, 0x0e, 0x30,
	0x47, 0x13, 0x80, 0xa7, 0x50, 0x37, 0xe8, 0xde, 0xe1, 0x11, 0x6a, 0x42, 0x6c, 0x64, 0xf6, 0xe6,
	0xc8, 0xf9, 0x0d, 0x2c, 0x8f, 0x85, 0x74, 0x51, 0x68, 0x4a, 0x9a, 0xe3, 0x71, 0x99, 0xc9, 0x11,
	0xfc, 0x14, 0xea, 0x46, 0xc9, 0x94, 0x7c, 0x0e, 0x89, 0x3e, 0x3c, 0x32, 0x30, 0x7b, 0x1d, 0x19,
	0x0f, 0xb8, 0x40, 0xb2, 0x5e, 0xbe, 0xa4, 0xb1, 0x3a, 0xb2, 0xfa, 0xf0, 0xc8, 0xc0, 0xef, 0x80,
	0x70, 0xa8, 0x78, 0x03, 0xc4, 0xc0, 0xd3, 0xb9, 0x2e, 0xfe, 0xc3, 0xe6, 0x95, 0x1e, 0x37, 0xba,
	0x5b, 0x65, 0xd0, 0xb7, 0x02, 0x1c, 0x0a, 0xba, 0x79, 0x1d, 0xf6, 0xe2, 0x90, 0x8a, 0x82, 0xf0,
	0xb9, 0x25, 0xbc, 0x8f, 0xe5, 0x99, 0x88, 0x29, 0xbb, 0x45, 0x46, 0x37, 0x2f, 0xc5, 0xdd, 0x28,
	0x77, 0xa9, 0xc6, 0x3e, 0x6a, 0xda, 0xa5, 0x9a, 0x96, 0x2e, 0x93, 0x1a, 0x19, 0x75, 0xce, 0x41,
	0xa9, 0x1a, 0x37, 0x02, 0x1c, 0x0a, 0x76, 0xa0, 0x61, 0xd0, 0x47, 0x28, 0xcf, 0x79, 0x88, 0x7e,
	0x18, 0xc6, 0xa3, 0xf4, 0x37, 0x8f, 0x45, 0x94, 0xcd, 0x0e, 0x15, 0x3b, 0xd0, 0x30, 0xf8, 0x3b,
	0x41, 0x1c, 0x4a, 0x5e, 0xc2, 0x92, 0xc1, 0xa7, 0x9f, 0x77, 0x95, 0xa4, 0x1f, 0xc2, 0xc7, 0x36,
	0xbe, 0xb0, 0x38, 0xf2, 0xbf, 0x84, 0x25, 0x03, 0xbd, 0x21, 0xf4, 0xb6, 0xc5, 0x0d, 0xe2, 0x91,
	0xc6, 0x62, 0x91, 0xb2, 0xb7, 0xdb, 0x76, 0x6f, 0x4a, 0x88, 0x23, 0xcb, 0x3e, 0xac, 0x19, 0xd8,
	0x0f, 0x3f, 0xee, 0xf9, 0x07, 0xc7, 0xa3, 0x28, 0xc2, 0xab, 0x99, 0x69, 0x5b, 0xc0, 0x94, 0x33,
	0x87, 0x82, 0x7d, 0x58, 0x33, 0x89, 0x3e, 0x11, 0xe7, 0x50, 0xd7, 0x83, 0xa6, 0x49, 0xf4, 0x9e,
	0x4b, 0x3c, 0x1d, 0x51, 0x59, 0x8c, 0x2d, 0x69, 0xe5, 0xf3, 0x7c, 0xfd, 0xc4, 0xa1, 0xac, 0x07,
	0x4d, 0x93, 0xe4, 0x13, 0x50, 0x0e, 0x55, 0xbb, 0xb0, 0x62, 0x92, 0xbc, 0x15, 0xf1, 0x09, 0x15,
	0xdb, 0x6f, 0x0f, 0x77, 0xe2, 0x68, 0xc0, 0x4f, 0xc9, 0x86, 0x05, 0x5d, 0xb3, 0x4f, 0x57, 0xb4,
	0xdd, 0xfc, 0xf3, 0xb2, 0x55, 0xf9, 0xeb, 0xb2, 0x55, 0xf9, 0xfb, 0xb2, 0x55, 0xf9, 0xed, 0x9f,
	0xd6, 0xbd, 0x9f, 0xcc, 0x2f, 0xdc, 0x93, 0x6a, 0xf6, 0xe7, 0xd9, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x2a, 0x97, 0x47, 0x27, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfraAgentClient is the client API for InfraAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraAgentClient interface {
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*AddReply, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DelReply, error)
	SetupHostInterface(ctx context.Context, in *SetupHostInterfaceRequest, opts ...grpc.CallOption) (*Reply, error)
	NatTranslationAdd(ctx context.Context, in *NatTranslation, opts ...grpc.CallOption) (*Reply, error)
	SetSnatAddress(ctx context.Context, in *SetSnatAddressRequest, opts ...grpc.CallOption) (*Reply, error)
	AddDelSnatPrefix(ctx context.Context, in *AddDelSnatPrefixRequest, opts ...grpc.CallOption) (*Reply, error)
	NatTranslationDelete(ctx context.Context, in *NatTranslation, opts ...grpc.CallOption) (*Reply, error)
	ActivePolicyUpdate(ctx context.Context, in *ActivePolicyUpdate, opts ...grpc.CallOption) (*Reply, error)
	ActivePolicyRemove(ctx context.Context, in *ActivePolicyRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateIPSet(ctx context.Context, in *IPSetUpdate, opts ...grpc.CallOption) (*Reply, error)
	UpdateIPSetDelta(ctx context.Context, in *IPSetDeltaUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveIPSet(ctx context.Context, in *IPSetRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateActiveProfile(ctx context.Context, in *ActiveProfileUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveActiveProfile(ctx context.Context, in *ActiveProfileRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateHostEndpoint(ctx context.Context, in *HostEndpointUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveHostEndpoint(ctx context.Context, in *HostEndpointRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateLocalEndpoint(ctx context.Context, in *WorkloadEndpointUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveLocalEndpoint(ctx context.Context, in *WorkloadEndpointRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateHostMetaData(ctx context.Context, in *HostMetadataUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveHostMetaData(ctx context.Context, in *HostMetadataRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateServiceAccount(ctx context.Context, in *ServiceAccountUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveServiceAccount(ctx context.Context, in *ServiceAccountRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateNamespace(ctx context.Context, in *NamespaceUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveNamespace(ctx context.Context, in *NamespaceRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateRoute(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveRoute(ctx context.Context, in *RouteRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateVXLANTunnelEndpoint(ctx context.Context, in *VXLANTunnelEndpointUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveVXLANTunnelEndpoint(ctx context.Context, in *VXLANTunnelEndpointRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateWireguardEndpoint(ctx context.Context, in *WireguardEndpointUpdate, opts ...grpc.CallOption) (*Reply, error)
	RemoveWireguardEndpoint(ctx context.Context, in *WireguardEndpointRemove, opts ...grpc.CallOption) (*Reply, error)
	UpdateGlobalBGPConfig(ctx context.Context, in *GlobalBGPConfigUpdate, opts ...grpc.CallOption) (*Reply, error)
}

type infraAgentClient struct {
	cc *grpc.ClientConn
}

func NewInfraAgentClient(cc *grpc.ClientConn) InfraAgentClient {
	return &infraAgentClient{cc}
}

func (c *infraAgentClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DelReply, error) {
	out := new(DelReply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) SetupHostInterface(ctx context.Context, in *SetupHostInterfaceRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/SetupHostInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) NatTranslationAdd(ctx context.Context, in *NatTranslation, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/NatTranslationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) SetSnatAddress(ctx context.Context, in *SetSnatAddressRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/SetSnatAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) AddDelSnatPrefix(ctx context.Context, in *AddDelSnatPrefixRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/AddDelSnatPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) NatTranslationDelete(ctx context.Context, in *NatTranslation, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/NatTranslationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) ActivePolicyUpdate(ctx context.Context, in *ActivePolicyUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/ActivePolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) ActivePolicyRemove(ctx context.Context, in *ActivePolicyRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/ActivePolicyRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateIPSet(ctx context.Context, in *IPSetUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateIPSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateIPSetDelta(ctx context.Context, in *IPSetDeltaUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateIPSetDelta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveIPSet(ctx context.Context, in *IPSetRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveIPSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateActiveProfile(ctx context.Context, in *ActiveProfileUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateActiveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveActiveProfile(ctx context.Context, in *ActiveProfileRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveActiveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateHostEndpoint(ctx context.Context, in *HostEndpointUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateHostEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveHostEndpoint(ctx context.Context, in *HostEndpointRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveHostEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateLocalEndpoint(ctx context.Context, in *WorkloadEndpointUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateLocalEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveLocalEndpoint(ctx context.Context, in *WorkloadEndpointRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveLocalEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateHostMetaData(ctx context.Context, in *HostMetadataUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateHostMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveHostMetaData(ctx context.Context, in *HostMetadataRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveHostMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateServiceAccount(ctx context.Context, in *ServiceAccountUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveServiceAccount(ctx context.Context, in *ServiceAccountRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateNamespace(ctx context.Context, in *NamespaceUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveNamespace(ctx context.Context, in *NamespaceRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateRoute(ctx context.Context, in *RouteUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveRoute(ctx context.Context, in *RouteRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateVXLANTunnelEndpoint(ctx context.Context, in *VXLANTunnelEndpointUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateVXLANTunnelEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveVXLANTunnelEndpoint(ctx context.Context, in *VXLANTunnelEndpointRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveVXLANTunnelEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateWireguardEndpoint(ctx context.Context, in *WireguardEndpointUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateWireguardEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) RemoveWireguardEndpoint(ctx context.Context, in *WireguardEndpointRemove, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/RemoveWireguardEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraAgentClient) UpdateGlobalBGPConfig(ctx context.Context, in *GlobalBGPConfigUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/infra.InfraAgent/UpdateGlobalBGPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraAgentServer is the server API for InfraAgent service.
type InfraAgentServer interface {
	CreateNetwork(context.Context, *CreateNetworkRequest) (*AddReply, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DelReply, error)
	SetupHostInterface(context.Context, *SetupHostInterfaceRequest) (*Reply, error)
	NatTranslationAdd(context.Context, *NatTranslation) (*Reply, error)
	SetSnatAddress(context.Context, *SetSnatAddressRequest) (*Reply, error)
	AddDelSnatPrefix(context.Context, *AddDelSnatPrefixRequest) (*Reply, error)
	NatTranslationDelete(context.Context, *NatTranslation) (*Reply, error)
	ActivePolicyUpdate(context.Context, *ActivePolicyUpdate) (*Reply, error)
	ActivePolicyRemove(context.Context, *ActivePolicyRemove) (*Reply, error)
	UpdateIPSet(context.Context, *IPSetUpdate) (*Reply, error)
	UpdateIPSetDelta(context.Context, *IPSetDeltaUpdate) (*Reply, error)
	RemoveIPSet(context.Context, *IPSetRemove) (*Reply, error)
	UpdateActiveProfile(context.Context, *ActiveProfileUpdate) (*Reply, error)
	RemoveActiveProfile(context.Context, *ActiveProfileRemove) (*Reply, error)
	UpdateHostEndpoint(context.Context, *HostEndpointUpdate) (*Reply, error)
	RemoveHostEndpoint(context.Context, *HostEndpointRemove) (*Reply, error)
	UpdateLocalEndpoint(context.Context, *WorkloadEndpointUpdate) (*Reply, error)
	RemoveLocalEndpoint(context.Context, *WorkloadEndpointRemove) (*Reply, error)
	UpdateHostMetaData(context.Context, *HostMetadataUpdate) (*Reply, error)
	RemoveHostMetaData(context.Context, *HostMetadataRemove) (*Reply, error)
	UpdateServiceAccount(context.Context, *ServiceAccountUpdate) (*Reply, error)
	RemoveServiceAccount(context.Context, *ServiceAccountRemove) (*Reply, error)
	UpdateNamespace(context.Context, *NamespaceUpdate) (*Reply, error)
	RemoveNamespace(context.Context, *NamespaceRemove) (*Reply, error)
	UpdateRoute(context.Context, *RouteUpdate) (*Reply, error)
	RemoveRoute(context.Context, *RouteRemove) (*Reply, error)
	UpdateVXLANTunnelEndpoint(context.Context, *VXLANTunnelEndpointUpdate) (*Reply, error)
	RemoveVXLANTunnelEndpoint(context.Context, *VXLANTunnelEndpointRemove) (*Reply, error)
	UpdateWireguardEndpoint(context.Context, *WireguardEndpointUpdate) (*Reply, error)
	RemoveWireguardEndpoint(context.Context, *WireguardEndpointRemove) (*Reply, error)
	UpdateGlobalBGPConfig(context.Context, *GlobalBGPConfigUpdate) (*Reply, error)
}

// UnimplementedInfraAgentServer can be embedded to have forward compatible implementations.
type UnimplementedInfraAgentServer struct {
}

func (*UnimplementedInfraAgentServer) CreateNetwork(ctx context.Context, req *CreateNetworkRequest) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (*UnimplementedInfraAgentServer) DeleteNetwork(ctx context.Context, req *DeleteNetworkRequest) (*DelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedInfraAgentServer) SetupHostInterface(ctx context.Context, req *SetupHostInterfaceRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupHostInterface not implemented")
}
func (*UnimplementedInfraAgentServer) NatTranslationAdd(ctx context.Context, req *NatTranslation) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatTranslationAdd not implemented")
}
func (*UnimplementedInfraAgentServer) SetSnatAddress(ctx context.Context, req *SetSnatAddressRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSnatAddress not implemented")
}
func (*UnimplementedInfraAgentServer) AddDelSnatPrefix(ctx context.Context, req *AddDelSnatPrefixRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDelSnatPrefix not implemented")
}
func (*UnimplementedInfraAgentServer) NatTranslationDelete(ctx context.Context, req *NatTranslation) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatTranslationDelete not implemented")
}
func (*UnimplementedInfraAgentServer) ActivePolicyUpdate(ctx context.Context, req *ActivePolicyUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivePolicyUpdate not implemented")
}
func (*UnimplementedInfraAgentServer) ActivePolicyRemove(ctx context.Context, req *ActivePolicyRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivePolicyRemove not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateIPSet(ctx context.Context, req *IPSetUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPSet not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateIPSetDelta(ctx context.Context, req *IPSetDeltaUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPSetDelta not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveIPSet(ctx context.Context, req *IPSetRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPSet not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateActiveProfile(ctx context.Context, req *ActiveProfileUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveProfile not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveActiveProfile(ctx context.Context, req *ActiveProfileRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveActiveProfile not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateHostEndpoint(ctx context.Context, req *HostEndpointUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveHostEndpoint(ctx context.Context, req *HostEndpointRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateLocalEndpoint(ctx context.Context, req *WorkloadEndpointUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocalEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveLocalEndpoint(ctx context.Context, req *WorkloadEndpointRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLocalEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateHostMetaData(ctx context.Context, req *HostMetadataUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostMetaData not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveHostMetaData(ctx context.Context, req *HostMetadataRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostMetaData not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateServiceAccount(ctx context.Context, req *ServiceAccountUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveServiceAccount(ctx context.Context, req *ServiceAccountRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceAccount not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateNamespace(ctx context.Context, req *NamespaceUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveNamespace(ctx context.Context, req *NamespaceRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNamespace not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateRoute(ctx context.Context, req *RouteUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoute not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveRoute(ctx context.Context, req *RouteRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoute not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateVXLANTunnelEndpoint(ctx context.Context, req *VXLANTunnelEndpointUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVXLANTunnelEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveVXLANTunnelEndpoint(ctx context.Context, req *VXLANTunnelEndpointRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVXLANTunnelEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateWireguardEndpoint(ctx context.Context, req *WireguardEndpointUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWireguardEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) RemoveWireguardEndpoint(ctx context.Context, req *WireguardEndpointRemove) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWireguardEndpoint not implemented")
}
func (*UnimplementedInfraAgentServer) UpdateGlobalBGPConfig(ctx context.Context, req *GlobalBGPConfigUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalBGPConfig not implemented")
}

func RegisterInfraAgentServer(s *grpc.Server, srv InfraAgentServer) {
	s.RegisterService(&_InfraAgent_serviceDesc, srv)
}

func _InfraAgent_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_SetupHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).SetupHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/SetupHostInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).SetupHostInterface(ctx, req.(*SetupHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_NatTranslationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatTranslation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).NatTranslationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/NatTranslationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).NatTranslationAdd(ctx, req.(*NatTranslation))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_SetSnatAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSnatAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).SetSnatAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/SetSnatAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).SetSnatAddress(ctx, req.(*SetSnatAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_AddDelSnatPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDelSnatPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).AddDelSnatPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/AddDelSnatPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).AddDelSnatPrefix(ctx, req.(*AddDelSnatPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_NatTranslationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatTranslation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).NatTranslationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/NatTranslationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).NatTranslationDelete(ctx, req.(*NatTranslation))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_ActivePolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivePolicyUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).ActivePolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/ActivePolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).ActivePolicyUpdate(ctx, req.(*ActivePolicyUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_ActivePolicyRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivePolicyRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).ActivePolicyRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/ActivePolicyRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).ActivePolicyRemove(ctx, req.(*ActivePolicyRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateIPSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSetUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateIPSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateIPSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateIPSet(ctx, req.(*IPSetUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateIPSetDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSetDeltaUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateIPSetDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateIPSetDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateIPSetDelta(ctx, req.(*IPSetDeltaUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveIPSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSetRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveIPSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveIPSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveIPSet(ctx, req.(*IPSetRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateActiveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveProfileUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateActiveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateActiveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateActiveProfile(ctx, req.(*ActiveProfileUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveActiveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveProfileRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveActiveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveActiveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveActiveProfile(ctx, req.(*ActiveProfileRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateHostEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostEndpointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateHostEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateHostEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateHostEndpoint(ctx, req.(*HostEndpointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveHostEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostEndpointRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveHostEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveHostEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveHostEndpoint(ctx, req.(*HostEndpointRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateLocalEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadEndpointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateLocalEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateLocalEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateLocalEndpoint(ctx, req.(*WorkloadEndpointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveLocalEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadEndpointRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveLocalEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveLocalEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveLocalEndpoint(ctx, req.(*WorkloadEndpointRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateHostMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMetadataUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateHostMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateHostMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateHostMetaData(ctx, req.(*HostMetadataUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveHostMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostMetadataRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveHostMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveHostMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveHostMetaData(ctx, req.(*HostMetadataRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateServiceAccount(ctx, req.(*ServiceAccountUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccountRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveServiceAccount(ctx, req.(*ServiceAccountRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateNamespace(ctx, req.(*NamespaceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveNamespace(ctx, req.(*NamespaceRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateRoute(ctx, req.(*RouteUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveRoute(ctx, req.(*RouteRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateVXLANTunnelEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VXLANTunnelEndpointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateVXLANTunnelEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateVXLANTunnelEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateVXLANTunnelEndpoint(ctx, req.(*VXLANTunnelEndpointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveVXLANTunnelEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VXLANTunnelEndpointRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveVXLANTunnelEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveVXLANTunnelEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveVXLANTunnelEndpoint(ctx, req.(*VXLANTunnelEndpointRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateWireguardEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireguardEndpointUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateWireguardEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateWireguardEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateWireguardEndpoint(ctx, req.(*WireguardEndpointUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_RemoveWireguardEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireguardEndpointRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).RemoveWireguardEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/RemoveWireguardEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).RemoveWireguardEndpoint(ctx, req.(*WireguardEndpointRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraAgent_UpdateGlobalBGPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalBGPConfigUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraAgentServer).UpdateGlobalBGPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infra.InfraAgent/UpdateGlobalBGPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraAgentServer).UpdateGlobalBGPConfig(ctx, req.(*GlobalBGPConfigUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infra.InfraAgent",
	HandlerType: (*InfraAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _InfraAgent_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _InfraAgent_DeleteNetwork_Handler,
		},
		{
			MethodName: "SetupHostInterface",
			Handler:    _InfraAgent_SetupHostInterface_Handler,
		},
		{
			MethodName: "NatTranslationAdd",
			Handler:    _InfraAgent_NatTranslationAdd_Handler,
		},
		{
			MethodName: "SetSnatAddress",
			Handler:    _InfraAgent_SetSnatAddress_Handler,
		},
		{
			MethodName: "AddDelSnatPrefix",
			Handler:    _InfraAgent_AddDelSnatPrefix_Handler,
		},
		{
			MethodName: "NatTranslationDelete",
			Handler:    _InfraAgent_NatTranslationDelete_Handler,
		},
		{
			MethodName: "ActivePolicyUpdate",
			Handler:    _InfraAgent_ActivePolicyUpdate_Handler,
		},
		{
			MethodName: "ActivePolicyRemove",
			Handler:    _InfraAgent_ActivePolicyRemove_Handler,
		},
		{
			MethodName: "UpdateIPSet",
			Handler:    _InfraAgent_UpdateIPSet_Handler,
		},
		{
			MethodName: "UpdateIPSetDelta",
			Handler:    _InfraAgent_UpdateIPSetDelta_Handler,
		},
		{
			MethodName: "RemoveIPSet",
			Handler:    _InfraAgent_RemoveIPSet_Handler,
		},
		{
			MethodName: "UpdateActiveProfile",
			Handler:    _InfraAgent_UpdateActiveProfile_Handler,
		},
		{
			MethodName: "RemoveActiveProfile",
			Handler:    _InfraAgent_RemoveActiveProfile_Handler,
		},
		{
			MethodName: "UpdateHostEndpoint",
			Handler:    _InfraAgent_UpdateHostEndpoint_Handler,
		},
		{
			MethodName: "RemoveHostEndpoint",
			Handler:    _InfraAgent_RemoveHostEndpoint_Handler,
		},
		{
			MethodName: "UpdateLocalEndpoint",
			Handler:    _InfraAgent_UpdateLocalEndpoint_Handler,
		},
		{
			MethodName: "RemoveLocalEndpoint",
			Handler:    _InfraAgent_RemoveLocalEndpoint_Handler,
		},
		{
			MethodName: "UpdateHostMetaData",
			Handler:    _InfraAgent_UpdateHostMetaData_Handler,
		},
		{
			MethodName: "RemoveHostMetaData",
			Handler:    _InfraAgent_RemoveHostMetaData_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _InfraAgent_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "RemoveServiceAccount",
			Handler:    _InfraAgent_RemoveServiceAccount_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _InfraAgent_UpdateNamespace_Handler,
		},
		{
			MethodName: "RemoveNamespace",
			Handler:    _InfraAgent_RemoveNamespace_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _InfraAgent_UpdateRoute_Handler,
		},
		{
			MethodName: "RemoveRoute",
			Handler:    _InfraAgent_RemoveRoute_Handler,
		},
		{
			MethodName: "UpdateVXLANTunnelEndpoint",
			Handler:    _InfraAgent_UpdateVXLANTunnelEndpoint_Handler,
		},
		{
			MethodName: "RemoveVXLANTunnelEndpoint",
			Handler:    _InfraAgent_RemoveVXLANTunnelEndpoint_Handler,
		},
		{
			MethodName: "UpdateWireguardEndpoint",
			Handler:    _InfraAgent_UpdateWireguardEndpoint_Handler,
		},
		{
			MethodName: "RemoveWireguardEndpoint",
			Handler:    _InfraAgent_RemoveWireguardEndpoint_Handler,
		},
		{
			MethodName: "UpdateGlobalBGPConfig",
			Handler:    _InfraAgent_UpdateGlobalBGPConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra.proto",
}

func (m *NatEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintInfra(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatEndpointTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatEndpointTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatEndpointTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SrcEp != nil {
		{
			size, err := m.SrcEp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DstEp != nil {
		{
			size, err := m.DstEp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatTranslation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatTranslation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatTranslation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Backends) > 0 {
		for iNdEx := len(m.Backends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Backends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInfra(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.IsRealIp {
		i--
		if m.IsRealIp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Proto) > 0 {
		i -= len(m.Proto)
		copy(dAtA[i:], m.Proto)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.Proto)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetSnatAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSnatAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSnatAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SnatIpv6) > 0 {
		i -= len(m.SnatIpv6)
		copy(dAtA[i:], m.SnatIpv6)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.SnatIpv6)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SnatIpv4) > 0 {
		i -= len(m.SnatIpv4)
		copy(dAtA[i:], m.SnatIpv4)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.SnatIpv4)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDelSnatPrefixRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDelSnatPrefixRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDelSnatPrefixRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsAdd {
		i--
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MacAddr) > 0 {
		i -= len(m.MacAddr)
		copy(dAtA[i:], m.MacAddr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.MacAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostIfName) > 0 {
		i -= len(m.HostIfName)
		copy(dAtA[i:], m.HostIfName)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.HostIfName)))
		i--
		dAtA[i] = 0x12
	}
	if m.AddRequest != nil {
		{
			size, err := m.AddRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MacAddr) > 0 {
		i -= len(m.MacAddr)
		copy(dAtA[i:], m.MacAddr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.MacAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostIfName) > 0 {
		i -= len(m.HostIfName)
		copy(dAtA[i:], m.HostIfName)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.HostIfName)))
		i--
		dAtA[i] = 0x12
	}
	if m.DelRequest != nil {
		{
			size, err := m.DelRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInfra(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetupHostInterfaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetupHostInterfaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetupHostInterfaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MacAddr) > 0 {
		i -= len(m.MacAddr)
		copy(dAtA[i:], m.MacAddr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.MacAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IfName) > 0 {
		i -= len(m.IfName)
		copy(dAtA[i:], m.IfName)
		i = encodeVarintInfra(dAtA, i, uint64(len(m.IfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInfra(dAtA []byte, offset int, v uint64) int {
	offset -= sovInfra(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NatEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovInfra(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatEndpointTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstEp != nil {
		l = m.DstEp.Size()
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.SrcEp != nil {
		l = m.SrcEp.Size()
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatTranslation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Endpoint != nil {
		l = m.Endpoint.Size()
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.IsRealIp {
		n += 2
	}
	if len(m.Backends) > 0 {
		for _, e := range m.Backends {
			l = e.Size()
			n += 1 + l + sovInfra(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSnatAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SnatIpv4)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.SnatIpv6)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDelSnatPrefixRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAdd {
		n += 2
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddRequest != nil {
		l = m.AddRequest.Size()
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.HostIfName)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.MacAddr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelRequest != nil {
		l = m.DelRequest.Size()
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.HostIfName)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.MacAddr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetupHostInterfaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IfName)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	l = len(m.MacAddr)
	if l > 0 {
		n += 1 + l + sovInfra(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInfra(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInfra(x uint64) (n int) {
	return sovInfra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NatEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatEndpointTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatEndpointTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatEndpointTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstEp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstEp == nil {
				m.DstEp = &NatEndpoint{}
			}
			if err := m.DstEp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcEp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcEp == nil {
				m.SrcEp = &NatEndpoint{}
			}
			if err := m.SrcEp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatTranslation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatTranslation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatTranslation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &NatEndpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRealIp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRealIp = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backends = append(m.Backends, &NatEndpointTuple{})
			if err := m.Backends[len(m.Backends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSnatAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSnatAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSnatAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatIpv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnatIpv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatIpv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnatIpv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDelSnatPrefixRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDelSnatPrefixRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDelSnatPrefixRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddRequest == nil {
				m.AddRequest = &AddRequest{}
			}
			if err := m.AddRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelRequest == nil {
				m.DelRequest = &DelRequest{}
			}
			if err := m.DelRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetupHostInterfaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetupHostInterfaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetupHostInterfaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInfra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInfra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInfra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInfra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInfra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInfra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInfra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInfra
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInfra
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInfra
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInfra        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInfra          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInfra = fmt.Errorf("proto: unexpected end of group")
)
