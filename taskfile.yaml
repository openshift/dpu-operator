version: '3'

run: when_changed

env:
  CGO_ENABLED: "0"
  GOARCH:   '{{ default "amd64" .GOARCH }}'
  GOOS:     '{{ default "linux" .GOOS }}'
  SUBMODULES: '{{ default "true" .SUBMODULES }}'

vars:
  DPU_OPERATOR_TEMP_DIR: /tmp/dpu-operator-tmp
  DPU_OPERATOR_GO_CACHE: /tmp/dpu-operator-cache
  BINDIR: bin
  BINDIR_ABS:
    sh: if [[ "{{.BINDIR}}" = /* ]]; then echo "{{.BINDIR}}"; else echo "$(pwd)/{{.BINDIR}}"; fi
  HOST_CLUSTER_DOMAIN: '{{ default "ocpcluster.redhat.com" .HOST_CLUSTER_DOMAIN }}'
  DPU_CLUSTER_IP: '{{ default "172.16.3.16" .DPU_CLUSTER_IP }}'
  REGISTRY_HOST: '{{ default (printf "default-route-openshift-image-registry.apps.%s/in-cluster-registry" .HOST_CLUSTER_DOMAIN) .REGISTRY_HOST }}'
  REGISTRY_DPU: '{{ default (printf "default-route-openshift-image-registry.apps.%s.nip.io/in-cluster-registry" .DPU_CLUSTER_IP) .REGISTRY_DPU }}'
  REGISTRY: '{{.REGISTRY_HOST}}'
  ENVTEST_K8S_VERSION: 1.27.1
  KUSTOMIZE_VERSION: v5.6.0
  GINKGO_VERSION:
    sh: go list -m -f '{{"{{.Version}}"}}' github.com/onsi/ginkgo/v2 | sed 's/^v//'
  CONTROLLER_TOOLS_VERSION: v0.15.0
  SETUP_ENVTEST_VERSION: release-0.16
  OPERATOR_SDK_VERSION: v1.37.0
  OPM_VERSION: v1.23.0

includes:
  images:
    taskfile: ./taskfiles/images.yaml
    flatten: true
  binaries:
    taskfile: ./taskfiles/binaries.yaml
    flatten: true
  clusters:
    taskfile: ./taskfiles/clusters.yaml
    flatten: true
  operator-sdk:
    taskfile: ./taskfiles/operator-sdk.yaml
    flatten: true
  proto:
    taskfile: ./taskfiles/proto.yaml
    flatten: true
  
tasks:
  bindir:
    silent: true
    cmds:
      - echo "{{.BINDIR_ABS}}"

  show-registry-config:
    desc: "Show current registry configuration"
    cmds:
      - 'echo "Host Registry: {{.REGISTRY_HOST}}"'
      - 'echo "DPU Registry:  {{.REGISTRY_DPU}}"'
      - 'echo "Default Registry: {{.REGISTRY}}"'

  verify-registry-routes:
    desc: "Verify registry routes match actual cluster routes (requires running clusters)"
    cmds:
      - |
        echo "Verifying registry routes..."
        echo "Expected host registry: {{.REGISTRY_HOST}}"
        if oc get route default-route -n openshift-image-registry --kubeconfig /root/kubeconfig.ocpcluster &>/dev/null; then
          ACTUAL_HOST=$(oc get route default-route -n openshift-image-registry --template='{{`{{ .spec.host }}`}}' --kubeconfig /root/kubeconfig.ocpcluster)
          echo "Actual host registry:   $ACTUAL_HOST"
          if [ "{{.REGISTRY_HOST}}" = "$ACTUAL_HOST" ]; then
            echo "Host registry matches"
          else
            echo "Host registry mismatch - consider setting HOST_CLUSTER_DOMAIN environment variable"
          fi
        else
          echo "Host cluster not available or registry route not found"
        fi
        
        echo ""
        echo "Expected DPU registry: {{.REGISTRY_DPU}}"
        if oc get route default-route -n openshift-image-registry --kubeconfig /root/kubeconfig.microshift &>/dev/null; then
          ACTUAL_DPU=$(oc get route default-route -n openshift-image-registry --template='{{`{{ .spec.host }}`}}' --kubeconfig /root/kubeconfig.microshift)
          echo "Actual DPU registry:    $ACTUAL_DPU"
          if [ "{{.REGISTRY_DPU}}" = "$ACTUAL_DPU" ]; then
            echo "DPU registry matches"
          else
            echo "DPU registry mismatch - consider setting DPU_CLUSTER_IP environment variable"
          fi
        else
          echo "DPU cluster not available or registry route not found"
        fi

  push-image-helper:
    internal: true
    vars:
      SOURCE: '{{.SOURCE}}'
      IMAGE: '{{.IMAGE}}'
    cmds:
      - buildah manifest push --all --retry 3 --retry-delay 10s '{{.SOURCE}}-manifest' 'docker://{{.IMAGE}}'

  undeploy-helper:
    internal: true
    deps:
      - task: kustomize
    vars:
      KUBECONFIG: '{{.KUBECONFIG}}'
    status:
      - NS=$(KUBECONFIG={{.KUBECONFIG}} oc get ns openshift-dpu-operator)
        if [[ -n "$NS" ]]; then false else true fi
    cmds:
      - bin/kustomize build config/default | KUBECONFIG={{.KUBECONFIG}} oc delete --ignore-not-found=true -f -
      - KUBECONFIG={{.KUBECONFIG}} oc wait --for=delete ns openshift-dpu-operator --timeout=300s
      - echo "Namespace 'openshift-dpu-operator' has been removed."

  undeploy:
    vars:
      KUBECONFIG_HOST: "/root/kubeconfig.ocpcluster"
      KUBECONFIG_DPU: "/root/kubeconfig.microshift"
    deps:
      - task: undeploy-helper
        vars:
          KUBECONFIG: '{{.KUBECONFIG_DPU}}'
      - task: undeploy-helper
        vars:
          KUBECONFIG: '{{.KUBECONFIG_HOST}}'

  undeploy-1c:
    vars:
      KUBECONFIG_HOST: "/root/kubeconfig.ocpcluster"
    deps:
      - task: undeploy-helper
        vars:
          KUBECONFIG: '{{.KUBECONFIG_HOST}}'

  deploy-prep:
    internal: true
    deps:
      - task: kustomize
    cmds:
      - mkdir -p bin/host bin/dpu
      - >
        go run ./tools/config/config.go
        -registry-url {{.REGISTRY_HOST}}
        -template-file config/dev/local-images-template.yaml
        -output-file bin/host/local-images.yaml
      - >
        go run ./tools/config/config.go
        -registry-url {{.REGISTRY_DPU}}
        -template-file config/dev/local-images-template.yaml
        -output-file bin/dpu/local-images.yaml
      - cp config/dev/kustomization.yaml bin/host/
      - cp config/dev/kustomization.yaml bin/dpu/
      - sed -i 's/local-images-template.yaml/local-images.yaml/' bin/host/kustomization.yaml
      - sed -i 's/local-images-template.yaml/local-images.yaml/' bin/dpu/kustomization.yaml
      - sed -i 's|../config/default|../../config/default|' bin/host/kustomization.yaml
      - sed -i 's|../config/default|../../config/default|' bin/dpu/kustomization.yaml
  
  ## Download envtest-setup locally if necessary
  envtest:
    status:
      - test -s {{.BINDIR}}/setup-envtest
      - ./{{.BINDIR}}/setup-envtest --help | head -1 | grep -q {{.SETUP_ENVTEST_VERSION}}
    cmds:
      - GOBIN={{.BINDIR_ABS}} GOFLAGS='' go install sigs.k8s.io/controller-runtime/tools/setup-envtest@{{.SETUP_ENVTEST_VERSION}}

  deploy:
    deps:
      - task: deploy-prep
    cmds:
      - task: undeploy
        vars:
          KUBECONFIG_DPU: "/root/kubeconfig.microshift"
          KUBECONFIG_HOST: "/root/kubeconfig.ocpcluster"
      - bin/kustomize build bin/dpu | KUBECONFIG="/root/kubeconfig.microshift" oc apply -f -
      - bin/kustomize build bin/host | KUBECONFIG="/root/kubeconfig.ocpcluster" oc apply -f -
      - KUBECONFIG="/root/kubeconfig.microshift" oc -n openshift-dpu-operator wait --for=condition=ready pod --all --timeout=300s
      - KUBECONFIG="/root/kubeconfig.ocpcluster" oc -n openshift-dpu-operator wait --for=condition=ready pod --all --timeout=300s

  deploy-1c:
    deps:
      - task: deploy-prep
    cmds:
      - task: undeploy-1c
        vars:
          KUBECONFIG_HOST: "/root/kubeconfig.ocpcluster"
      - bin/kustomize build bin/host | KUBECONFIG="/root/kubeconfig.ocpcluster" oc apply -f -
      - KUBECONFIG="/root/kubeconfig.ocpcluster" oc -n openshift-dpu-operator wait --for=condition=ready pod --all --timeout=300s

  ensure-test-images-in-both-registries:
    desc: "Ensure test images are available in both registries"
    cmds:
      - |
        echo "Ensuring test images are available in both registries..."
        skopeo copy \
          docker://ghcr.io/ovn-kubernetes/kubernetes-traffic-flow-tests:latest \
          docker://{{.REGISTRY_HOST}}/kubernetes-traffic-flow-tests:latest
        skopeo copy \
          docker://ghcr.io/ovn-kubernetes/kubernetes-traffic-flow-tests:latest \
          docker://{{.REGISTRY_DPU}}/kubernetes-traffic-flow-tests:latest
        echo "Test images copied to both registries"

  e2e-test:
    deps:
      - task: kustomize
    cmds:
      - task: deploy-clusters
      - task: fast-e2e-test

  fast-e2e-test:
    cmds:
      - task: redeploy
      - sh hack/setup.sh
      - task: run-e2e-test

  run-e2e-test:
    deps:
      - task: ginkgo
      - task: envtest
    cmds:
      - task: ensure-test-images-in-both-registries
      - >
        FAST_TEST=true
        REGISTRY={{.REGISTRY}}
        NF_INGRESS_IP=10.20.30.2
        EXTERNAL_CLIENT_DEV=eno12409
        EXTERNAL_CLIENT_IP=10.20.30.100
        KUBEBUILDER_ASSETS="$({{.BINDIR}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.BINDIR_ABS}} -p path)"
        {{.BINDIR}}/ginkgo -coverprofile cover.out ./e2e_test/...
      - hack/traffic_flow_tests.sh

  prepare-e2e-test:
    cmds:
      - >
        if [ "{{.SUBMODULES}}" = "true" ]; then
            hack/prepare-submodules.sh
        fi
            hack/prepare-venv.sh

  redeploy:
    cmds:
      - task: build-image-all
      - task: undeploy
      - task: deploy

  podman-check:
    cmds:
      - |
        if which podman > /dev/null; then
          echo "Podman is available"
        else
          echo "Error: Podman is not available"
          exit 1
        fi

  ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.
  manifests:
    deps:
      - task: controller-gen
    cmds:
      - GOFLAGS='' {{.BINDIR}}/controller-gen rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases

  prow-ci-manifests-check:
    cmds:
      - |
        changed_files=$(git diff --name-only)
        for file in $changed_files; do
          diff_output=$(git diff -- $file)
          echo "$diff_output"
        done
        if [ -n "$changed_files" ]; then
          echo "Please run 'make manifests', the following files changed: $changed_files"
          exit 1
        fi

  ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.
  generate:
    deps:
      - task: controller-gen
    cmds:
      - GOFLAGS='' {{.BINDIR}}/controller-gen object:headerFile="hack/boilerplate.go.txt" paths="./..."

  fmt:
    status:
      - |
        files=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./dpu-api/vendor/*")
        output=$(gofmt -d $files)
        [ -z "$output" ]
    cmds:
      - go fmt ./...
      - cd api && go fmt ./...

  fmt-check:
    cmds:
      - |
        files=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./dpu-api/vendor/*")
        output=$(gofmt -d $files)
        [ -n "$output" ] && echo "$output"
        [ -z "$output" ]

  vet:
    cmds:
      - go vet ./...

  ## Download controller-gen locally if necessary. If wrong version is installed, it will be overwritten.
  controller-gen:
    status:
      - test -s {{.BINDIR}}/controller-gen
      - ./{{.BINDIR}}/controller-gen --version | grep -q {{.CONTROLLER_TOOLS_VERSION}}
    cmds:
      - GOBIN={{.BINDIR_ABS}} GOFLAGS='' go install sigs.k8s.io/controller-tools/cmd/controller-gen@{{.CONTROLLER_TOOLS_VERSION}}

  test:
    deps:
      - task: podman-check
      - task: manifests
      - task: generate
      - task: fmt
      - task: vet
      - task: envtest
      - task: ginkgo
    cmds:
      - >
        FAST_TEST=false
        KUBEBUILDER_ASSETS="$({{.BINDIR}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.BINDIR_ABS}} -p path)"
        timeout 30m {{.BINDIR}}/ginkgo --repeat 4 {{if .TEST_FOCUS}}-focus "{{.TEST_FOCUS}}" {{end}}-coverprofile cover.out ./internal/... ./pkgs/... ./api/v1/...

  fast-test:
    deps:
      - task: envtest
      - task: ginkgo
    cmds:
      - >
        FAST_TEST=true
        KUBEBUILDER_ASSETS="$({{.BINDIR}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} --bin-dir {{.BINDIR_ABS}} -p path)"
        {{.BINDIR}}/ginkgo {{if .TEST_FOCUS}}-focus "{{.TEST_FOCUS}}" {{end}}-coverprofile cover.out ./internal/... ./pkgs/... ./api/v1/...

  vendor:
    cmds:
      - |
        for d in . dpu-api api tools ; do
          if [ "$d" = . ] ; then
            (cd "$d" && go mod vendor) || exit $? ;
          fi ;
          (cd "$d" && go mod tidy) || exit $? ;
        done
