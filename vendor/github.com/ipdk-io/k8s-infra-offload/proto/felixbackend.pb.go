// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: felixbackend.proto

package proto

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPVersion int32

const (
	IPVersion_ANY  IPVersion = 0
	IPVersion_IPV4 IPVersion = 4
	IPVersion_IPV6 IPVersion = 6
)

var IPVersion_name = map[int32]string{
	0: "ANY",
	4: "IPV4",
	6: "IPV6",
}

var IPVersion_value = map[string]int32{
	"ANY":  0,
	"IPV4": 4,
	"IPV6": 6,
}

func (x IPVersion) String() string {
	return proto.EnumName(IPVersion_name, int32(x))
}

func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{0}
}

type RouteType int32

const (
	// CIDR_INFO gives information about a CIDR without establishing a route.  For example,
	// it is emitted for IP pools with no blocks.
	RouteType_CIDR_INFO       RouteType = 0
	RouteType_REMOTE_WORKLOAD RouteType = 1
	RouteType_REMOTE_HOST     RouteType = 2
	RouteType_LOCAL_WORKLOAD  RouteType = 3
	RouteType_LOCAL_HOST      RouteType = 4
	RouteType_REMOTE_TUNNEL   RouteType = 5
	RouteType_LOCAL_TUNNEL    RouteType = 6
)

var RouteType_name = map[int32]string{
	0: "CIDR_INFO",
	1: "REMOTE_WORKLOAD",
	2: "REMOTE_HOST",
	3: "LOCAL_WORKLOAD",
	4: "LOCAL_HOST",
	5: "REMOTE_TUNNEL",
	6: "LOCAL_TUNNEL",
}

var RouteType_value = map[string]int32{
	"CIDR_INFO":       0,
	"REMOTE_WORKLOAD": 1,
	"REMOTE_HOST":     2,
	"LOCAL_WORKLOAD":  3,
	"LOCAL_HOST":      4,
	"REMOTE_TUNNEL":   5,
	"LOCAL_TUNNEL":    6,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}

func (RouteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{1}
}

type IPPoolType int32

const (
	IPPoolType_NONE     IPPoolType = 0
	IPPoolType_NO_ENCAP IPPoolType = 1
	IPPoolType_VXLAN    IPPoolType = 2
	IPPoolType_IPIP     IPPoolType = 3
)

var IPPoolType_name = map[int32]string{
	0: "NONE",
	1: "NO_ENCAP",
	2: "VXLAN",
	3: "IPIP",
}

var IPPoolType_value = map[string]int32{
	"NONE":     0,
	"NO_ENCAP": 1,
	"VXLAN":    2,
	"IPIP":     3,
}

func (x IPPoolType) String() string {
	return proto.EnumName(IPPoolType_name, int32(x))
}

func (IPPoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{2}
}

type IPSetUpdate_IPSetType int32

const (
	IPSetUpdate_IP          IPSetUpdate_IPSetType = 0
	IPSetUpdate_IP_AND_PORT IPSetUpdate_IPSetType = 1
	IPSetUpdate_NET         IPSetUpdate_IPSetType = 2
)

var IPSetUpdate_IPSetType_name = map[int32]string{
	0: "IP",
	1: "IP_AND_PORT",
	2: "NET",
}

var IPSetUpdate_IPSetType_value = map[string]int32{
	"IP":          0,
	"IP_AND_PORT": 1,
	"NET":         2,
}

func (x IPSetUpdate_IPSetType) String() string {
	return proto.EnumName(IPSetUpdate_IPSetType_name, int32(x))
}

func (IPSetUpdate_IPSetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{5, 0}
}

type SyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{0}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

type ToDataplane struct {
	// Sequence number incremented with each message.  Useful for correlating
	// messages in logs.
	SequenceNumber uint64 `protobuf:"varint,15,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*ToDataplane_InSync
	//	*ToDataplane_IpsetUpdate
	//	*ToDataplane_IpsetDeltaUpdate
	//	*ToDataplane_IpsetRemove
	//	*ToDataplane_ActiveProfileUpdate
	//	*ToDataplane_ActiveProfileRemove
	//	*ToDataplane_ActivePolicyUpdate
	//	*ToDataplane_ActivePolicyRemove
	//	*ToDataplane_HostEndpointUpdate
	//	*ToDataplane_HostEndpointRemove
	//	*ToDataplane_WorkloadEndpointUpdate
	//	*ToDataplane_WorkloadEndpointRemove
	//	*ToDataplane_ConfigUpdate
	//	*ToDataplane_HostMetadataUpdate
	//	*ToDataplane_HostMetadataRemove
	//	*ToDataplane_IpamPoolUpdate
	//	*ToDataplane_IpamPoolRemove
	//	*ToDataplane_ServiceAccountUpdate
	//	*ToDataplane_ServiceAccountRemove
	//	*ToDataplane_NamespaceUpdate
	//	*ToDataplane_NamespaceRemove
	//	*ToDataplane_RouteUpdate
	//	*ToDataplane_RouteRemove
	//	*ToDataplane_VtepUpdate
	//	*ToDataplane_VtepRemove
	//	*ToDataplane_WireguardEndpointUpdate
	//	*ToDataplane_WireguardEndpointRemove
	//	*ToDataplane_GlobalBgpConfigUpdate
	Payload              isToDataplane_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ToDataplane) Reset()         { *m = ToDataplane{} }
func (m *ToDataplane) String() string { return proto.CompactTextString(m) }
func (*ToDataplane) ProtoMessage()    {}
func (*ToDataplane) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{1}
}
func (m *ToDataplane) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToDataplane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToDataplane.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToDataplane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToDataplane.Merge(m, src)
}
func (m *ToDataplane) XXX_Size() int {
	return m.Size()
}
func (m *ToDataplane) XXX_DiscardUnknown() {
	xxx_messageInfo_ToDataplane.DiscardUnknown(m)
}

var xxx_messageInfo_ToDataplane proto.InternalMessageInfo

type isToDataplane_Payload interface {
	isToDataplane_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ToDataplane_InSync struct {
	InSync *InSync `protobuf:"bytes,1,opt,name=in_sync,json=inSync,proto3,oneof" json:"in_sync,omitempty"`
}
type ToDataplane_IpsetUpdate struct {
	IpsetUpdate *IPSetUpdate `protobuf:"bytes,2,opt,name=ipset_update,json=ipsetUpdate,proto3,oneof" json:"ipset_update,omitempty"`
}
type ToDataplane_IpsetDeltaUpdate struct {
	IpsetDeltaUpdate *IPSetDeltaUpdate `protobuf:"bytes,3,opt,name=ipset_delta_update,json=ipsetDeltaUpdate,proto3,oneof" json:"ipset_delta_update,omitempty"`
}
type ToDataplane_IpsetRemove struct {
	IpsetRemove *IPSetRemove `protobuf:"bytes,4,opt,name=ipset_remove,json=ipsetRemove,proto3,oneof" json:"ipset_remove,omitempty"`
}
type ToDataplane_ActiveProfileUpdate struct {
	ActiveProfileUpdate *ActiveProfileUpdate `protobuf:"bytes,5,opt,name=active_profile_update,json=activeProfileUpdate,proto3,oneof" json:"active_profile_update,omitempty"`
}
type ToDataplane_ActiveProfileRemove struct {
	ActiveProfileRemove *ActiveProfileRemove `protobuf:"bytes,6,opt,name=active_profile_remove,json=activeProfileRemove,proto3,oneof" json:"active_profile_remove,omitempty"`
}
type ToDataplane_ActivePolicyUpdate struct {
	ActivePolicyUpdate *ActivePolicyUpdate `protobuf:"bytes,7,opt,name=active_policy_update,json=activePolicyUpdate,proto3,oneof" json:"active_policy_update,omitempty"`
}
type ToDataplane_ActivePolicyRemove struct {
	ActivePolicyRemove *ActivePolicyRemove `protobuf:"bytes,8,opt,name=active_policy_remove,json=activePolicyRemove,proto3,oneof" json:"active_policy_remove,omitempty"`
}
type ToDataplane_HostEndpointUpdate struct {
	HostEndpointUpdate *HostEndpointUpdate `protobuf:"bytes,9,opt,name=host_endpoint_update,json=hostEndpointUpdate,proto3,oneof" json:"host_endpoint_update,omitempty"`
}
type ToDataplane_HostEndpointRemove struct {
	HostEndpointRemove *HostEndpointRemove `protobuf:"bytes,10,opt,name=host_endpoint_remove,json=hostEndpointRemove,proto3,oneof" json:"host_endpoint_remove,omitempty"`
}
type ToDataplane_WorkloadEndpointUpdate struct {
	WorkloadEndpointUpdate *WorkloadEndpointUpdate `protobuf:"bytes,11,opt,name=workload_endpoint_update,json=workloadEndpointUpdate,proto3,oneof" json:"workload_endpoint_update,omitempty"`
}
type ToDataplane_WorkloadEndpointRemove struct {
	WorkloadEndpointRemove *WorkloadEndpointRemove `protobuf:"bytes,12,opt,name=workload_endpoint_remove,json=workloadEndpointRemove,proto3,oneof" json:"workload_endpoint_remove,omitempty"`
}
type ToDataplane_ConfigUpdate struct {
	ConfigUpdate *ConfigUpdate `protobuf:"bytes,13,opt,name=config_update,json=configUpdate,proto3,oneof" json:"config_update,omitempty"`
}
type ToDataplane_HostMetadataUpdate struct {
	HostMetadataUpdate *HostMetadataUpdate `protobuf:"bytes,14,opt,name=host_metadata_update,json=hostMetadataUpdate,proto3,oneof" json:"host_metadata_update,omitempty"`
}
type ToDataplane_HostMetadataRemove struct {
	HostMetadataRemove *HostMetadataRemove `protobuf:"bytes,18,opt,name=host_metadata_remove,json=hostMetadataRemove,proto3,oneof" json:"host_metadata_remove,omitempty"`
}
type ToDataplane_IpamPoolUpdate struct {
	IpamPoolUpdate *IPAMPoolUpdate `protobuf:"bytes,16,opt,name=ipam_pool_update,json=ipamPoolUpdate,proto3,oneof" json:"ipam_pool_update,omitempty"`
}
type ToDataplane_IpamPoolRemove struct {
	IpamPoolRemove *IPAMPoolRemove `protobuf:"bytes,17,opt,name=ipam_pool_remove,json=ipamPoolRemove,proto3,oneof" json:"ipam_pool_remove,omitempty"`
}
type ToDataplane_ServiceAccountUpdate struct {
	ServiceAccountUpdate *ServiceAccountUpdate `protobuf:"bytes,19,opt,name=service_account_update,json=serviceAccountUpdate,proto3,oneof" json:"service_account_update,omitempty"`
}
type ToDataplane_ServiceAccountRemove struct {
	ServiceAccountRemove *ServiceAccountRemove `protobuf:"bytes,20,opt,name=service_account_remove,json=serviceAccountRemove,proto3,oneof" json:"service_account_remove,omitempty"`
}
type ToDataplane_NamespaceUpdate struct {
	NamespaceUpdate *NamespaceUpdate `protobuf:"bytes,21,opt,name=namespace_update,json=namespaceUpdate,proto3,oneof" json:"namespace_update,omitempty"`
}
type ToDataplane_NamespaceRemove struct {
	NamespaceRemove *NamespaceRemove `protobuf:"bytes,22,opt,name=namespace_remove,json=namespaceRemove,proto3,oneof" json:"namespace_remove,omitempty"`
}
type ToDataplane_RouteUpdate struct {
	RouteUpdate *RouteUpdate `protobuf:"bytes,23,opt,name=route_update,json=routeUpdate,proto3,oneof" json:"route_update,omitempty"`
}
type ToDataplane_RouteRemove struct {
	RouteRemove *RouteRemove `protobuf:"bytes,24,opt,name=route_remove,json=routeRemove,proto3,oneof" json:"route_remove,omitempty"`
}
type ToDataplane_VtepUpdate struct {
	VtepUpdate *VXLANTunnelEndpointUpdate `protobuf:"bytes,25,opt,name=vtep_update,json=vtepUpdate,proto3,oneof" json:"vtep_update,omitempty"`
}
type ToDataplane_VtepRemove struct {
	VtepRemove *VXLANTunnelEndpointRemove `protobuf:"bytes,26,opt,name=vtep_remove,json=vtepRemove,proto3,oneof" json:"vtep_remove,omitempty"`
}
type ToDataplane_WireguardEndpointUpdate struct {
	WireguardEndpointUpdate *WireguardEndpointUpdate `protobuf:"bytes,27,opt,name=wireguard_endpoint_update,json=wireguardEndpointUpdate,proto3,oneof" json:"wireguard_endpoint_update,omitempty"`
}
type ToDataplane_WireguardEndpointRemove struct {
	WireguardEndpointRemove *WireguardEndpointRemove `protobuf:"bytes,28,opt,name=wireguard_endpoint_remove,json=wireguardEndpointRemove,proto3,oneof" json:"wireguard_endpoint_remove,omitempty"`
}
type ToDataplane_GlobalBgpConfigUpdate struct {
	GlobalBgpConfigUpdate *GlobalBGPConfigUpdate `protobuf:"bytes,29,opt,name=global_bgp_config_update,json=globalBgpConfigUpdate,proto3,oneof" json:"global_bgp_config_update,omitempty"`
}

func (*ToDataplane_InSync) isToDataplane_Payload()                  {}
func (*ToDataplane_IpsetUpdate) isToDataplane_Payload()             {}
func (*ToDataplane_IpsetDeltaUpdate) isToDataplane_Payload()        {}
func (*ToDataplane_IpsetRemove) isToDataplane_Payload()             {}
func (*ToDataplane_ActiveProfileUpdate) isToDataplane_Payload()     {}
func (*ToDataplane_ActiveProfileRemove) isToDataplane_Payload()     {}
func (*ToDataplane_ActivePolicyUpdate) isToDataplane_Payload()      {}
func (*ToDataplane_ActivePolicyRemove) isToDataplane_Payload()      {}
func (*ToDataplane_HostEndpointUpdate) isToDataplane_Payload()      {}
func (*ToDataplane_HostEndpointRemove) isToDataplane_Payload()      {}
func (*ToDataplane_WorkloadEndpointUpdate) isToDataplane_Payload()  {}
func (*ToDataplane_WorkloadEndpointRemove) isToDataplane_Payload()  {}
func (*ToDataplane_ConfigUpdate) isToDataplane_Payload()            {}
func (*ToDataplane_HostMetadataUpdate) isToDataplane_Payload()      {}
func (*ToDataplane_HostMetadataRemove) isToDataplane_Payload()      {}
func (*ToDataplane_IpamPoolUpdate) isToDataplane_Payload()          {}
func (*ToDataplane_IpamPoolRemove) isToDataplane_Payload()          {}
func (*ToDataplane_ServiceAccountUpdate) isToDataplane_Payload()    {}
func (*ToDataplane_ServiceAccountRemove) isToDataplane_Payload()    {}
func (*ToDataplane_NamespaceUpdate) isToDataplane_Payload()         {}
func (*ToDataplane_NamespaceRemove) isToDataplane_Payload()         {}
func (*ToDataplane_RouteUpdate) isToDataplane_Payload()             {}
func (*ToDataplane_RouteRemove) isToDataplane_Payload()             {}
func (*ToDataplane_VtepUpdate) isToDataplane_Payload()              {}
func (*ToDataplane_VtepRemove) isToDataplane_Payload()              {}
func (*ToDataplane_WireguardEndpointUpdate) isToDataplane_Payload() {}
func (*ToDataplane_WireguardEndpointRemove) isToDataplane_Payload() {}
func (*ToDataplane_GlobalBgpConfigUpdate) isToDataplane_Payload()   {}

func (m *ToDataplane) GetPayload() isToDataplane_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ToDataplane) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *ToDataplane) GetInSync() *InSync {
	if x, ok := m.GetPayload().(*ToDataplane_InSync); ok {
		return x.InSync
	}
	return nil
}

func (m *ToDataplane) GetIpsetUpdate() *IPSetUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_IpsetUpdate); ok {
		return x.IpsetUpdate
	}
	return nil
}

func (m *ToDataplane) GetIpsetDeltaUpdate() *IPSetDeltaUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_IpsetDeltaUpdate); ok {
		return x.IpsetDeltaUpdate
	}
	return nil
}

func (m *ToDataplane) GetIpsetRemove() *IPSetRemove {
	if x, ok := m.GetPayload().(*ToDataplane_IpsetRemove); ok {
		return x.IpsetRemove
	}
	return nil
}

func (m *ToDataplane) GetActiveProfileUpdate() *ActiveProfileUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_ActiveProfileUpdate); ok {
		return x.ActiveProfileUpdate
	}
	return nil
}

func (m *ToDataplane) GetActiveProfileRemove() *ActiveProfileRemove {
	if x, ok := m.GetPayload().(*ToDataplane_ActiveProfileRemove); ok {
		return x.ActiveProfileRemove
	}
	return nil
}

func (m *ToDataplane) GetActivePolicyUpdate() *ActivePolicyUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_ActivePolicyUpdate); ok {
		return x.ActivePolicyUpdate
	}
	return nil
}

func (m *ToDataplane) GetActivePolicyRemove() *ActivePolicyRemove {
	if x, ok := m.GetPayload().(*ToDataplane_ActivePolicyRemove); ok {
		return x.ActivePolicyRemove
	}
	return nil
}

func (m *ToDataplane) GetHostEndpointUpdate() *HostEndpointUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_HostEndpointUpdate); ok {
		return x.HostEndpointUpdate
	}
	return nil
}

func (m *ToDataplane) GetHostEndpointRemove() *HostEndpointRemove {
	if x, ok := m.GetPayload().(*ToDataplane_HostEndpointRemove); ok {
		return x.HostEndpointRemove
	}
	return nil
}

func (m *ToDataplane) GetWorkloadEndpointUpdate() *WorkloadEndpointUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_WorkloadEndpointUpdate); ok {
		return x.WorkloadEndpointUpdate
	}
	return nil
}

func (m *ToDataplane) GetWorkloadEndpointRemove() *WorkloadEndpointRemove {
	if x, ok := m.GetPayload().(*ToDataplane_WorkloadEndpointRemove); ok {
		return x.WorkloadEndpointRemove
	}
	return nil
}

func (m *ToDataplane) GetConfigUpdate() *ConfigUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_ConfigUpdate); ok {
		return x.ConfigUpdate
	}
	return nil
}

func (m *ToDataplane) GetHostMetadataUpdate() *HostMetadataUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_HostMetadataUpdate); ok {
		return x.HostMetadataUpdate
	}
	return nil
}

func (m *ToDataplane) GetHostMetadataRemove() *HostMetadataRemove {
	if x, ok := m.GetPayload().(*ToDataplane_HostMetadataRemove); ok {
		return x.HostMetadataRemove
	}
	return nil
}

func (m *ToDataplane) GetIpamPoolUpdate() *IPAMPoolUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_IpamPoolUpdate); ok {
		return x.IpamPoolUpdate
	}
	return nil
}

func (m *ToDataplane) GetIpamPoolRemove() *IPAMPoolRemove {
	if x, ok := m.GetPayload().(*ToDataplane_IpamPoolRemove); ok {
		return x.IpamPoolRemove
	}
	return nil
}

func (m *ToDataplane) GetServiceAccountUpdate() *ServiceAccountUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_ServiceAccountUpdate); ok {
		return x.ServiceAccountUpdate
	}
	return nil
}

func (m *ToDataplane) GetServiceAccountRemove() *ServiceAccountRemove {
	if x, ok := m.GetPayload().(*ToDataplane_ServiceAccountRemove); ok {
		return x.ServiceAccountRemove
	}
	return nil
}

func (m *ToDataplane) GetNamespaceUpdate() *NamespaceUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_NamespaceUpdate); ok {
		return x.NamespaceUpdate
	}
	return nil
}

func (m *ToDataplane) GetNamespaceRemove() *NamespaceRemove {
	if x, ok := m.GetPayload().(*ToDataplane_NamespaceRemove); ok {
		return x.NamespaceRemove
	}
	return nil
}

func (m *ToDataplane) GetRouteUpdate() *RouteUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_RouteUpdate); ok {
		return x.RouteUpdate
	}
	return nil
}

func (m *ToDataplane) GetRouteRemove() *RouteRemove {
	if x, ok := m.GetPayload().(*ToDataplane_RouteRemove); ok {
		return x.RouteRemove
	}
	return nil
}

func (m *ToDataplane) GetVtepUpdate() *VXLANTunnelEndpointUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_VtepUpdate); ok {
		return x.VtepUpdate
	}
	return nil
}

func (m *ToDataplane) GetVtepRemove() *VXLANTunnelEndpointRemove {
	if x, ok := m.GetPayload().(*ToDataplane_VtepRemove); ok {
		return x.VtepRemove
	}
	return nil
}

func (m *ToDataplane) GetWireguardEndpointUpdate() *WireguardEndpointUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_WireguardEndpointUpdate); ok {
		return x.WireguardEndpointUpdate
	}
	return nil
}

func (m *ToDataplane) GetWireguardEndpointRemove() *WireguardEndpointRemove {
	if x, ok := m.GetPayload().(*ToDataplane_WireguardEndpointRemove); ok {
		return x.WireguardEndpointRemove
	}
	return nil
}

func (m *ToDataplane) GetGlobalBgpConfigUpdate() *GlobalBGPConfigUpdate {
	if x, ok := m.GetPayload().(*ToDataplane_GlobalBgpConfigUpdate); ok {
		return x.GlobalBgpConfigUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ToDataplane) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ToDataplane_InSync)(nil),
		(*ToDataplane_IpsetUpdate)(nil),
		(*ToDataplane_IpsetDeltaUpdate)(nil),
		(*ToDataplane_IpsetRemove)(nil),
		(*ToDataplane_ActiveProfileUpdate)(nil),
		(*ToDataplane_ActiveProfileRemove)(nil),
		(*ToDataplane_ActivePolicyUpdate)(nil),
		(*ToDataplane_ActivePolicyRemove)(nil),
		(*ToDataplane_HostEndpointUpdate)(nil),
		(*ToDataplane_HostEndpointRemove)(nil),
		(*ToDataplane_WorkloadEndpointUpdate)(nil),
		(*ToDataplane_WorkloadEndpointRemove)(nil),
		(*ToDataplane_ConfigUpdate)(nil),
		(*ToDataplane_HostMetadataUpdate)(nil),
		(*ToDataplane_HostMetadataRemove)(nil),
		(*ToDataplane_IpamPoolUpdate)(nil),
		(*ToDataplane_IpamPoolRemove)(nil),
		(*ToDataplane_ServiceAccountUpdate)(nil),
		(*ToDataplane_ServiceAccountRemove)(nil),
		(*ToDataplane_NamespaceUpdate)(nil),
		(*ToDataplane_NamespaceRemove)(nil),
		(*ToDataplane_RouteUpdate)(nil),
		(*ToDataplane_RouteRemove)(nil),
		(*ToDataplane_VtepUpdate)(nil),
		(*ToDataplane_VtepRemove)(nil),
		(*ToDataplane_WireguardEndpointUpdate)(nil),
		(*ToDataplane_WireguardEndpointRemove)(nil),
		(*ToDataplane_GlobalBgpConfigUpdate)(nil),
	}
}

type FromDataplane struct {
	SequenceNumber uint64 `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*FromDataplane_ProcessStatusUpdate
	//	*FromDataplane_HostEndpointStatusUpdate
	//	*FromDataplane_HostEndpointStatusRemove
	//	*FromDataplane_WorkloadEndpointStatusUpdate
	//	*FromDataplane_WorkloadEndpointStatusRemove
	//	*FromDataplane_WireguardStatusUpdate
	Payload              isFromDataplane_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FromDataplane) Reset()         { *m = FromDataplane{} }
func (m *FromDataplane) String() string { return proto.CompactTextString(m) }
func (*FromDataplane) ProtoMessage()    {}
func (*FromDataplane) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{2}
}
func (m *FromDataplane) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FromDataplane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FromDataplane.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FromDataplane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FromDataplane.Merge(m, src)
}
func (m *FromDataplane) XXX_Size() int {
	return m.Size()
}
func (m *FromDataplane) XXX_DiscardUnknown() {
	xxx_messageInfo_FromDataplane.DiscardUnknown(m)
}

var xxx_messageInfo_FromDataplane proto.InternalMessageInfo

type isFromDataplane_Payload interface {
	isFromDataplane_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FromDataplane_ProcessStatusUpdate struct {
	ProcessStatusUpdate *ProcessStatusUpdate `protobuf:"bytes,3,opt,name=process_status_update,json=processStatusUpdate,proto3,oneof" json:"process_status_update,omitempty"`
}
type FromDataplane_HostEndpointStatusUpdate struct {
	HostEndpointStatusUpdate *HostEndpointStatusUpdate `protobuf:"bytes,4,opt,name=host_endpoint_status_update,json=hostEndpointStatusUpdate,proto3,oneof" json:"host_endpoint_status_update,omitempty"`
}
type FromDataplane_HostEndpointStatusRemove struct {
	HostEndpointStatusRemove *HostEndpointStatusRemove `protobuf:"bytes,5,opt,name=host_endpoint_status_remove,json=hostEndpointStatusRemove,proto3,oneof" json:"host_endpoint_status_remove,omitempty"`
}
type FromDataplane_WorkloadEndpointStatusUpdate struct {
	WorkloadEndpointStatusUpdate *WorkloadEndpointStatusUpdate `protobuf:"bytes,6,opt,name=workload_endpoint_status_update,json=workloadEndpointStatusUpdate,proto3,oneof" json:"workload_endpoint_status_update,omitempty"`
}
type FromDataplane_WorkloadEndpointStatusRemove struct {
	WorkloadEndpointStatusRemove *WorkloadEndpointStatusRemove `protobuf:"bytes,7,opt,name=workload_endpoint_status_remove,json=workloadEndpointStatusRemove,proto3,oneof" json:"workload_endpoint_status_remove,omitempty"`
}
type FromDataplane_WireguardStatusUpdate struct {
	WireguardStatusUpdate *WireguardStatusUpdate `protobuf:"bytes,9,opt,name=wireguard_status_update,json=wireguardStatusUpdate,proto3,oneof" json:"wireguard_status_update,omitempty"`
}

func (*FromDataplane_ProcessStatusUpdate) isFromDataplane_Payload()          {}
func (*FromDataplane_HostEndpointStatusUpdate) isFromDataplane_Payload()     {}
func (*FromDataplane_HostEndpointStatusRemove) isFromDataplane_Payload()     {}
func (*FromDataplane_WorkloadEndpointStatusUpdate) isFromDataplane_Payload() {}
func (*FromDataplane_WorkloadEndpointStatusRemove) isFromDataplane_Payload() {}
func (*FromDataplane_WireguardStatusUpdate) isFromDataplane_Payload()        {}

func (m *FromDataplane) GetPayload() isFromDataplane_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *FromDataplane) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *FromDataplane) GetProcessStatusUpdate() *ProcessStatusUpdate {
	if x, ok := m.GetPayload().(*FromDataplane_ProcessStatusUpdate); ok {
		return x.ProcessStatusUpdate
	}
	return nil
}

func (m *FromDataplane) GetHostEndpointStatusUpdate() *HostEndpointStatusUpdate {
	if x, ok := m.GetPayload().(*FromDataplane_HostEndpointStatusUpdate); ok {
		return x.HostEndpointStatusUpdate
	}
	return nil
}

func (m *FromDataplane) GetHostEndpointStatusRemove() *HostEndpointStatusRemove {
	if x, ok := m.GetPayload().(*FromDataplane_HostEndpointStatusRemove); ok {
		return x.HostEndpointStatusRemove
	}
	return nil
}

func (m *FromDataplane) GetWorkloadEndpointStatusUpdate() *WorkloadEndpointStatusUpdate {
	if x, ok := m.GetPayload().(*FromDataplane_WorkloadEndpointStatusUpdate); ok {
		return x.WorkloadEndpointStatusUpdate
	}
	return nil
}

func (m *FromDataplane) GetWorkloadEndpointStatusRemove() *WorkloadEndpointStatusRemove {
	if x, ok := m.GetPayload().(*FromDataplane_WorkloadEndpointStatusRemove); ok {
		return x.WorkloadEndpointStatusRemove
	}
	return nil
}

func (m *FromDataplane) GetWireguardStatusUpdate() *WireguardStatusUpdate {
	if x, ok := m.GetPayload().(*FromDataplane_WireguardStatusUpdate); ok {
		return x.WireguardStatusUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FromDataplane) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FromDataplane_ProcessStatusUpdate)(nil),
		(*FromDataplane_HostEndpointStatusUpdate)(nil),
		(*FromDataplane_HostEndpointStatusRemove)(nil),
		(*FromDataplane_WorkloadEndpointStatusUpdate)(nil),
		(*FromDataplane_WorkloadEndpointStatusRemove)(nil),
		(*FromDataplane_WireguardStatusUpdate)(nil),
	}
}

type ConfigUpdate struct {
	Config               map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConfigUpdate) Reset()         { *m = ConfigUpdate{} }
func (m *ConfigUpdate) String() string { return proto.CompactTextString(m) }
func (*ConfigUpdate) ProtoMessage()    {}
func (*ConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{3}
}
func (m *ConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigUpdate.Merge(m, src)
}
func (m *ConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigUpdate proto.InternalMessageInfo

func (m *ConfigUpdate) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type InSync struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InSync) Reset()         { *m = InSync{} }
func (m *InSync) String() string { return proto.CompactTextString(m) }
func (*InSync) ProtoMessage()    {}
func (*InSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{4}
}
func (m *InSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InSync.Merge(m, src)
}
func (m *InSync) XXX_Size() int {
	return m.Size()
}
func (m *InSync) XXX_DiscardUnknown() {
	xxx_messageInfo_InSync.DiscardUnknown(m)
}

var xxx_messageInfo_InSync proto.InternalMessageInfo

type IPSetUpdate struct {
	Id                   string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Members              []string              `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Type                 IPSetUpdate_IPSetType `protobuf:"varint,3,opt,name=type,proto3,enum=felix.IPSetUpdate_IPSetType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IPSetUpdate) Reset()         { *m = IPSetUpdate{} }
func (m *IPSetUpdate) String() string { return proto.CompactTextString(m) }
func (*IPSetUpdate) ProtoMessage()    {}
func (*IPSetUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{5}
}
func (m *IPSetUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPSetUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPSetUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPSetUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSetUpdate.Merge(m, src)
}
func (m *IPSetUpdate) XXX_Size() int {
	return m.Size()
}
func (m *IPSetUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSetUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_IPSetUpdate proto.InternalMessageInfo

func (m *IPSetUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IPSetUpdate) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *IPSetUpdate) GetType() IPSetUpdate_IPSetType {
	if m != nil {
		return m.Type
	}
	return IPSetUpdate_IP
}

type IPSetDeltaUpdate struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddedMembers         []string `protobuf:"bytes,2,rep,name=added_members,json=addedMembers,proto3" json:"added_members,omitempty"`
	RemovedMembers       []string `protobuf:"bytes,3,rep,name=removed_members,json=removedMembers,proto3" json:"removed_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSetDeltaUpdate) Reset()         { *m = IPSetDeltaUpdate{} }
func (m *IPSetDeltaUpdate) String() string { return proto.CompactTextString(m) }
func (*IPSetDeltaUpdate) ProtoMessage()    {}
func (*IPSetDeltaUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{6}
}
func (m *IPSetDeltaUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPSetDeltaUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPSetDeltaUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPSetDeltaUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSetDeltaUpdate.Merge(m, src)
}
func (m *IPSetDeltaUpdate) XXX_Size() int {
	return m.Size()
}
func (m *IPSetDeltaUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSetDeltaUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_IPSetDeltaUpdate proto.InternalMessageInfo

func (m *IPSetDeltaUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IPSetDeltaUpdate) GetAddedMembers() []string {
	if m != nil {
		return m.AddedMembers
	}
	return nil
}

func (m *IPSetDeltaUpdate) GetRemovedMembers() []string {
	if m != nil {
		return m.RemovedMembers
	}
	return nil
}

type IPSetRemove struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSetRemove) Reset()         { *m = IPSetRemove{} }
func (m *IPSetRemove) String() string { return proto.CompactTextString(m) }
func (*IPSetRemove) ProtoMessage()    {}
func (*IPSetRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{7}
}
func (m *IPSetRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPSetRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPSetRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPSetRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSetRemove.Merge(m, src)
}
func (m *IPSetRemove) XXX_Size() int {
	return m.Size()
}
func (m *IPSetRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSetRemove.DiscardUnknown(m)
}

var xxx_messageInfo_IPSetRemove proto.InternalMessageInfo

func (m *IPSetRemove) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ActiveProfileUpdate struct {
	Id                   *ProfileID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Profile              *Profile   `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ActiveProfileUpdate) Reset()         { *m = ActiveProfileUpdate{} }
func (m *ActiveProfileUpdate) String() string { return proto.CompactTextString(m) }
func (*ActiveProfileUpdate) ProtoMessage()    {}
func (*ActiveProfileUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{8}
}
func (m *ActiveProfileUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveProfileUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveProfileUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveProfileUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveProfileUpdate.Merge(m, src)
}
func (m *ActiveProfileUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ActiveProfileUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveProfileUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveProfileUpdate proto.InternalMessageInfo

func (m *ActiveProfileUpdate) GetId() *ProfileID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ActiveProfileUpdate) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ActiveProfileRemove struct {
	Id                   *ProfileID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ActiveProfileRemove) Reset()         { *m = ActiveProfileRemove{} }
func (m *ActiveProfileRemove) String() string { return proto.CompactTextString(m) }
func (*ActiveProfileRemove) ProtoMessage()    {}
func (*ActiveProfileRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{9}
}
func (m *ActiveProfileRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveProfileRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveProfileRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveProfileRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveProfileRemove.Merge(m, src)
}
func (m *ActiveProfileRemove) XXX_Size() int {
	return m.Size()
}
func (m *ActiveProfileRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveProfileRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveProfileRemove proto.InternalMessageInfo

func (m *ActiveProfileRemove) GetId() *ProfileID {
	if m != nil {
		return m.Id
	}
	return nil
}

type ProfileID struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileID) Reset()         { *m = ProfileID{} }
func (m *ProfileID) String() string { return proto.CompactTextString(m) }
func (*ProfileID) ProtoMessage()    {}
func (*ProfileID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{10}
}
func (m *ProfileID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileID.Merge(m, src)
}
func (m *ProfileID) XXX_Size() int {
	return m.Size()
}
func (m *ProfileID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileID.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileID proto.InternalMessageInfo

func (m *ProfileID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Profile struct {
	InboundRules         []*Rule  `protobuf:"bytes,1,rep,name=inbound_rules,json=inboundRules,proto3" json:"inbound_rules,omitempty"`
	OutboundRules        []*Rule  `protobuf:"bytes,2,rep,name=outbound_rules,json=outboundRules,proto3" json:"outbound_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{11}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetInboundRules() []*Rule {
	if m != nil {
		return m.InboundRules
	}
	return nil
}

func (m *Profile) GetOutboundRules() []*Rule {
	if m != nil {
		return m.OutboundRules
	}
	return nil
}

type ActivePolicyUpdate struct {
	Id                   *PolicyID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Policy               *Policy   `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ActivePolicyUpdate) Reset()         { *m = ActivePolicyUpdate{} }
func (m *ActivePolicyUpdate) String() string { return proto.CompactTextString(m) }
func (*ActivePolicyUpdate) ProtoMessage()    {}
func (*ActivePolicyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{12}
}
func (m *ActivePolicyUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePolicyUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivePolicyUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivePolicyUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePolicyUpdate.Merge(m, src)
}
func (m *ActivePolicyUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ActivePolicyUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePolicyUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePolicyUpdate proto.InternalMessageInfo

func (m *ActivePolicyUpdate) GetId() *PolicyID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ActivePolicyUpdate) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ActivePolicyRemove struct {
	Id                   *PolicyID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ActivePolicyRemove) Reset()         { *m = ActivePolicyRemove{} }
func (m *ActivePolicyRemove) String() string { return proto.CompactTextString(m) }
func (*ActivePolicyRemove) ProtoMessage()    {}
func (*ActivePolicyRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{13}
}
func (m *ActivePolicyRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivePolicyRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivePolicyRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivePolicyRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivePolicyRemove.Merge(m, src)
}
func (m *ActivePolicyRemove) XXX_Size() int {
	return m.Size()
}
func (m *ActivePolicyRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivePolicyRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ActivePolicyRemove proto.InternalMessageInfo

func (m *ActivePolicyRemove) GetId() *PolicyID {
	if m != nil {
		return m.Id
	}
	return nil
}

type PolicyID struct {
	Tier                 string   `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyID) Reset()         { *m = PolicyID{} }
func (m *PolicyID) String() string { return proto.CompactTextString(m) }
func (*PolicyID) ProtoMessage()    {}
func (*PolicyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{14}
}
func (m *PolicyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyID.Merge(m, src)
}
func (m *PolicyID) XXX_Size() int {
	return m.Size()
}
func (m *PolicyID) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyID.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyID proto.InternalMessageInfo

func (m *PolicyID) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *PolicyID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Policy struct {
	// If the Policy represents a NetworkPolicy, this contains the namespace that the policy came
	// from.  Otherwise, empty.
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InboundRules         []*Rule  `protobuf:"bytes,1,rep,name=inbound_rules,json=inboundRules,proto3" json:"inbound_rules,omitempty"`
	OutboundRules        []*Rule  `protobuf:"bytes,2,rep,name=outbound_rules,json=outboundRules,proto3" json:"outbound_rules,omitempty"`
	Untracked            bool     `protobuf:"varint,3,opt,name=untracked,proto3" json:"untracked,omitempty"`
	PreDnat              bool     `protobuf:"varint,4,opt,name=pre_dnat,json=preDnat,proto3" json:"pre_dnat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{15}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Policy) GetInboundRules() []*Rule {
	if m != nil {
		return m.InboundRules
	}
	return nil
}

func (m *Policy) GetOutboundRules() []*Rule {
	if m != nil {
		return m.OutboundRules
	}
	return nil
}

func (m *Policy) GetUntracked() bool {
	if m != nil {
		return m.Untracked
	}
	return false
}

func (m *Policy) GetPreDnat() bool {
	if m != nil {
		return m.PreDnat
	}
	return false
}

type Rule struct {
	Action    string    `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	IpVersion IPVersion `protobuf:"varint,2,opt,name=ip_version,json=ipVersion,proto3,enum=felix.IPVersion" json:"ip_version,omitempty"`
	Protocol  *Protocol `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	SrcNet    []string  `protobuf:"bytes,4,rep,name=src_net,json=srcNet,proto3" json:"src_net,omitempty"`
	// The list of ports is split into numeric and named ports, where named ports are represented
	// by (IP, port) IP sets.  A packet matches this rule if it matches any numeric port range *or*
	// any listed named port IP set.
	SrcPorts             []*PortRange `protobuf:"bytes,5,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	SrcNamedPortIpSetIds []string     `protobuf:"bytes,12,rep,name=src_named_port_ip_set_ids,json=srcNamedPortIpSetIds,proto3" json:"src_named_port_ip_set_ids,omitempty"`
	DstNet               []string     `protobuf:"bytes,6,rep,name=dst_net,json=dstNet,proto3" json:"dst_net,omitempty"`
	DstPorts             []*PortRange `protobuf:"bytes,7,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	DstNamedPortIpSetIds []string     `protobuf:"bytes,13,rep,name=dst_named_port_ip_set_ids,json=dstNamedPortIpSetIds,proto3" json:"dst_named_port_ip_set_ids,omitempty"`
	// Types that are valid to be assigned to Icmp:
	//	*Rule_IcmpType
	//	*Rule_IcmpTypeCode
	Icmp        isRule_Icmp `protobuf_oneof:"icmp"`
	SrcIpSetIds []string    `protobuf:"bytes,10,rep,name=src_ip_set_ids,json=srcIpSetIds,proto3" json:"src_ip_set_ids,omitempty"`
	DstIpSetIds []string    `protobuf:"bytes,11,rep,name=dst_ip_set_ids,json=dstIpSetIds,proto3" json:"dst_ip_set_ids,omitempty"`
	// IP sets on which we should match both IP and port.
	DstIpPortSetIds []string     `protobuf:"bytes,15,rep,name=dst_ip_port_set_ids,json=dstIpPortSetIds,proto3" json:"dst_ip_port_set_ids,omitempty"`
	NotProtocol     *Protocol    `protobuf:"bytes,102,opt,name=not_protocol,json=notProtocol,proto3" json:"not_protocol,omitempty"`
	NotSrcNet       []string     `protobuf:"bytes,103,rep,name=not_src_net,json=notSrcNet,proto3" json:"not_src_net,omitempty"`
	NotSrcPorts     []*PortRange `protobuf:"bytes,104,rep,name=not_src_ports,json=notSrcPorts,proto3" json:"not_src_ports,omitempty"`
	NotDstNet       []string     `protobuf:"bytes,105,rep,name=not_dst_net,json=notDstNet,proto3" json:"not_dst_net,omitempty"`
	NotDstPorts     []*PortRange `protobuf:"bytes,106,rep,name=not_dst_ports,json=notDstPorts,proto3" json:"not_dst_ports,omitempty"`
	// Types that are valid to be assigned to NotIcmp:
	//	*Rule_NotIcmpType
	//	*Rule_NotIcmpTypeCode
	NotIcmp                 isRule_NotIcmp `protobuf_oneof:"not_icmp"`
	NotSrcIpSetIds          []string       `protobuf:"bytes,109,rep,name=not_src_ip_set_ids,json=notSrcIpSetIds,proto3" json:"not_src_ip_set_ids,omitempty"`
	NotDstIpSetIds          []string       `protobuf:"bytes,110,rep,name=not_dst_ip_set_ids,json=notDstIpSetIds,proto3" json:"not_dst_ip_set_ids,omitempty"`
	NotSrcNamedPortIpSetIds []string       `protobuf:"bytes,112,rep,name=not_src_named_port_ip_set_ids,json=notSrcNamedPortIpSetIds,proto3" json:"not_src_named_port_ip_set_ids,omitempty"`
	NotDstNamedPortIpSetIds []string       `protobuf:"bytes,113,rep,name=not_dst_named_port_ip_set_ids,json=notDstNamedPortIpSetIds,proto3" json:"not_dst_named_port_ip_set_ids,omitempty"`
	// These fields pass through the original selectors from the v3 datamodel unmodified as required
	// for the policy sync API.
	OriginalSrcSelector          string `protobuf:"bytes,114,opt,name=original_src_selector,json=originalSrcSelector,proto3" json:"original_src_selector,omitempty"`
	OriginalDstSelector          string `protobuf:"bytes,115,opt,name=original_dst_selector,json=originalDstSelector,proto3" json:"original_dst_selector,omitempty"`
	OriginalSrcNamespaceSelector string `protobuf:"bytes,116,opt,name=original_src_namespace_selector,json=originalSrcNamespaceSelector,proto3" json:"original_src_namespace_selector,omitempty"`
	OriginalDstNamespaceSelector string `protobuf:"bytes,117,opt,name=original_dst_namespace_selector,json=originalDstNamespaceSelector,proto3" json:"original_dst_namespace_selector,omitempty"`
	OriginalNotSrcSelector       string `protobuf:"bytes,118,opt,name=original_not_src_selector,json=originalNotSrcSelector,proto3" json:"original_not_src_selector,omitempty"`
	OriginalNotDstSelector       string `protobuf:"bytes,119,opt,name=original_not_dst_selector,json=originalNotDstSelector,proto3" json:"original_not_dst_selector,omitempty"`
	// Original source service match criteria.
	OriginalSrcService          string `protobuf:"bytes,132,opt,name=original_src_service,json=originalSrcService,proto3" json:"original_src_service,omitempty"`
	OriginalSrcServiceNamespace string `protobuf:"bytes,133,opt,name=original_src_service_namespace,json=originalSrcServiceNamespace,proto3" json:"original_src_service_namespace,omitempty"`
	// Original destination service match criteria.
	OriginalDstService          string `protobuf:"bytes,130,opt,name=original_dst_service,json=originalDstService,proto3" json:"original_dst_service,omitempty"`
	OriginalDstServiceNamespace string `protobuf:"bytes,131,opt,name=original_dst_service_namespace,json=originalDstServiceNamespace,proto3" json:"original_dst_service_namespace,omitempty"`
	// Pass through of the v3 datamodel service account match criteria.
	SrcServiceAccountMatch *ServiceAccountMatch `protobuf:"bytes,120,opt,name=src_service_account_match,json=srcServiceAccountMatch,proto3" json:"src_service_account_match,omitempty"`
	DstServiceAccountMatch *ServiceAccountMatch `protobuf:"bytes,121,opt,name=dst_service_account_match,json=dstServiceAccountMatch,proto3" json:"dst_service_account_match,omitempty"`
	// Pass through of the v3 datamodel HTTP match criteria.
	HttpMatch *HTTPMatch    `protobuf:"bytes,122,opt,name=http_match,json=httpMatch,proto3" json:"http_match,omitempty"`
	Metadata  *RuleMetadata `protobuf:"bytes,123,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// An opaque ID/hash for the rule.
	RuleId               string   `protobuf:"bytes,201,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{16}
}
func (m *Rule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return m.Size()
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

type isRule_Icmp interface {
	isRule_Icmp()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRule_NotIcmp interface {
	isRule_NotIcmp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Rule_IcmpType struct {
	IcmpType int32 `protobuf:"varint,8,opt,name=icmp_type,json=icmpType,proto3,oneof" json:"icmp_type,omitempty"`
}
type Rule_IcmpTypeCode struct {
	IcmpTypeCode *IcmpTypeAndCode `protobuf:"bytes,9,opt,name=icmp_type_code,json=icmpTypeCode,proto3,oneof" json:"icmp_type_code,omitempty"`
}
type Rule_NotIcmpType struct {
	NotIcmpType int32 `protobuf:"varint,107,opt,name=not_icmp_type,json=notIcmpType,proto3,oneof" json:"not_icmp_type,omitempty"`
}
type Rule_NotIcmpTypeCode struct {
	NotIcmpTypeCode *IcmpTypeAndCode `protobuf:"bytes,108,opt,name=not_icmp_type_code,json=notIcmpTypeCode,proto3,oneof" json:"not_icmp_type_code,omitempty"`
}

func (*Rule_IcmpType) isRule_Icmp()           {}
func (*Rule_IcmpTypeCode) isRule_Icmp()       {}
func (*Rule_NotIcmpType) isRule_NotIcmp()     {}
func (*Rule_NotIcmpTypeCode) isRule_NotIcmp() {}

func (m *Rule) GetIcmp() isRule_Icmp {
	if m != nil {
		return m.Icmp
	}
	return nil
}
func (m *Rule) GetNotIcmp() isRule_NotIcmp {
	if m != nil {
		return m.NotIcmp
	}
	return nil
}

func (m *Rule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Rule) GetIpVersion() IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return IPVersion_ANY
}

func (m *Rule) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Rule) GetSrcNet() []string {
	if m != nil {
		return m.SrcNet
	}
	return nil
}

func (m *Rule) GetSrcPorts() []*PortRange {
	if m != nil {
		return m.SrcPorts
	}
	return nil
}

func (m *Rule) GetSrcNamedPortIpSetIds() []string {
	if m != nil {
		return m.SrcNamedPortIpSetIds
	}
	return nil
}

func (m *Rule) GetDstNet() []string {
	if m != nil {
		return m.DstNet
	}
	return nil
}

func (m *Rule) GetDstPorts() []*PortRange {
	if m != nil {
		return m.DstPorts
	}
	return nil
}

func (m *Rule) GetDstNamedPortIpSetIds() []string {
	if m != nil {
		return m.DstNamedPortIpSetIds
	}
	return nil
}

func (m *Rule) GetIcmpType() int32 {
	if x, ok := m.GetIcmp().(*Rule_IcmpType); ok {
		return x.IcmpType
	}
	return 0
}

func (m *Rule) GetIcmpTypeCode() *IcmpTypeAndCode {
	if x, ok := m.GetIcmp().(*Rule_IcmpTypeCode); ok {
		return x.IcmpTypeCode
	}
	return nil
}

func (m *Rule) GetSrcIpSetIds() []string {
	if m != nil {
		return m.SrcIpSetIds
	}
	return nil
}

func (m *Rule) GetDstIpSetIds() []string {
	if m != nil {
		return m.DstIpSetIds
	}
	return nil
}

func (m *Rule) GetDstIpPortSetIds() []string {
	if m != nil {
		return m.DstIpPortSetIds
	}
	return nil
}

func (m *Rule) GetNotProtocol() *Protocol {
	if m != nil {
		return m.NotProtocol
	}
	return nil
}

func (m *Rule) GetNotSrcNet() []string {
	if m != nil {
		return m.NotSrcNet
	}
	return nil
}

func (m *Rule) GetNotSrcPorts() []*PortRange {
	if m != nil {
		return m.NotSrcPorts
	}
	return nil
}

func (m *Rule) GetNotDstNet() []string {
	if m != nil {
		return m.NotDstNet
	}
	return nil
}

func (m *Rule) GetNotDstPorts() []*PortRange {
	if m != nil {
		return m.NotDstPorts
	}
	return nil
}

func (m *Rule) GetNotIcmpType() int32 {
	if x, ok := m.GetNotIcmp().(*Rule_NotIcmpType); ok {
		return x.NotIcmpType
	}
	return 0
}

func (m *Rule) GetNotIcmpTypeCode() *IcmpTypeAndCode {
	if x, ok := m.GetNotIcmp().(*Rule_NotIcmpTypeCode); ok {
		return x.NotIcmpTypeCode
	}
	return nil
}

func (m *Rule) GetNotSrcIpSetIds() []string {
	if m != nil {
		return m.NotSrcIpSetIds
	}
	return nil
}

func (m *Rule) GetNotDstIpSetIds() []string {
	if m != nil {
		return m.NotDstIpSetIds
	}
	return nil
}

func (m *Rule) GetNotSrcNamedPortIpSetIds() []string {
	if m != nil {
		return m.NotSrcNamedPortIpSetIds
	}
	return nil
}

func (m *Rule) GetNotDstNamedPortIpSetIds() []string {
	if m != nil {
		return m.NotDstNamedPortIpSetIds
	}
	return nil
}

func (m *Rule) GetOriginalSrcSelector() string {
	if m != nil {
		return m.OriginalSrcSelector
	}
	return ""
}

func (m *Rule) GetOriginalDstSelector() string {
	if m != nil {
		return m.OriginalDstSelector
	}
	return ""
}

func (m *Rule) GetOriginalSrcNamespaceSelector() string {
	if m != nil {
		return m.OriginalSrcNamespaceSelector
	}
	return ""
}

func (m *Rule) GetOriginalDstNamespaceSelector() string {
	if m != nil {
		return m.OriginalDstNamespaceSelector
	}
	return ""
}

func (m *Rule) GetOriginalNotSrcSelector() string {
	if m != nil {
		return m.OriginalNotSrcSelector
	}
	return ""
}

func (m *Rule) GetOriginalNotDstSelector() string {
	if m != nil {
		return m.OriginalNotDstSelector
	}
	return ""
}

func (m *Rule) GetOriginalSrcService() string {
	if m != nil {
		return m.OriginalSrcService
	}
	return ""
}

func (m *Rule) GetOriginalSrcServiceNamespace() string {
	if m != nil {
		return m.OriginalSrcServiceNamespace
	}
	return ""
}

func (m *Rule) GetOriginalDstService() string {
	if m != nil {
		return m.OriginalDstService
	}
	return ""
}

func (m *Rule) GetOriginalDstServiceNamespace() string {
	if m != nil {
		return m.OriginalDstServiceNamespace
	}
	return ""
}

func (m *Rule) GetSrcServiceAccountMatch() *ServiceAccountMatch {
	if m != nil {
		return m.SrcServiceAccountMatch
	}
	return nil
}

func (m *Rule) GetDstServiceAccountMatch() *ServiceAccountMatch {
	if m != nil {
		return m.DstServiceAccountMatch
	}
	return nil
}

func (m *Rule) GetHttpMatch() *HTTPMatch {
	if m != nil {
		return m.HttpMatch
	}
	return nil
}

func (m *Rule) GetMetadata() *RuleMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Rule) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Rule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Rule_IcmpType)(nil),
		(*Rule_IcmpTypeCode)(nil),
		(*Rule_NotIcmpType)(nil),
		(*Rule_NotIcmpTypeCode)(nil),
	}
}

type ServiceAccountMatch struct {
	Selector             string   `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Names                []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAccountMatch) Reset()         { *m = ServiceAccountMatch{} }
func (m *ServiceAccountMatch) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountMatch) ProtoMessage()    {}
func (*ServiceAccountMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{17}
}
func (m *ServiceAccountMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAccountMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAccountMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountMatch.Merge(m, src)
}
func (m *ServiceAccountMatch) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountMatch.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountMatch proto.InternalMessageInfo

func (m *ServiceAccountMatch) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *ServiceAccountMatch) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type HTTPMatch struct {
	Methods              []string               `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	Paths                []*HTTPMatch_PathMatch `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HTTPMatch) Reset()         { *m = HTTPMatch{} }
func (m *HTTPMatch) String() string { return proto.CompactTextString(m) }
func (*HTTPMatch) ProtoMessage()    {}
func (*HTTPMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{18}
}
func (m *HTTPMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPMatch.Merge(m, src)
}
func (m *HTTPMatch) XXX_Size() int {
	return m.Size()
}
func (m *HTTPMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPMatch.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPMatch proto.InternalMessageInfo

func (m *HTTPMatch) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *HTTPMatch) GetPaths() []*HTTPMatch_PathMatch {
	if m != nil {
		return m.Paths
	}
	return nil
}

type HTTPMatch_PathMatch struct {
	// Types that are valid to be assigned to PathMatch:
	//	*HTTPMatch_PathMatch_Exact
	//	*HTTPMatch_PathMatch_Prefix
	PathMatch            isHTTPMatch_PathMatch_PathMatch `protobuf_oneof:"path_match"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *HTTPMatch_PathMatch) Reset()         { *m = HTTPMatch_PathMatch{} }
func (m *HTTPMatch_PathMatch) String() string { return proto.CompactTextString(m) }
func (*HTTPMatch_PathMatch) ProtoMessage()    {}
func (*HTTPMatch_PathMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{18, 0}
}
func (m *HTTPMatch_PathMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPMatch_PathMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPMatch_PathMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPMatch_PathMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPMatch_PathMatch.Merge(m, src)
}
func (m *HTTPMatch_PathMatch) XXX_Size() int {
	return m.Size()
}
func (m *HTTPMatch_PathMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPMatch_PathMatch.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPMatch_PathMatch proto.InternalMessageInfo

type isHTTPMatch_PathMatch_PathMatch interface {
	isHTTPMatch_PathMatch_PathMatch()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HTTPMatch_PathMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type HTTPMatch_PathMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (*HTTPMatch_PathMatch_Exact) isHTTPMatch_PathMatch_PathMatch()  {}
func (*HTTPMatch_PathMatch_Prefix) isHTTPMatch_PathMatch_PathMatch() {}

func (m *HTTPMatch_PathMatch) GetPathMatch() isHTTPMatch_PathMatch_PathMatch {
	if m != nil {
		return m.PathMatch
	}
	return nil
}

func (m *HTTPMatch_PathMatch) GetExact() string {
	if x, ok := m.GetPathMatch().(*HTTPMatch_PathMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *HTTPMatch_PathMatch) GetPrefix() string {
	if x, ok := m.GetPathMatch().(*HTTPMatch_PathMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HTTPMatch_PathMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HTTPMatch_PathMatch_Exact)(nil),
		(*HTTPMatch_PathMatch_Prefix)(nil),
	}
}

type RuleMetadata struct {
	Annotations          map[string]string `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RuleMetadata) Reset()         { *m = RuleMetadata{} }
func (m *RuleMetadata) String() string { return proto.CompactTextString(m) }
func (*RuleMetadata) ProtoMessage()    {}
func (*RuleMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{19}
}
func (m *RuleMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuleMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuleMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuleMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleMetadata.Merge(m, src)
}
func (m *RuleMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RuleMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RuleMetadata proto.InternalMessageInfo

func (m *RuleMetadata) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type IcmpTypeAndCode struct {
	Type                 int32    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IcmpTypeAndCode) Reset()         { *m = IcmpTypeAndCode{} }
func (m *IcmpTypeAndCode) String() string { return proto.CompactTextString(m) }
func (*IcmpTypeAndCode) ProtoMessage()    {}
func (*IcmpTypeAndCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{20}
}
func (m *IcmpTypeAndCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IcmpTypeAndCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IcmpTypeAndCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IcmpTypeAndCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IcmpTypeAndCode.Merge(m, src)
}
func (m *IcmpTypeAndCode) XXX_Size() int {
	return m.Size()
}
func (m *IcmpTypeAndCode) XXX_DiscardUnknown() {
	xxx_messageInfo_IcmpTypeAndCode.DiscardUnknown(m)
}

var xxx_messageInfo_IcmpTypeAndCode proto.InternalMessageInfo

func (m *IcmpTypeAndCode) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IcmpTypeAndCode) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Protocol struct {
	// Types that are valid to be assigned to NumberOrName:
	//	*Protocol_Number
	//	*Protocol_Name
	NumberOrName         isProtocol_NumberOrName `protobuf_oneof:"number_or_name"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{21}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

type isProtocol_NumberOrName interface {
	isProtocol_NumberOrName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Protocol_Number struct {
	Number int32 `protobuf:"varint,1,opt,name=number,proto3,oneof" json:"number,omitempty"`
}
type Protocol_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (*Protocol_Number) isProtocol_NumberOrName() {}
func (*Protocol_Name) isProtocol_NumberOrName()   {}

func (m *Protocol) GetNumberOrName() isProtocol_NumberOrName {
	if m != nil {
		return m.NumberOrName
	}
	return nil
}

func (m *Protocol) GetNumber() int32 {
	if x, ok := m.GetNumberOrName().(*Protocol_Number); ok {
		return x.Number
	}
	return 0
}

func (m *Protocol) GetName() string {
	if x, ok := m.GetNumberOrName().(*Protocol_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Protocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Protocol_Number)(nil),
		(*Protocol_Name)(nil),
	}
}

// Individual ports are sent with first == last.
type PortRange struct {
	First                int32    `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Last                 int32    `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortRange) Reset()         { *m = PortRange{} }
func (m *PortRange) String() string { return proto.CompactTextString(m) }
func (*PortRange) ProtoMessage()    {}
func (*PortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{22}
}
func (m *PortRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortRange.Merge(m, src)
}
func (m *PortRange) XXX_Size() int {
	return m.Size()
}
func (m *PortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_PortRange.DiscardUnknown(m)
}

var xxx_messageInfo_PortRange proto.InternalMessageInfo

func (m *PortRange) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *PortRange) GetLast() int32 {
	if m != nil {
		return m.Last
	}
	return 0
}

type WorkloadEndpointID struct {
	OrchestratorId       string   `protobuf:"bytes,2,opt,name=orchestrator_id,json=orchestratorId,proto3" json:"orchestrator_id,omitempty"`
	WorkloadId           string   `protobuf:"bytes,3,opt,name=workload_id,json=workloadId,proto3" json:"workload_id,omitempty"`
	EndpointId           string   `protobuf:"bytes,4,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkloadEndpointID) Reset()         { *m = WorkloadEndpointID{} }
func (m *WorkloadEndpointID) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpointID) ProtoMessage()    {}
func (*WorkloadEndpointID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{23}
}
func (m *WorkloadEndpointID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpointID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpointID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpointID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpointID.Merge(m, src)
}
func (m *WorkloadEndpointID) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpointID) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpointID.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpointID proto.InternalMessageInfo

func (m *WorkloadEndpointID) GetOrchestratorId() string {
	if m != nil {
		return m.OrchestratorId
	}
	return ""
}

func (m *WorkloadEndpointID) GetWorkloadId() string {
	if m != nil {
		return m.WorkloadId
	}
	return ""
}

func (m *WorkloadEndpointID) GetEndpointId() string {
	if m != nil {
		return m.EndpointId
	}
	return ""
}

type WorkloadEndpointUpdate struct {
	Id                   *WorkloadEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Endpoint             *WorkloadEndpoint   `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WorkloadEndpointUpdate) Reset()         { *m = WorkloadEndpointUpdate{} }
func (m *WorkloadEndpointUpdate) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpointUpdate) ProtoMessage()    {}
func (*WorkloadEndpointUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{24}
}
func (m *WorkloadEndpointUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpointUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpointUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpointUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpointUpdate.Merge(m, src)
}
func (m *WorkloadEndpointUpdate) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpointUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpointUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpointUpdate proto.InternalMessageInfo

func (m *WorkloadEndpointUpdate) GetId() *WorkloadEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *WorkloadEndpointUpdate) GetEndpoint() *WorkloadEndpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type WorkloadEndpoint struct {
	State                string      `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac                  string      `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	ProfileIds           []string    `protobuf:"bytes,4,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
	Ipv4Nets             []string    `protobuf:"bytes,5,rep,name=ipv4_nets,json=ipv4Nets,proto3" json:"ipv4_nets,omitempty"`
	Ipv6Nets             []string    `protobuf:"bytes,6,rep,name=ipv6_nets,json=ipv6Nets,proto3" json:"ipv6_nets,omitempty"`
	Tiers                []*TierInfo `protobuf:"bytes,7,rep,name=tiers,proto3" json:"tiers,omitempty"`
	Ipv4Nat              []*NatInfo  `protobuf:"bytes,8,rep,name=ipv4_nat,json=ipv4Nat,proto3" json:"ipv4_nat,omitempty"`
	Ipv6Nat              []*NatInfo  `protobuf:"bytes,9,rep,name=ipv6_nat,json=ipv6Nat,proto3" json:"ipv6_nat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WorkloadEndpoint) Reset()         { *m = WorkloadEndpoint{} }
func (m *WorkloadEndpoint) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpoint) ProtoMessage()    {}
func (*WorkloadEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{25}
}
func (m *WorkloadEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpoint.Merge(m, src)
}
func (m *WorkloadEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpoint proto.InternalMessageInfo

func (m *WorkloadEndpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *WorkloadEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkloadEndpoint) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *WorkloadEndpoint) GetProfileIds() []string {
	if m != nil {
		return m.ProfileIds
	}
	return nil
}

func (m *WorkloadEndpoint) GetIpv4Nets() []string {
	if m != nil {
		return m.Ipv4Nets
	}
	return nil
}

func (m *WorkloadEndpoint) GetIpv6Nets() []string {
	if m != nil {
		return m.Ipv6Nets
	}
	return nil
}

func (m *WorkloadEndpoint) GetTiers() []*TierInfo {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *WorkloadEndpoint) GetIpv4Nat() []*NatInfo {
	if m != nil {
		return m.Ipv4Nat
	}
	return nil
}

func (m *WorkloadEndpoint) GetIpv6Nat() []*NatInfo {
	if m != nil {
		return m.Ipv6Nat
	}
	return nil
}

type WorkloadEndpointRemove struct {
	Id                   *WorkloadEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WorkloadEndpointRemove) Reset()         { *m = WorkloadEndpointRemove{} }
func (m *WorkloadEndpointRemove) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpointRemove) ProtoMessage()    {}
func (*WorkloadEndpointRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{26}
}
func (m *WorkloadEndpointRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpointRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpointRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpointRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpointRemove.Merge(m, src)
}
func (m *WorkloadEndpointRemove) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpointRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpointRemove.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpointRemove proto.InternalMessageInfo

func (m *WorkloadEndpointRemove) GetId() *WorkloadEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

type HostEndpointID struct {
	EndpointId           string   `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostEndpointID) Reset()         { *m = HostEndpointID{} }
func (m *HostEndpointID) String() string { return proto.CompactTextString(m) }
func (*HostEndpointID) ProtoMessage()    {}
func (*HostEndpointID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{27}
}
func (m *HostEndpointID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpointID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpointID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpointID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpointID.Merge(m, src)
}
func (m *HostEndpointID) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpointID) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpointID.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpointID proto.InternalMessageInfo

func (m *HostEndpointID) GetEndpointId() string {
	if m != nil {
		return m.EndpointId
	}
	return ""
}

type HostEndpointUpdate struct {
	Id                   *HostEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Endpoint             *HostEndpoint   `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HostEndpointUpdate) Reset()         { *m = HostEndpointUpdate{} }
func (m *HostEndpointUpdate) String() string { return proto.CompactTextString(m) }
func (*HostEndpointUpdate) ProtoMessage()    {}
func (*HostEndpointUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{28}
}
func (m *HostEndpointUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpointUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpointUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpointUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpointUpdate.Merge(m, src)
}
func (m *HostEndpointUpdate) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpointUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpointUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpointUpdate proto.InternalMessageInfo

func (m *HostEndpointUpdate) GetId() *HostEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HostEndpointUpdate) GetEndpoint() *HostEndpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type HostEndpoint struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProfileIds           []string    `protobuf:"bytes,2,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
	Tiers                []*TierInfo `protobuf:"bytes,3,rep,name=tiers,proto3" json:"tiers,omitempty"`
	UntrackedTiers       []*TierInfo `protobuf:"bytes,6,rep,name=untracked_tiers,json=untrackedTiers,proto3" json:"untracked_tiers,omitempty"`
	PreDnatTiers         []*TierInfo `protobuf:"bytes,7,rep,name=pre_dnat_tiers,json=preDnatTiers,proto3" json:"pre_dnat_tiers,omitempty"`
	ForwardTiers         []*TierInfo `protobuf:"bytes,8,rep,name=forward_tiers,json=forwardTiers,proto3" json:"forward_tiers,omitempty"`
	ExpectedIpv4Addrs    []string    `protobuf:"bytes,4,rep,name=expected_ipv4_addrs,json=expectedIpv4Addrs,proto3" json:"expected_ipv4_addrs,omitempty"`
	ExpectedIpv6Addrs    []string    `protobuf:"bytes,5,rep,name=expected_ipv6_addrs,json=expectedIpv6Addrs,proto3" json:"expected_ipv6_addrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HostEndpoint) Reset()         { *m = HostEndpoint{} }
func (m *HostEndpoint) String() string { return proto.CompactTextString(m) }
func (*HostEndpoint) ProtoMessage()    {}
func (*HostEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{29}
}
func (m *HostEndpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpoint.Merge(m, src)
}
func (m *HostEndpoint) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpoint proto.InternalMessageInfo

func (m *HostEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostEndpoint) GetProfileIds() []string {
	if m != nil {
		return m.ProfileIds
	}
	return nil
}

func (m *HostEndpoint) GetTiers() []*TierInfo {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *HostEndpoint) GetUntrackedTiers() []*TierInfo {
	if m != nil {
		return m.UntrackedTiers
	}
	return nil
}

func (m *HostEndpoint) GetPreDnatTiers() []*TierInfo {
	if m != nil {
		return m.PreDnatTiers
	}
	return nil
}

func (m *HostEndpoint) GetForwardTiers() []*TierInfo {
	if m != nil {
		return m.ForwardTiers
	}
	return nil
}

func (m *HostEndpoint) GetExpectedIpv4Addrs() []string {
	if m != nil {
		return m.ExpectedIpv4Addrs
	}
	return nil
}

func (m *HostEndpoint) GetExpectedIpv6Addrs() []string {
	if m != nil {
		return m.ExpectedIpv6Addrs
	}
	return nil
}

type HostEndpointRemove struct {
	Id                   *HostEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HostEndpointRemove) Reset()         { *m = HostEndpointRemove{} }
func (m *HostEndpointRemove) String() string { return proto.CompactTextString(m) }
func (*HostEndpointRemove) ProtoMessage()    {}
func (*HostEndpointRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{30}
}
func (m *HostEndpointRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpointRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpointRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpointRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpointRemove.Merge(m, src)
}
func (m *HostEndpointRemove) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpointRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpointRemove.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpointRemove proto.InternalMessageInfo

func (m *HostEndpointRemove) GetId() *HostEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

type TierInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IngressPolicies      []string `protobuf:"bytes,2,rep,name=ingress_policies,json=ingressPolicies,proto3" json:"ingress_policies,omitempty"`
	EgressPolicies       []string `protobuf:"bytes,3,rep,name=egress_policies,json=egressPolicies,proto3" json:"egress_policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TierInfo) Reset()         { *m = TierInfo{} }
func (m *TierInfo) String() string { return proto.CompactTextString(m) }
func (*TierInfo) ProtoMessage()    {}
func (*TierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{31}
}
func (m *TierInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierInfo.Merge(m, src)
}
func (m *TierInfo) XXX_Size() int {
	return m.Size()
}
func (m *TierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TierInfo proto.InternalMessageInfo

func (m *TierInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TierInfo) GetIngressPolicies() []string {
	if m != nil {
		return m.IngressPolicies
	}
	return nil
}

func (m *TierInfo) GetEgressPolicies() []string {
	if m != nil {
		return m.EgressPolicies
	}
	return nil
}

type NatInfo struct {
	ExtIp                string   `protobuf:"bytes,1,opt,name=ext_ip,json=extIp,proto3" json:"ext_ip,omitempty"`
	IntIp                string   `protobuf:"bytes,2,opt,name=int_ip,json=intIp,proto3" json:"int_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatInfo) Reset()         { *m = NatInfo{} }
func (m *NatInfo) String() string { return proto.CompactTextString(m) }
func (*NatInfo) ProtoMessage()    {}
func (*NatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{32}
}
func (m *NatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatInfo.Merge(m, src)
}
func (m *NatInfo) XXX_Size() int {
	return m.Size()
}
func (m *NatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NatInfo proto.InternalMessageInfo

func (m *NatInfo) GetExtIp() string {
	if m != nil {
		return m.ExtIp
	}
	return ""
}

func (m *NatInfo) GetIntIp() string {
	if m != nil {
		return m.IntIp
	}
	return ""
}

type ProcessStatusUpdate struct {
	IsoTimestamp         string   `protobuf:"bytes,1,opt,name=iso_timestamp,json=isoTimestamp,proto3" json:"iso_timestamp,omitempty"`
	Uptime               float64  `protobuf:"fixed64,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessStatusUpdate) Reset()         { *m = ProcessStatusUpdate{} }
func (m *ProcessStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*ProcessStatusUpdate) ProtoMessage()    {}
func (*ProcessStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{33}
}
func (m *ProcessStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStatusUpdate.Merge(m, src)
}
func (m *ProcessStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStatusUpdate proto.InternalMessageInfo

func (m *ProcessStatusUpdate) GetIsoTimestamp() string {
	if m != nil {
		return m.IsoTimestamp
	}
	return ""
}

func (m *ProcessStatusUpdate) GetUptime() float64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

type HostEndpointStatusUpdate struct {
	Id                   *HostEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               *EndpointStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HostEndpointStatusUpdate) Reset()         { *m = HostEndpointStatusUpdate{} }
func (m *HostEndpointStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*HostEndpointStatusUpdate) ProtoMessage()    {}
func (*HostEndpointStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{34}
}
func (m *HostEndpointStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpointStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpointStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpointStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpointStatusUpdate.Merge(m, src)
}
func (m *HostEndpointStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpointStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpointStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpointStatusUpdate proto.InternalMessageInfo

func (m *HostEndpointStatusUpdate) GetId() *HostEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HostEndpointStatusUpdate) GetStatus() *EndpointStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type EndpointStatus struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndpointStatus) Reset()         { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()    {}
func (*EndpointStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{35}
}
func (m *EndpointStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointStatus.Merge(m, src)
}
func (m *EndpointStatus) XXX_Size() int {
	return m.Size()
}
func (m *EndpointStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointStatus proto.InternalMessageInfo

func (m *EndpointStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type HostEndpointStatusRemove struct {
	Id                   *HostEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HostEndpointStatusRemove) Reset()         { *m = HostEndpointStatusRemove{} }
func (m *HostEndpointStatusRemove) String() string { return proto.CompactTextString(m) }
func (*HostEndpointStatusRemove) ProtoMessage()    {}
func (*HostEndpointStatusRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{36}
}
func (m *HostEndpointStatusRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostEndpointStatusRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostEndpointStatusRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostEndpointStatusRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostEndpointStatusRemove.Merge(m, src)
}
func (m *HostEndpointStatusRemove) XXX_Size() int {
	return m.Size()
}
func (m *HostEndpointStatusRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_HostEndpointStatusRemove.DiscardUnknown(m)
}

var xxx_messageInfo_HostEndpointStatusRemove proto.InternalMessageInfo

func (m *HostEndpointStatusRemove) GetId() *HostEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

type WorkloadEndpointStatusUpdate struct {
	Id                   *WorkloadEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               *EndpointStatus     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WorkloadEndpointStatusUpdate) Reset()         { *m = WorkloadEndpointStatusUpdate{} }
func (m *WorkloadEndpointStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpointStatusUpdate) ProtoMessage()    {}
func (*WorkloadEndpointStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{37}
}
func (m *WorkloadEndpointStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpointStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpointStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpointStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpointStatusUpdate.Merge(m, src)
}
func (m *WorkloadEndpointStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpointStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpointStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpointStatusUpdate proto.InternalMessageInfo

func (m *WorkloadEndpointStatusUpdate) GetId() *WorkloadEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *WorkloadEndpointStatusUpdate) GetStatus() *EndpointStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type WorkloadEndpointStatusRemove struct {
	Id                   *WorkloadEndpointID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WorkloadEndpointStatusRemove) Reset()         { *m = WorkloadEndpointStatusRemove{} }
func (m *WorkloadEndpointStatusRemove) String() string { return proto.CompactTextString(m) }
func (*WorkloadEndpointStatusRemove) ProtoMessage()    {}
func (*WorkloadEndpointStatusRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{38}
}
func (m *WorkloadEndpointStatusRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadEndpointStatusRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadEndpointStatusRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadEndpointStatusRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadEndpointStatusRemove.Merge(m, src)
}
func (m *WorkloadEndpointStatusRemove) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadEndpointStatusRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadEndpointStatusRemove.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadEndpointStatusRemove proto.InternalMessageInfo

func (m *WorkloadEndpointStatusRemove) GetId() *WorkloadEndpointID {
	if m != nil {
		return m.Id
	}
	return nil
}

type WireguardStatusUpdate struct {
	// Wireguard public-key set on the interface.
	PublicKey            string   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WireguardStatusUpdate) Reset()         { *m = WireguardStatusUpdate{} }
func (m *WireguardStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*WireguardStatusUpdate) ProtoMessage()    {}
func (*WireguardStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{39}
}
func (m *WireguardStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireguardStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireguardStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireguardStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireguardStatusUpdate.Merge(m, src)
}
func (m *WireguardStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *WireguardStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_WireguardStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_WireguardStatusUpdate proto.InternalMessageInfo

func (m *WireguardStatusUpdate) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type HostMetadataUpdate struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Addr             string   `protobuf:"bytes,2,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMetadataUpdate) Reset()         { *m = HostMetadataUpdate{} }
func (m *HostMetadataUpdate) String() string { return proto.CompactTextString(m) }
func (*HostMetadataUpdate) ProtoMessage()    {}
func (*HostMetadataUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{40}
}
func (m *HostMetadataUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostMetadataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostMetadataUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostMetadataUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMetadataUpdate.Merge(m, src)
}
func (m *HostMetadataUpdate) XXX_Size() int {
	return m.Size()
}
func (m *HostMetadataUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMetadataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_HostMetadataUpdate proto.InternalMessageInfo

func (m *HostMetadataUpdate) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostMetadataUpdate) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

type HostMetadataRemove struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Addr             string   `protobuf:"bytes,2,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostMetadataRemove) Reset()         { *m = HostMetadataRemove{} }
func (m *HostMetadataRemove) String() string { return proto.CompactTextString(m) }
func (*HostMetadataRemove) ProtoMessage()    {}
func (*HostMetadataRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{41}
}
func (m *HostMetadataRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostMetadataRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostMetadataRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostMetadataRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMetadataRemove.Merge(m, src)
}
func (m *HostMetadataRemove) XXX_Size() int {
	return m.Size()
}
func (m *HostMetadataRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMetadataRemove.DiscardUnknown(m)
}

var xxx_messageInfo_HostMetadataRemove proto.InternalMessageInfo

func (m *HostMetadataRemove) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostMetadataRemove) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

type IPAMPoolUpdate struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pool                 *IPAMPool `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IPAMPoolUpdate) Reset()         { *m = IPAMPoolUpdate{} }
func (m *IPAMPoolUpdate) String() string { return proto.CompactTextString(m) }
func (*IPAMPoolUpdate) ProtoMessage()    {}
func (*IPAMPoolUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{42}
}
func (m *IPAMPoolUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAMPoolUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAMPoolUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAMPoolUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAMPoolUpdate.Merge(m, src)
}
func (m *IPAMPoolUpdate) XXX_Size() int {
	return m.Size()
}
func (m *IPAMPoolUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAMPoolUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_IPAMPoolUpdate proto.InternalMessageInfo

func (m *IPAMPoolUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IPAMPoolUpdate) GetPool() *IPAMPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type IPAMPoolRemove struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPAMPoolRemove) Reset()         { *m = IPAMPoolRemove{} }
func (m *IPAMPoolRemove) String() string { return proto.CompactTextString(m) }
func (*IPAMPoolRemove) ProtoMessage()    {}
func (*IPAMPoolRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{43}
}
func (m *IPAMPoolRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAMPoolRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAMPoolRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAMPoolRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAMPoolRemove.Merge(m, src)
}
func (m *IPAMPoolRemove) XXX_Size() int {
	return m.Size()
}
func (m *IPAMPoolRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAMPoolRemove.DiscardUnknown(m)
}

var xxx_messageInfo_IPAMPoolRemove proto.InternalMessageInfo

func (m *IPAMPoolRemove) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IPAMPool struct {
	Cidr                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Masquerade           bool     `protobuf:"varint,2,opt,name=masquerade,proto3" json:"masquerade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPAMPool) Reset()         { *m = IPAMPool{} }
func (m *IPAMPool) String() string { return proto.CompactTextString(m) }
func (*IPAMPool) ProtoMessage()    {}
func (*IPAMPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{44}
}
func (m *IPAMPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPAMPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IPAMPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IPAMPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAMPool.Merge(m, src)
}
func (m *IPAMPool) XXX_Size() int {
	return m.Size()
}
func (m *IPAMPool) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAMPool.DiscardUnknown(m)
}

var xxx_messageInfo_IPAMPool proto.InternalMessageInfo

func (m *IPAMPool) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

func (m *IPAMPool) GetMasquerade() bool {
	if m != nil {
		return m.Masquerade
	}
	return false
}

type ServiceAccountUpdate struct {
	Id                   *ServiceAccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceAccountUpdate) Reset()         { *m = ServiceAccountUpdate{} }
func (m *ServiceAccountUpdate) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountUpdate) ProtoMessage()    {}
func (*ServiceAccountUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{45}
}
func (m *ServiceAccountUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAccountUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAccountUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountUpdate.Merge(m, src)
}
func (m *ServiceAccountUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountUpdate proto.InternalMessageInfo

func (m *ServiceAccountUpdate) GetId() *ServiceAccountID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServiceAccountUpdate) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ServiceAccountRemove struct {
	Id                   *ServiceAccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceAccountRemove) Reset()         { *m = ServiceAccountRemove{} }
func (m *ServiceAccountRemove) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountRemove) ProtoMessage()    {}
func (*ServiceAccountRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{46}
}
func (m *ServiceAccountRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAccountRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAccountRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountRemove.Merge(m, src)
}
func (m *ServiceAccountRemove) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountRemove.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountRemove proto.InternalMessageInfo

func (m *ServiceAccountRemove) GetId() *ServiceAccountID {
	if m != nil {
		return m.Id
	}
	return nil
}

type ServiceAccountID struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAccountID) Reset()         { *m = ServiceAccountID{} }
func (m *ServiceAccountID) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountID) ProtoMessage()    {}
func (*ServiceAccountID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{47}
}
func (m *ServiceAccountID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAccountID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAccountID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountID.Merge(m, src)
}
func (m *ServiceAccountID) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountID) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountID.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountID proto.InternalMessageInfo

func (m *ServiceAccountID) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ServiceAccountID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NamespaceUpdate struct {
	Id                   *NamespaceID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NamespaceUpdate) Reset()         { *m = NamespaceUpdate{} }
func (m *NamespaceUpdate) String() string { return proto.CompactTextString(m) }
func (*NamespaceUpdate) ProtoMessage()    {}
func (*NamespaceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{48}
}
func (m *NamespaceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceUpdate.Merge(m, src)
}
func (m *NamespaceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceUpdate proto.InternalMessageInfo

func (m *NamespaceUpdate) GetId() *NamespaceID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NamespaceUpdate) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type NamespaceRemove struct {
	Id                   *NamespaceID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NamespaceRemove) Reset()         { *m = NamespaceRemove{} }
func (m *NamespaceRemove) String() string { return proto.CompactTextString(m) }
func (*NamespaceRemove) ProtoMessage()    {}
func (*NamespaceRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{49}
}
func (m *NamespaceRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceRemove.Merge(m, src)
}
func (m *NamespaceRemove) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceRemove.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceRemove proto.InternalMessageInfo

func (m *NamespaceRemove) GetId() *NamespaceID {
	if m != nil {
		return m.Id
	}
	return nil
}

type NamespaceID struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceID) Reset()         { *m = NamespaceID{} }
func (m *NamespaceID) String() string { return proto.CompactTextString(m) }
func (*NamespaceID) ProtoMessage()    {}
func (*NamespaceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{50}
}
func (m *NamespaceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceID.Merge(m, src)
}
func (m *NamespaceID) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceID) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceID.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceID proto.InternalMessageInfo

func (m *NamespaceID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TunnelType struct {
	Ipip                 bool     `protobuf:"varint,1,opt,name=ipip,proto3" json:"ipip,omitempty"`
	Vxlan                bool     `protobuf:"varint,2,opt,name=vxlan,proto3" json:"vxlan,omitempty"`
	Wireguard            bool     `protobuf:"varint,3,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelType) Reset()         { *m = TunnelType{} }
func (m *TunnelType) String() string { return proto.CompactTextString(m) }
func (*TunnelType) ProtoMessage()    {}
func (*TunnelType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{51}
}
func (m *TunnelType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TunnelType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TunnelType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TunnelType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelType.Merge(m, src)
}
func (m *TunnelType) XXX_Size() int {
	return m.Size()
}
func (m *TunnelType) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelType.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelType proto.InternalMessageInfo

func (m *TunnelType) GetIpip() bool {
	if m != nil {
		return m.Ipip
	}
	return false
}

func (m *TunnelType) GetVxlan() bool {
	if m != nil {
		return m.Vxlan
	}
	return false
}

func (m *TunnelType) GetWireguard() bool {
	if m != nil {
		return m.Wireguard
	}
	return false
}

type RouteUpdate struct {
	Type       RouteType  `protobuf:"varint,1,opt,name=type,proto3,enum=felix.RouteType" json:"type,omitempty"`
	IpPoolType IPPoolType `protobuf:"varint,2,opt,name=ip_pool_type,json=ipPoolType,proto3,enum=felix.IPPoolType" json:"ip_pool_type,omitempty"`
	Dst        string     `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	// The name of the node holding this destination, if this route targets a calico node.
	DstNodeName string `protobuf:"bytes,4,opt,name=dst_node_name,json=dstNodeName,proto3" json:"dst_node_name,omitempty"`
	// IP of the node holding this destination.
	DstNodeIp            string      `protobuf:"bytes,5,opt,name=dst_node_ip,json=dstNodeIp,proto3" json:"dst_node_ip,omitempty"`
	SameSubnet           bool        `protobuf:"varint,7,opt,name=same_subnet,json=sameSubnet,proto3" json:"same_subnet,omitempty"`
	NatOutgoing          bool        `protobuf:"varint,8,opt,name=nat_outgoing,json=natOutgoing,proto3" json:"nat_outgoing,omitempty"`
	LocalWorkload        bool        `protobuf:"varint,9,opt,name=local_workload,json=localWorkload,proto3" json:"local_workload,omitempty"`
	TunnelType           *TunnelType `protobuf:"bytes,10,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteUpdate) Reset()         { *m = RouteUpdate{} }
func (m *RouteUpdate) String() string { return proto.CompactTextString(m) }
func (*RouteUpdate) ProtoMessage()    {}
func (*RouteUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{52}
}
func (m *RouteUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteUpdate.Merge(m, src)
}
func (m *RouteUpdate) XXX_Size() int {
	return m.Size()
}
func (m *RouteUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_RouteUpdate proto.InternalMessageInfo

func (m *RouteUpdate) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_CIDR_INFO
}

func (m *RouteUpdate) GetIpPoolType() IPPoolType {
	if m != nil {
		return m.IpPoolType
	}
	return IPPoolType_NONE
}

func (m *RouteUpdate) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *RouteUpdate) GetDstNodeName() string {
	if m != nil {
		return m.DstNodeName
	}
	return ""
}

func (m *RouteUpdate) GetDstNodeIp() string {
	if m != nil {
		return m.DstNodeIp
	}
	return ""
}

func (m *RouteUpdate) GetSameSubnet() bool {
	if m != nil {
		return m.SameSubnet
	}
	return false
}

func (m *RouteUpdate) GetNatOutgoing() bool {
	if m != nil {
		return m.NatOutgoing
	}
	return false
}

func (m *RouteUpdate) GetLocalWorkload() bool {
	if m != nil {
		return m.LocalWorkload
	}
	return false
}

func (m *RouteUpdate) GetTunnelType() *TunnelType {
	if m != nil {
		return m.TunnelType
	}
	return nil
}

type RouteRemove struct {
	Dst                  string   `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteRemove) Reset()         { *m = RouteRemove{} }
func (m *RouteRemove) String() string { return proto.CompactTextString(m) }
func (*RouteRemove) ProtoMessage()    {}
func (*RouteRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{53}
}
func (m *RouteRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteRemove.Merge(m, src)
}
func (m *RouteRemove) XXX_Size() int {
	return m.Size()
}
func (m *RouteRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteRemove.DiscardUnknown(m)
}

var xxx_messageInfo_RouteRemove proto.InternalMessageInfo

func (m *RouteRemove) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

type VXLANTunnelEndpointUpdate struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Mac                  string   `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Ipv4Addr             string   `protobuf:"bytes,3,opt,name=ipv4_addr,json=ipv4Addr,proto3" json:"ipv4_addr,omitempty"`
	ParentDeviceIp       string   `protobuf:"bytes,4,opt,name=parent_device_ip,json=parentDeviceIp,proto3" json:"parent_device_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VXLANTunnelEndpointUpdate) Reset()         { *m = VXLANTunnelEndpointUpdate{} }
func (m *VXLANTunnelEndpointUpdate) String() string { return proto.CompactTextString(m) }
func (*VXLANTunnelEndpointUpdate) ProtoMessage()    {}
func (*VXLANTunnelEndpointUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{54}
}
func (m *VXLANTunnelEndpointUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VXLANTunnelEndpointUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VXLANTunnelEndpointUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VXLANTunnelEndpointUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VXLANTunnelEndpointUpdate.Merge(m, src)
}
func (m *VXLANTunnelEndpointUpdate) XXX_Size() int {
	return m.Size()
}
func (m *VXLANTunnelEndpointUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_VXLANTunnelEndpointUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_VXLANTunnelEndpointUpdate proto.InternalMessageInfo

func (m *VXLANTunnelEndpointUpdate) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *VXLANTunnelEndpointUpdate) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *VXLANTunnelEndpointUpdate) GetIpv4Addr() string {
	if m != nil {
		return m.Ipv4Addr
	}
	return ""
}

func (m *VXLANTunnelEndpointUpdate) GetParentDeviceIp() string {
	if m != nil {
		return m.ParentDeviceIp
	}
	return ""
}

type VXLANTunnelEndpointRemove struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VXLANTunnelEndpointRemove) Reset()         { *m = VXLANTunnelEndpointRemove{} }
func (m *VXLANTunnelEndpointRemove) String() string { return proto.CompactTextString(m) }
func (*VXLANTunnelEndpointRemove) ProtoMessage()    {}
func (*VXLANTunnelEndpointRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{55}
}
func (m *VXLANTunnelEndpointRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VXLANTunnelEndpointRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VXLANTunnelEndpointRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VXLANTunnelEndpointRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VXLANTunnelEndpointRemove.Merge(m, src)
}
func (m *VXLANTunnelEndpointRemove) XXX_Size() int {
	return m.Size()
}
func (m *VXLANTunnelEndpointRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_VXLANTunnelEndpointRemove.DiscardUnknown(m)
}

var xxx_messageInfo_VXLANTunnelEndpointRemove proto.InternalMessageInfo

func (m *VXLANTunnelEndpointRemove) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type WireguardEndpointUpdate struct {
	// The name of the wireguard host.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The public key for this endpoint.
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The IP address of the wireguard interface.
	InterfaceIpv4Addr    string   `protobuf:"bytes,3,opt,name=interface_ipv4_addr,json=interfaceIpv4Addr,proto3" json:"interface_ipv4_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WireguardEndpointUpdate) Reset()         { *m = WireguardEndpointUpdate{} }
func (m *WireguardEndpointUpdate) String() string { return proto.CompactTextString(m) }
func (*WireguardEndpointUpdate) ProtoMessage()    {}
func (*WireguardEndpointUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{56}
}
func (m *WireguardEndpointUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireguardEndpointUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireguardEndpointUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireguardEndpointUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireguardEndpointUpdate.Merge(m, src)
}
func (m *WireguardEndpointUpdate) XXX_Size() int {
	return m.Size()
}
func (m *WireguardEndpointUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_WireguardEndpointUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_WireguardEndpointUpdate proto.InternalMessageInfo

func (m *WireguardEndpointUpdate) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *WireguardEndpointUpdate) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *WireguardEndpointUpdate) GetInterfaceIpv4Addr() string {
	if m != nil {
		return m.InterfaceIpv4Addr
	}
	return ""
}

type WireguardEndpointRemove struct {
	// The name of the wireguard host.
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WireguardEndpointRemove) Reset()         { *m = WireguardEndpointRemove{} }
func (m *WireguardEndpointRemove) String() string { return proto.CompactTextString(m) }
func (*WireguardEndpointRemove) ProtoMessage()    {}
func (*WireguardEndpointRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{57}
}
func (m *WireguardEndpointRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireguardEndpointRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireguardEndpointRemove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireguardEndpointRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireguardEndpointRemove.Merge(m, src)
}
func (m *WireguardEndpointRemove) XXX_Size() int {
	return m.Size()
}
func (m *WireguardEndpointRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_WireguardEndpointRemove.DiscardUnknown(m)
}

var xxx_messageInfo_WireguardEndpointRemove proto.InternalMessageInfo

func (m *WireguardEndpointRemove) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type GlobalBGPConfigUpdate struct {
	ServiceClusterCidrs      []string `protobuf:"bytes,1,rep,name=service_cluster_cidrs,json=serviceClusterCidrs,proto3" json:"service_cluster_cidrs,omitempty"`
	ServiceExternalCidrs     []string `protobuf:"bytes,2,rep,name=service_external_cidrs,json=serviceExternalCidrs,proto3" json:"service_external_cidrs,omitempty"`
	ServiceLoadbalancerCidrs []string `protobuf:"bytes,3,rep,name=service_loadbalancer_cidrs,json=serviceLoadbalancerCidrs,proto3" json:"service_loadbalancer_cidrs,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *GlobalBGPConfigUpdate) Reset()         { *m = GlobalBGPConfigUpdate{} }
func (m *GlobalBGPConfigUpdate) String() string { return proto.CompactTextString(m) }
func (*GlobalBGPConfigUpdate) ProtoMessage()    {}
func (*GlobalBGPConfigUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a792994fb90b9e3e, []int{58}
}
func (m *GlobalBGPConfigUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalBGPConfigUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalBGPConfigUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalBGPConfigUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalBGPConfigUpdate.Merge(m, src)
}
func (m *GlobalBGPConfigUpdate) XXX_Size() int {
	return m.Size()
}
func (m *GlobalBGPConfigUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalBGPConfigUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalBGPConfigUpdate proto.InternalMessageInfo

func (m *GlobalBGPConfigUpdate) GetServiceClusterCidrs() []string {
	if m != nil {
		return m.ServiceClusterCidrs
	}
	return nil
}

func (m *GlobalBGPConfigUpdate) GetServiceExternalCidrs() []string {
	if m != nil {
		return m.ServiceExternalCidrs
	}
	return nil
}

func (m *GlobalBGPConfigUpdate) GetServiceLoadbalancerCidrs() []string {
	if m != nil {
		return m.ServiceLoadbalancerCidrs
	}
	return nil
}

func init() {
	proto.RegisterEnum("felix.IPVersion", IPVersion_name, IPVersion_value)
	proto.RegisterEnum("felix.RouteType", RouteType_name, RouteType_value)
	proto.RegisterEnum("felix.IPPoolType", IPPoolType_name, IPPoolType_value)
	proto.RegisterEnum("felix.IPSetUpdate_IPSetType", IPSetUpdate_IPSetType_name, IPSetUpdate_IPSetType_value)
	proto.RegisterType((*SyncRequest)(nil), "felix.SyncRequest")
	proto.RegisterType((*ToDataplane)(nil), "felix.ToDataplane")
	proto.RegisterType((*FromDataplane)(nil), "felix.FromDataplane")
	proto.RegisterType((*ConfigUpdate)(nil), "felix.ConfigUpdate")
	proto.RegisterMapType((map[string]string)(nil), "felix.ConfigUpdate.ConfigEntry")
	proto.RegisterType((*InSync)(nil), "felix.InSync")
	proto.RegisterType((*IPSetUpdate)(nil), "felix.IPSetUpdate")
	proto.RegisterType((*IPSetDeltaUpdate)(nil), "felix.IPSetDeltaUpdate")
	proto.RegisterType((*IPSetRemove)(nil), "felix.IPSetRemove")
	proto.RegisterType((*ActiveProfileUpdate)(nil), "felix.ActiveProfileUpdate")
	proto.RegisterType((*ActiveProfileRemove)(nil), "felix.ActiveProfileRemove")
	proto.RegisterType((*ProfileID)(nil), "felix.ProfileID")
	proto.RegisterType((*Profile)(nil), "felix.Profile")
	proto.RegisterType((*ActivePolicyUpdate)(nil), "felix.ActivePolicyUpdate")
	proto.RegisterType((*ActivePolicyRemove)(nil), "felix.ActivePolicyRemove")
	proto.RegisterType((*PolicyID)(nil), "felix.PolicyID")
	proto.RegisterType((*Policy)(nil), "felix.Policy")
	proto.RegisterType((*Rule)(nil), "felix.Rule")
	proto.RegisterType((*ServiceAccountMatch)(nil), "felix.ServiceAccountMatch")
	proto.RegisterType((*HTTPMatch)(nil), "felix.HTTPMatch")
	proto.RegisterType((*HTTPMatch_PathMatch)(nil), "felix.HTTPMatch.PathMatch")
	proto.RegisterType((*RuleMetadata)(nil), "felix.RuleMetadata")
	proto.RegisterMapType((map[string]string)(nil), "felix.RuleMetadata.AnnotationsEntry")
	proto.RegisterType((*IcmpTypeAndCode)(nil), "felix.IcmpTypeAndCode")
	proto.RegisterType((*Protocol)(nil), "felix.Protocol")
	proto.RegisterType((*PortRange)(nil), "felix.PortRange")
	proto.RegisterType((*WorkloadEndpointID)(nil), "felix.WorkloadEndpointID")
	proto.RegisterType((*WorkloadEndpointUpdate)(nil), "felix.WorkloadEndpointUpdate")
	proto.RegisterType((*WorkloadEndpoint)(nil), "felix.WorkloadEndpoint")
	proto.RegisterType((*WorkloadEndpointRemove)(nil), "felix.WorkloadEndpointRemove")
	proto.RegisterType((*HostEndpointID)(nil), "felix.HostEndpointID")
	proto.RegisterType((*HostEndpointUpdate)(nil), "felix.HostEndpointUpdate")
	proto.RegisterType((*HostEndpoint)(nil), "felix.HostEndpoint")
	proto.RegisterType((*HostEndpointRemove)(nil), "felix.HostEndpointRemove")
	proto.RegisterType((*TierInfo)(nil), "felix.TierInfo")
	proto.RegisterType((*NatInfo)(nil), "felix.NatInfo")
	proto.RegisterType((*ProcessStatusUpdate)(nil), "felix.ProcessStatusUpdate")
	proto.RegisterType((*HostEndpointStatusUpdate)(nil), "felix.HostEndpointStatusUpdate")
	proto.RegisterType((*EndpointStatus)(nil), "felix.EndpointStatus")
	proto.RegisterType((*HostEndpointStatusRemove)(nil), "felix.HostEndpointStatusRemove")
	proto.RegisterType((*WorkloadEndpointStatusUpdate)(nil), "felix.WorkloadEndpointStatusUpdate")
	proto.RegisterType((*WorkloadEndpointStatusRemove)(nil), "felix.WorkloadEndpointStatusRemove")
	proto.RegisterType((*WireguardStatusUpdate)(nil), "felix.WireguardStatusUpdate")
	proto.RegisterType((*HostMetadataUpdate)(nil), "felix.HostMetadataUpdate")
	proto.RegisterType((*HostMetadataRemove)(nil), "felix.HostMetadataRemove")
	proto.RegisterType((*IPAMPoolUpdate)(nil), "felix.IPAMPoolUpdate")
	proto.RegisterType((*IPAMPoolRemove)(nil), "felix.IPAMPoolRemove")
	proto.RegisterType((*IPAMPool)(nil), "felix.IPAMPool")
	proto.RegisterType((*ServiceAccountUpdate)(nil), "felix.ServiceAccountUpdate")
	proto.RegisterMapType((map[string]string)(nil), "felix.ServiceAccountUpdate.LabelsEntry")
	proto.RegisterType((*ServiceAccountRemove)(nil), "felix.ServiceAccountRemove")
	proto.RegisterType((*ServiceAccountID)(nil), "felix.ServiceAccountID")
	proto.RegisterType((*NamespaceUpdate)(nil), "felix.NamespaceUpdate")
	proto.RegisterMapType((map[string]string)(nil), "felix.NamespaceUpdate.LabelsEntry")
	proto.RegisterType((*NamespaceRemove)(nil), "felix.NamespaceRemove")
	proto.RegisterType((*NamespaceID)(nil), "felix.NamespaceID")
	proto.RegisterType((*TunnelType)(nil), "felix.TunnelType")
	proto.RegisterType((*RouteUpdate)(nil), "felix.RouteUpdate")
	proto.RegisterType((*RouteRemove)(nil), "felix.RouteRemove")
	proto.RegisterType((*VXLANTunnelEndpointUpdate)(nil), "felix.VXLANTunnelEndpointUpdate")
	proto.RegisterType((*VXLANTunnelEndpointRemove)(nil), "felix.VXLANTunnelEndpointRemove")
	proto.RegisterType((*WireguardEndpointUpdate)(nil), "felix.WireguardEndpointUpdate")
	proto.RegisterType((*WireguardEndpointRemove)(nil), "felix.WireguardEndpointRemove")
	proto.RegisterType((*GlobalBGPConfigUpdate)(nil), "felix.GlobalBGPConfigUpdate")
}

func init() { proto.RegisterFile("felixbackend.proto", fileDescriptor_a792994fb90b9e3e) }

var fileDescriptor_a792994fb90b9e3e = []byte{
	// 3526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xdb, 0x6e, 0x1c, 0x47,
	0x7a, 0x66, 0x0f, 0xc9, 0xe1, 0xcc, 0x3f, 0xa7, 0x56, 0xf1, 0x34, 0xa4, 0x24, 0x4a, 0x6e, 0x59,
	0x10, 0xad, 0xc4, 0x92, 0x42, 0x4b, 0x94, 0xe5, 0x04, 0x32, 0x48, 0x0e, 0x2d, 0x8e, 0x4d, 0x0d,
	0x89, 0x26, 0x2d, 0xc7, 0x81, 0x81, 0x4e, 0x73, 0xba, 0x48, 0x76, 0xd4, 0xd3, 0xdd, 0xee, 0xae,
	0xe1, 0x21, 0xb9, 0x73, 0x1c, 0x20, 0xb9, 0x08, 0x72, 0x17, 0xf8, 0x01, 0x82, 0x5c, 0x04, 0x79,
	0x83, 0xbd, 0xd8, 0xab, 0x05, 0xec, 0xbb, 0x7d, 0x81, 0x05, 0x76, 0xbd, 0x4f, 0xb0, 0x6f, 0xb0,
	0xa8, 0x63, 0x1f, 0xa6, 0x87, 0x92, 0x16, 0x8b, 0xbd, 0x9a, 0xae, 0xff, 0xf0, 0xd5, 0x57, 0x55,
	0x7f, 0x57, 0xfd, 0xf5, 0xf7, 0x00, 0x3a, 0xc6, 0x9e, 0x7b, 0x71, 0x64, 0xf7, 0x5f, 0x63, 0xdf,
	0x79, 0x10, 0x46, 0x01, 0x09, 0xd0, 0x34, 0x93, 0x19, 0x0d, 0xa8, 0x1d, 0x5c, 0xfa, 0x7d, 0x13,
	0x7f, 0x3b, 0xc4, 0x31, 0x31, 0x7e, 0xa7, 0x43, 0xed, 0x30, 0xe8, 0xd8, 0xc4, 0x0e, 0x3d, 0xdb,
	0xc7, 0xe8, 0x1e, 0xb4, 0x62, 0xaa, 0xf2, 0xfb, 0xd8, 0xf2, 0x87, 0x83, 0x23, 0x1c, 0xb5, 0x5b,
	0xb7, 0xb5, 0xd5, 0x29, 0xb3, 0x29, 0xc5, 0x3d, 0x26, 0x45, 0xab, 0x30, 0xe3, 0xfa, 0x56, 0x7c,
	0xe9, 0xf7, 0xdb, 0xda, 0x6d, 0x6d, 0xb5, 0xb6, 0xd6, 0x78, 0xc0, 0x3a, 0x78, 0xd0, 0xf5, 0x29,
	0xfe, 0xce, 0x84, 0x59, 0x76, 0xd9, 0x13, 0x7a, 0x0a, 0x75, 0x37, 0x8c, 0x31, 0xb1, 0x86, 0xa1,
	0x63, 0x13, 0xdc, 0x2e, 0x31, 0x73, 0x24, 0xcd, 0xf7, 0x0f, 0x30, 0xf9, 0x92, 0x69, 0x76, 0x26,
	0xcc, 0x1a, 0xb3, 0xe4, 0x4d, 0xf4, 0x02, 0x10, 0x77, 0x74, 0xb0, 0x47, 0x6c, 0xe9, 0x3e, 0xc9,
	0xdc, 0x17, 0xd3, 0xee, 0x1d, 0xaa, 0x57, 0x18, 0x3a, 0x73, 0x4a, 0xc9, 0x12, 0x06, 0x11, 0x1e,
	0x04, 0x67, 0xb8, 0x3d, 0x35, 0xca, 0xc0, 0x64, 0x1a, 0xc5, 0x80, 0x37, 0xd1, 0x3e, 0xcc, 0xdb,
	0x7d, 0xe2, 0x9e, 0x61, 0x2b, 0x8c, 0x82, 0x63, 0xd7, 0xc3, 0x92, 0xc4, 0x34, 0x43, 0x58, 0x16,
	0x08, 0x1b, 0xcc, 0x66, 0x9f, 0x9b, 0x28, 0x1e, 0xb3, 0xf6, 0xa8, 0xb8, 0x00, 0x51, 0x70, 0x2a,
	0x8f, 0x47, 0x54, 0xdc, 0xb2, 0x88, 0x82, 0xe3, 0x4b, 0x98, 0x93, 0x88, 0x81, 0xe7, 0xf6, 0x2f,
	0x25, 0xc5, 0x19, 0x06, 0xb8, 0x94, 0x05, 0x64, 0x16, 0x8a, 0x21, 0xb2, 0x47, 0xa4, 0xa3, 0x70,
	0x82, 0x5f, 0x65, 0x2c, 0x9c, 0xa2, 0x97, 0x81, 0x4b, 0xd8, 0x9d, 0x06, 0x31, 0xb1, 0xb0, 0xef,
	0x84, 0x81, 0xeb, 0xab, 0x20, 0xa8, 0x66, 0xe0, 0x76, 0x82, 0x98, 0x6c, 0x0b, 0x8b, 0x84, 0xdd,
	0xe9, 0x88, 0x74, 0x14, 0x4e, 0xb0, 0x83, 0xb1, 0x70, 0x09, 0xbb, 0xd3, 0x11, 0x29, 0xfa, 0x1a,
	0xda, 0xe7, 0x41, 0xf4, 0xda, 0x0b, 0x6c, 0x67, 0x84, 0x61, 0x8d, 0x41, 0xde, 0x14, 0x90, 0x5f,
	0x09, 0xb3, 0x11, 0x96, 0x0b, 0xe7, 0x85, 0x9a, 0x62, 0x68, 0xc1, 0xb6, 0x7e, 0x25, 0xb4, 0x62,
	0x3c, 0x02, 0x2d, 0x58, 0x7f, 0x02, 0x8d, 0x7e, 0xe0, 0x1f, 0xbb, 0x27, 0x92, 0x6a, 0x83, 0xe1,
	0xcd, 0x0a, 0xbc, 0x2d, 0xa6, 0x53, 0x04, 0xeb, 0xfd, 0x54, 0x5b, 0x4d, 0xe0, 0x00, 0x13, 0xdb,
	0xb1, 0x93, 0xb7, 0xaa, 0x39, 0x32, 0x81, 0x2f, 0x85, 0x45, 0x76, 0x3d, 0xb2, 0xd2, 0x51, 0x38,
	0x31, 0x42, 0x34, 0x16, 0x2e, 0xbb, 0x1e, 0x59, 0x29, 0xda, 0x00, 0xdd, 0x0d, 0xed, 0x81, 0x15,
	0x06, 0x81, 0x27, 0x99, 0xe9, 0x0c, 0x6a, 0x5e, 0xbd, 0xac, 0x1b, 0x2f, 0xf7, 0x83, 0xc0, 0x53,
	0xac, 0x9a, 0xd4, 0x21, 0x91, 0x64, 0x21, 0x04, 0x9b, 0x6b, 0x85, 0x10, 0x8a, 0x89, 0x82, 0x10,
	0x2c, 0x0e, 0x60, 0x21, 0xc6, 0xd1, 0x99, 0xdb, 0xc7, 0x96, 0xdd, 0xef, 0x07, 0xc3, 0x24, 0x26,
	0x66, 0x19, 0xd0, 0x75, 0x01, 0x74, 0xc0, 0x8d, 0x36, 0xb8, 0x8d, 0x62, 0x34, 0x17, 0x17, 0xc8,
	0x8b, 0x40, 0x05, 0xbb, 0xb9, 0x2b, 0x40, 0x15, 0xc7, 0x1c, 0xa8, 0x60, 0xba, 0x05, 0xba, 0x6f,
	0x0f, 0x70, 0x1c, 0xda, 0x7d, 0xb5, 0x35, 0xcd, 0x33, 0xb8, 0x05, 0x01, 0xd7, 0x93, 0x6a, 0x45,
	0xaf, 0xe5, 0x67, 0x45, 0x59, 0x10, 0xc1, 0x69, 0xa1, 0x18, 0x44, 0xd1, 0x49, 0x40, 0x04, 0x93,
	0xa7, 0x50, 0x8f, 0x82, 0x21, 0x51, 0x2c, 0x16, 0x33, 0x5b, 0xac, 0x49, 0x55, 0xc9, 0x26, 0x1f,
	0x25, 0xcd, 0xc4, 0x51, 0xf4, 0xdc, 0x1e, 0x75, 0x4c, 0xf6, 0xe6, 0x28, 0x69, 0xa2, 0x2d, 0xa8,
	0x9d, 0x11, 0x1c, 0xca, 0x0e, 0x97, 0x98, 0xdf, 0x6d, 0xe1, 0xf7, 0xea, 0xef, 0x77, 0x37, 0x7a,
	0x87, 0x43, 0xdf, 0xc7, 0xde, 0xc8, 0x1b, 0x0b, 0xd4, 0x4d, 0x8d, 0x9d, 0x83, 0x88, 0xce, 0x97,
	0xdf, 0x04, 0xa2, 0xa8, 0x30, 0x10, 0xc1, 0xe4, 0x1b, 0x58, 0x3a, 0x77, 0x23, 0x7c, 0x32, 0xb4,
	0xa3, 0xd1, 0x6d, 0xe4, 0x3a, 0x83, 0x5c, 0x91, 0xef, 0xba, 0xb4, 0x1b, 0x61, 0xb5, 0x78, 0x5e,
	0xac, 0x1a, 0x83, 0x2e, 0x08, 0xdf, 0xb8, 0x1a, 0x5d, 0xd1, 0x1d, 0x45, 0x17, 0xdc, 0xbf, 0x82,
	0xf6, 0x89, 0x17, 0x1c, 0xd9, 0x9e, 0x75, 0x74, 0x12, 0x5a, 0xd9, 0x6d, 0xe5, 0x26, 0x03, 0xbf,
	0x21, 0xc0, 0x5f, 0x30, 0xb3, 0xcd, 0x17, 0xfb, 0xb9, 0xfd, 0x65, 0x9e, 0xfb, 0x6f, 0x9e, 0x84,
	0x69, 0xc5, 0x66, 0x15, 0x66, 0x42, 0xfb, 0x92, 0xee, 0x5e, 0xc6, 0x7f, 0x4e, 0x43, 0xe3, 0xb3,
	0x28, 0x18, 0x5c, 0x99, 0x65, 0x54, 0x0a, 0xb3, 0x8c, 0x7d, 0x98, 0x0f, 0xa3, 0xa0, 0x8f, 0xe3,
	0xd8, 0x8a, 0x89, 0x4d, 0x86, 0x71, 0x36, 0x0b, 0x90, 0xc7, 0xe5, 0x3e, 0xb7, 0x39, 0x60, 0x26,
	0xc9, 0x01, 0x1c, 0x8e, 0x8a, 0xd1, 0x3f, 0xc2, 0xf5, 0xec, 0x09, 0x92, 0xc5, 0xe5, 0xa9, 0xc1,
	0xad, 0x82, 0x83, 0x24, 0x07, 0xde, 0x3e, 0x1d, 0xa3, 0x1b, 0xdb, 0x83, 0x58, 0xb2, 0xe9, 0x37,
	0xf4, 0xa0, 0xd6, 0xac, 0xa0, 0x07, 0xb1, 0x68, 0x1e, 0xdc, 0x1a, 0x3d, 0x5b, 0xb2, 0xe3, 0xe0,
	0xe9, 0xc4, 0x9d, 0x31, 0x47, 0x4c, 0x6e, 0x2c, 0x37, 0xce, 0xaf, 0xd0, 0x5f, 0xd9, 0x9b, 0x18,
	0xd3, 0xcc, 0x5b, 0xf4, 0xa6, 0xc6, 0x35, 0xa6, 0x37, 0x31, 0xb6, 0x57, 0x90, 0xc4, 0x6a, 0x6e,
	0x4c, 0xd5, 0x4c, 0x3c, 0xaa, 0x60, 0xcf, 0x0d, 0x66, 0xfe, 0xbc, 0x48, 0x91, 0x8e, 0xc7, 0xef,
	0x34, 0xa8, 0xa7, 0x63, 0x15, 0x3d, 0x85, 0x32, 0x8f, 0xfc, 0xb6, 0x76, 0x7b, 0x32, 0xb5, 0x38,
	0x69, 0x23, 0xd1, 0xd8, 0xf6, 0x49, 0x74, 0x69, 0x0a, 0xf3, 0xe5, 0x67, 0x50, 0x4b, 0x89, 0x91,
	0x0e, 0x93, 0xaf, 0xf1, 0x25, 0xcb, 0x87, 0xab, 0x26, 0x7d, 0x44, 0x73, 0x30, 0x7d, 0x66, 0x7b,
	0x43, 0x9e, 0xf4, 0x56, 0x4d, 0xde, 0xf8, 0xa4, 0xf4, 0xb1, 0x66, 0x54, 0xa0, 0xcc, 0x33, 0x65,
	0xe3, 0x07, 0x0d, 0x6a, 0xa9, 0x2c, 0x18, 0x35, 0xa1, 0xe4, 0x3a, 0x02, 0xa4, 0xe4, 0x3a, 0xa8,
	0x0d, 0x33, 0x03, 0x4c, 0xdf, 0x86, 0xb8, 0x5d, 0xba, 0x3d, 0xb9, 0x5a, 0x35, 0x65, 0x13, 0x3d,
	0x82, 0x29, 0x72, 0x19, 0xf2, 0x97, 0xa1, 0xa9, 0x26, 0x26, 0x85, 0xc5, 0x9f, 0x0f, 0x2f, 0x43,
	0x6c, 0x32, 0x4b, 0xe3, 0x43, 0xa8, 0x2a, 0x11, 0x2a, 0x43, 0xa9, 0xbb, 0xaf, 0x4f, 0xa0, 0x16,
	0xed, 0xdf, 0xda, 0xe8, 0x75, 0xac, 0xfd, 0x3d, 0xf3, 0x50, 0xd7, 0xd0, 0x0c, 0x4c, 0xf6, 0xb6,
	0x0f, 0xf5, 0x92, 0x11, 0x82, 0x9e, 0x4f, 0xb0, 0x47, 0xe8, 0xdd, 0x81, 0x86, 0xed, 0x38, 0xd8,
	0xb1, 0xb2, 0x24, 0xeb, 0x4c, 0xf8, 0x52, 0x30, 0xbd, 0x07, 0x2d, 0x1e, 0x2a, 0x89, 0xd9, 0x24,
	0x33, 0x6b, 0x0a, 0xb1, 0x30, 0x34, 0x6e, 0x8a, 0xb9, 0x10, 0xd1, 0x90, 0xeb, 0xcc, 0xb0, 0x61,
	0xb6, 0x20, 0xd9, 0x46, 0xb7, 0x95, 0x59, 0x6d, 0x4d, 0x4f, 0xf6, 0x04, 0x6a, 0xd1, 0xed, 0x30,
	0x96, 0xab, 0x30, 0x23, 0x12, 0x6e, 0x71, 0xff, 0x68, 0x66, 0xcd, 0x4c, 0xa9, 0x36, 0x9e, 0xe6,
	0xba, 0x10, 0x4c, 0xde, 0xd8, 0x85, 0x71, 0x0b, 0xaa, 0x4a, 0x80, 0x10, 0x4c, 0xd1, 0x23, 0x52,
	0x50, 0x67, 0xcf, 0x46, 0x00, 0x33, 0xc2, 0x00, 0x3d, 0x82, 0x86, 0xeb, 0x1f, 0x05, 0x43, 0xdf,
	0xb1, 0xa2, 0xa1, 0x87, 0x63, 0x11, 0x78, 0x35, 0x79, 0xec, 0x0d, 0x3d, 0x6c, 0xd6, 0x85, 0x05,
	0x6d, 0xc4, 0x68, 0x0d, 0x9a, 0xc1, 0x90, 0xa4, 0x5d, 0x4a, 0xa3, 0x2e, 0x0d, 0x69, 0xc2, 0x7c,
	0x8c, 0x6f, 0x00, 0x8d, 0xe6, 0xfd, 0xe8, 0x56, 0x6a, 0x24, 0x2d, 0x39, 0x12, 0x66, 0x20, 0xe6,
	0xea, 0x2e, 0x94, 0x79, 0xee, 0x2f, 0xa6, 0xaa, 0x91, 0x31, 0x32, 0x85, 0xd2, 0x78, 0x92, 0x45,
	0x17, 0xf3, 0xf4, 0x26, 0x74, 0x63, 0x0d, 0x2a, 0xb2, 0x4d, 0x67, 0x89, 0xb8, 0x38, 0x92, 0xb3,
	0x44, 0x9f, 0xd5, 0xcc, 0x95, 0x52, 0x33, 0xf7, 0x2b, 0x0d, 0xca, 0xdc, 0x09, 0xdd, 0x80, 0xaa,
	0xca, 0x3d, 0xd8, 0x5e, 0x5a, 0x35, 0x13, 0xc1, 0x5f, 0x66, 0x5e, 0x29, 0x87, 0xa1, 0x4f, 0x22,
	0x7a, 0xbd, 0x76, 0xd8, 0xcb, 0x57, 0x31, 0x13, 0x01, 0x5a, 0x82, 0x4a, 0x18, 0x61, 0xcb, 0xf1,
	0x6d, 0xc2, 0x8e, 0x93, 0x0a, 0x8d, 0x2d, 0xdc, 0xf1, 0x6d, 0x62, 0xfc, 0x9f, 0x0e, 0x53, 0x14,
	0x02, 0x2d, 0x40, 0x99, 0x5e, 0x96, 0x02, 0x5f, 0x0c, 0x5d, 0xb4, 0xd0, 0x43, 0x00, 0x37, 0xb4,
	0xce, 0x70, 0x14, 0x53, 0x5d, 0x89, 0xbd, 0xd7, 0xba, 0x7a, 0xaf, 0x5f, 0x71, 0xb9, 0x59, 0x75,
	0x43, 0xf1, 0x88, 0xfe, 0x8a, 0x76, 0x16, 0x90, 0xa0, 0x1f, 0x78, 0xe2, 0x4c, 0x6c, 0x25, 0xc1,
	0xc9, 0xc4, 0xa6, 0x32, 0x40, 0x8b, 0x30, 0x13, 0x47, 0x7d, 0xcb, 0xc7, 0x94, 0x18, 0x7d, 0xfb,
	0xca, 0x71, 0xd4, 0xef, 0x61, 0x82, 0x3e, 0x84, 0x2a, 0x55, 0x84, 0x41, 0x44, 0xe2, 0xf6, 0x34,
	0x1b, 0xbf, 0x8a, 0xf1, 0x20, 0x22, 0xa6, 0xed, 0x9f, 0x60, 0xb3, 0x12, 0x47, 0x7d, 0xda, 0x8a,
	0xd1, 0x53, 0x58, 0x62, 0x38, 0xf6, 0x00, 0x3b, 0xcc, 0xc9, 0x72, 0x43, 0x8b, 0xde, 0xaf, 0x5d,
	0x27, 0x6e, 0xd7, 0x19, 0xf2, 0x1c, 0x45, 0xa6, 0x7a, 0xea, 0xd1, 0x0d, 0x0f, 0x30, 0xe9, 0x3a,
	0x31, 0x25, 0xe0, 0xc4, 0x84, 0x11, 0x28, 0x73, 0x02, 0x4e, 0x4c, 0x04, 0x01, 0xaa, 0xe0, 0x04,
	0x66, 0xc6, 0x11, 0x70, 0x62, 0xa2, 0x08, 0x30, 0x9c, 0x42, 0x02, 0x0d, 0x4e, 0x80, 0x22, 0x8f,
	0x10, 0xb8, 0x09, 0x55, 0xb7, 0x3f, 0x08, 0x2d, 0xb6, 0x6d, 0xd2, 0x94, 0x63, 0x7a, 0x67, 0xc2,
	0xac, 0x50, 0x11, 0xdb, 0x11, 0x9f, 0x43, 0x53, 0xa9, 0xad, 0x7e, 0xe0, 0xc8, 0x33, 0x47, 0x26,
	0xc2, 0x5d, 0x61, 0xb8, 0xe1, 0x3b, 0x5b, 0x81, 0xc3, 0x6e, 0x57, 0xd2, 0x97, 0xb6, 0xd1, 0x1d,
	0x68, 0xd2, 0x89, 0x49, 0x91, 0x01, 0x46, 0xa6, 0x16, 0x47, 0x7d, 0xc5, 0xe1, 0x0e, 0x34, 0x29,
	0xf9, 0x94, 0x51, 0x8d, 0x1b, 0x39, 0x71, 0x42, 0xf4, 0xaf, 0x61, 0x56, 0x18, 0xb1, 0xe1, 0x49,
	0xcb, 0x16, 0xb3, 0x6c, 0x31, 0x4b, 0x3a, 0x30, 0x61, 0xbd, 0x06, 0x75, 0x3f, 0x20, 0x96, 0x8a,
	0x84, 0xe3, 0xe2, 0x48, 0xa8, 0xf9, 0x01, 0x91, 0x0d, 0xb4, 0x02, 0xb4, 0x69, 0xc9, 0x80, 0x38,
	0x61, 0xc8, 0x55, 0x3f, 0x20, 0x07, 0x3c, 0x26, 0x1e, 0x43, 0x43, 0xea, 0xf9, 0xb2, 0x9c, 0x8e,
	0x59, 0x96, 0x1a, 0xf7, 0xe1, 0x2b, 0x23, 0x50, 0xe5, 0x2a, 0xbb, 0x0a, 0xb5, 0xc3, 0x17, 0x5a,
	0xa0, 0x26, 0x8b, 0xfd, 0x4f, 0x57, 0xa0, 0x76, 0xe4, 0x7a, 0xbf, 0xcf, 0xbd, 0x92, 0xa5, 0x7b,
	0xcd, 0x96, 0x4e, 0x63, 0x56, 0x72, 0x51, 0xd0, 0x36, 0xa0, 0x8c, 0x15, 0x5f, 0x41, 0xef, 0xca,
	0x15, 0xd4, 0xcc, 0x56, 0x0a, 0x82, 0x2d, 0xe2, 0x7d, 0x0e, 0x93, 0x5b, 0xc8, 0x01, 0x3f, 0xae,
	0xf8, 0x58, 0xd5, 0x32, 0x09, 0xdb, 0xdc, 0x7a, 0xfa, 0xca, 0xb6, 0x93, 0x5a, 0xd2, 0xe7, 0x70,
	0x53, 0x4d, 0x78, 0x61, 0xe0, 0x86, 0xcc, 0x6d, 0x51, 0x2c, 0xc1, 0x48, 0xec, 0x0a, 0xff, 0xf1,
	0x81, 0xff, 0xad, 0xf2, 0xef, 0x14, 0xc5, 0xfe, 0x1a, 0xcc, 0x07, 0x91, 0x7b, 0xe2, 0xfa, 0xb6,
	0xc7, 0x48, 0xc4, 0xd8, 0xc3, 0x7d, 0x12, 0x44, 0xed, 0x88, 0x6d, 0x41, 0xb3, 0x52, 0x79, 0x10,
	0xf5, 0x0f, 0x84, 0x2a, 0xe3, 0x43, 0x3b, 0x56, 0x3e, 0x71, 0xd6, 0xa7, 0x13, 0x13, 0xe5, 0xb3,
	0x0d, 0xb7, 0x32, 0xfd, 0x24, 0x97, 0x4b, 0xe5, 0x4d, 0x98, 0xf7, 0x8d, 0x54, 0x8f, 0xea, 0x8a,
	0x59, 0x08, 0x23, 0xc7, 0x9c, 0x83, 0x19, 0x66, 0x61, 0xc4, 0xa8, 0xb3, 0x30, 0xcf, 0x60, 0x49,
	0xc1, 0xc8, 0xe9, 0x57, 0x00, 0x67, 0x0c, 0x60, 0x41, 0x1a, 0xf4, 0xd8, 0xcc, 0x8f, 0x75, 0xcd,
	0x4c, 0xc0, 0xf9, 0x88, 0x6b, 0x7a, 0x0e, 0xfe, 0x06, 0xe6, 0x72, 0x73, 0xcd, 0x6e, 0xef, 0xed,
	0xef, 0xf9, 0x76, 0x8f, 0x32, 0x73, 0xcd, 0x54, 0xa8, 0x03, 0x2b, 0x45, 0x2e, 0xc9, 0xb8, 0xdb,
	0xff, 0xc6, 0x9d, 0xaf, 0x8f, 0x3a, 0xab, 0x61, 0x67, 0x3a, 0xe6, 0x7c, 0x79, 0xc7, 0xdf, 0xe5,
	0x3a, 0x66, 0x64, 0x47, 0x3b, 0x4e, 0xb9, 0xa4, 0x3a, 0xfe, 0xd7, 0x5c, 0xc7, 0x89, 0x73, 0xd2,
	0xf1, 0x97, 0xfc, 0x4c, 0xc8, 0xd7, 0x38, 0x06, 0x36, 0xe9, 0x9f, 0xb6, 0x2f, 0x32, 0xb7, 0xb5,
	0x6c, 0x89, 0xe3, 0x25, 0xb5, 0x30, 0x17, 0x62, 0x35, 0x98, 0xb4, 0x9c, 0xc2, 0xa6, 0x39, 0x65,
	0x61, 0x2f, 0xdf, 0x0c, 0xeb, 0x28, 0xaa, 0x19, 0xd8, 0x87, 0x00, 0xa7, 0x84, 0x84, 0x02, 0xe7,
	0x9f, 0x33, 0x59, 0xdd, 0xce, 0xe1, 0xe1, 0x3e, 0xf7, 0xae, 0x52, 0x1b, 0xe9, 0x50, 0x91, 0x35,
	0xae, 0xf6, 0xbf, 0x64, 0xca, 0x6d, 0xf4, 0x3c, 0x57, 0x65, 0x2c, 0x65, 0x44, 0xb3, 0x76, 0x9a,
	0x4e, 0x58, 0xae, 0xd3, 0xfe, 0x49, 0x9c, 0xf1, 0xb4, 0xdd, 0x75, 0x36, 0xcb, 0x30, 0x45, 0xb7,
	0xa8, 0x4d, 0x80, 0x8a, 0xdc, 0xae, 0x3e, 0x2f, 0x57, 0x7e, 0xd4, 0xf4, 0x9f, 0x34, 0x13, 0xbc,
	0xe0, 0xc4, 0x0a, 0x23, 0x7c, 0xec, 0x5e, 0x18, 0x2f, 0x60, 0xb6, 0x88, 0xfa, 0x32, 0x54, 0x54,
	0x10, 0x72, 0x60, 0xd5, 0xa6, 0xd7, 0x0d, 0xb6, 0x6a, 0x22, 0x07, 0xe7, 0x0d, 0xe3, 0x7f, 0x34,
	0xa8, 0xaa, 0x41, 0xf1, 0xeb, 0x04, 0x39, 0x0d, 0x1c, 0x9e, 0x1c, 0xb1, 0xeb, 0x04, 0x6b, 0xa2,
	0x47, 0x30, 0x1d, 0xda, 0xe4, 0x54, 0x66, 0x40, 0xcb, 0xf9, 0xf9, 0x78, 0xb0, 0x6f, 0x93, 0x53,
	0x3e, 0x33, 0xdc, 0x70, 0xf9, 0x0b, 0xa8, 0x2a, 0x19, 0x5a, 0x80, 0x69, 0x7c, 0x61, 0xf7, 0x09,
	0x67, 0xb5, 0x33, 0x61, 0xf2, 0x26, 0x6a, 0x43, 0x99, 0x8f, 0x88, 0xa7, 0x74, 0x3b, 0x13, 0xa6,
	0x68, 0x6f, 0xd6, 0x01, 0x28, 0x0e, 0x5f, 0x05, 0xe3, 0xbf, 0x35, 0xa8, 0xa7, 0x27, 0x13, 0x7d,
	0x06, 0x35, 0xdb, 0xf7, 0x03, 0x62, 0xd3, 0xd4, 0x48, 0xa6, 0x72, 0xef, 0x17, 0x4c, 0xfb, 0x83,
	0x8d, 0xc4, 0x8c, 0x5f, 0xd0, 0xd2, 0x8e, 0xcb, 0xcf, 0x41, 0xcf, 0x1b, 0xbc, 0xd3, 0x55, 0xed,
	0x19, 0xb4, 0x72, 0xc7, 0x06, 0x4b, 0x5c, 0xe9, 0x39, 0x44, 0xfd, 0xa7, 0xf9, 0xdd, 0x8a, 0xca,
	0xd8, 0x81, 0x53, 0xe2, 0x32, 0xfa, 0x6c, 0xec, 0x42, 0x45, 0x1d, 0xb8, 0x6d, 0x28, 0x8b, 0x5a,
	0x87, 0x26, 0x12, 0x0f, 0xd1, 0x46, 0x73, 0xe9, 0x94, 0x77, 0x67, 0x82, 0x27, 0xbd, 0x9b, 0x3a,
	0x34, 0xb9, 0xde, 0x0a, 0x22, 0xf6, 0x32, 0x1a, 0x4f, 0xa0, 0xaa, 0x0e, 0x48, 0xca, 0xf7, 0xd8,
	0x8d, 0x62, 0x22, 0x38, 0xf0, 0x06, 0x25, 0xe1, 0xd9, 0x31, 0x91, 0x24, 0xe8, 0xb3, 0xf1, 0x5f,
	0x1a, 0xa0, 0xfc, 0x9d, 0xbc, 0xdb, 0xa1, 0x77, 0xb2, 0x20, 0xea, 0x9f, 0xe2, 0x98, 0x44, 0x36,
	0x09, 0x22, 0x1a, 0xa9, 0x7c, 0xe8, 0xcd, 0xb4, 0xb8, 0xeb, 0xa0, 0x5b, 0x50, 0x53, 0x05, 0x00,
	0x97, 0x27, 0xbc, 0x55, 0x13, 0xa4, 0x88, 0x1b, 0xa8, 0xc2, 0x80, 0xeb, 0xb0, 0xa4, 0xb7, 0x6a,
	0x82, 0x14, 0x75, 0x9d, 0xcf, 0xa7, 0x2a, 0x9a, 0x5e, 0x32, 0x2b, 0xa7, 0x41, 0x4c, 0xd8, 0x40,
	0x2e, 0x60, 0xa1, 0xb8, 0xa0, 0x8e, 0x3e, 0x48, 0x5d, 0x1f, 0x96, 0xc6, 0xd4, 0x13, 0xc4, 0x35,
	0xe5, 0x23, 0xa8, 0xc8, 0x2e, 0x44, 0x51, 0x65, 0x71, 0x5c, 0x45, 0x5d, 0x19, 0x1a, 0xff, 0x5b,
	0x02, 0x3d, 0xaf, 0xa6, 0x53, 0x19, 0x13, 0x9b, 0xc8, 0xdb, 0x1a, 0x6f, 0x14, 0x5d, 0x44, 0x68,
	0xd8, 0x0c, 0xec, 0xbe, 0x98, 0x02, 0xfa, 0x48, 0xc7, 0x2e, 0xbf, 0xe4, 0xd0, 0x33, 0x98, 0xe7,
	0xd5, 0x20, 0x44, 0xf4, 0xd8, 0xbd, 0x0e, 0x55, 0x37, 0x3c, 0x7b, 0x4c, 0xd3, 0x21, 0x9e, 0x5b,
	0x57, 0xcd, 0x0a, 0x15, 0xf4, 0x30, 0x91, 0xca, 0x75, 0xae, 0x2c, 0x2b, 0xe5, 0x3a, 0x53, 0xde,
	0x85, 0x69, 0x7a, 0x23, 0x92, 0x09, 0xb1, 0x4c, 0xe7, 0x0e, 0x5d, 0x1c, 0x75, 0xfd, 0xe3, 0xc0,
	0xe4, 0x5a, 0xf4, 0x01, 0x54, 0x78, 0x07, 0x36, 0x69, 0x57, 0x98, 0x65, 0x53, 0xd5, 0x6d, 0x09,
	0x33, 0x9c, 0x61, 0xfd, 0xd9, 0x44, 0x98, 0xae, 0x33, 0xd3, 0xea, 0x58, 0xd3, 0xf5, 0x9e, 0x4d,
	0x8c, 0xad, 0xd1, 0x25, 0x12, 0x37, 0xbc, 0xb7, 0x5f, 0x22, 0x63, 0x03, 0x9a, 0xe9, 0x02, 0x57,
	0xb7, 0x93, 0x0f, 0x95, 0xd2, 0x1b, 0x43, 0xc5, 0x03, 0x34, 0xfa, 0x75, 0x08, 0xdd, 0x4d, 0x71,
	0x98, 0x2f, 0x28, 0xa5, 0x89, 0x10, 0x79, 0x98, 0x0a, 0x91, 0xc9, 0xcc, 0xae, 0x9d, 0xf9, 0x44,
	0x94, 0x84, 0xc7, 0x1f, 0x4a, 0x50, 0x4f, 0xab, 0x8a, 0xee, 0xf1, 0xf9, 0x25, 0x2f, 0x8d, 0x2c,
	0xb9, 0x5a, 0xb8, 0xc9, 0x2b, 0x17, 0xee, 0x63, 0x68, 0xa9, 0x5b, 0xa3, 0xc5, 0x1d, 0xca, 0xc5,
	0x0e, 0x4d, 0x65, 0x77, 0xc8, 0x3c, 0x9f, 0x40, 0x53, 0x5e, 0x31, 0xad, 0x2b, 0x43, 0xa4, 0x2e,
	0x6e, 0x9e, 0xdc, 0xed, 0x31, 0x34, 0x8e, 0x83, 0xe8, 0xdc, 0x8e, 0x64, 0x77, 0x95, 0x31, 0x5e,
	0xc2, 0x8a, 0x7b, 0x3d, 0x80, 0x59, 0x7c, 0x11, 0xe2, 0x3e, 0xc1, 0x8e, 0xc5, 0x02, 0xcd, 0x76,
	0x9c, 0x48, 0x46, 0xfa, 0x35, 0xa9, 0xea, 0x86, 0x67, 0x8f, 0x37, 0xa8, 0x22, 0x6f, 0xbf, 0x2e,
	0xec, 0xa7, 0x47, 0xec, 0xd7, 0x99, 0xbd, 0xf1, 0xb7, 0xd9, 0x15, 0x16, 0x51, 0xf6, 0x76, 0x2b,
	0x6c, 0x44, 0x50, 0x91, 0xb4, 0x0b, 0xd7, 0xea, 0x03, 0xd0, 0x5d, 0xff, 0x24, 0xc2, 0x71, 0xcc,
	0xbf, 0x67, 0xba, 0xea, 0x70, 0x6c, 0x09, 0xf9, 0xbe, 0x10, 0xd3, 0xfd, 0x10, 0xe7, 0x2c, 0x45,
	0x8d, 0x0a, 0x67, 0x0c, 0x8d, 0xa7, 0x30, 0x23, 0x5e, 0x17, 0x34, 0x0f, 0x65, 0x7c, 0x41, 0x93,
	0x70, 0xb9, 0x75, 0xe0, 0x0b, 0xd2, 0x0d, 0xa9, 0x98, 0x05, 0x78, 0x28, 0x0f, 0x13, 0x4a, 0x38,
	0x34, 0x4c, 0x98, 0x2d, 0xa8, 0x54, 0xa3, 0x3b, 0xd0, 0x70, 0xe3, 0xc0, 0x22, 0xee, 0x00, 0xc7,
	0xc4, 0x1e, 0x48, 0xac, 0xba, 0x1b, 0x07, 0x87, 0x52, 0x86, 0x16, 0xa0, 0x3c, 0x0c, 0xa9, 0x09,
	0x83, 0xd4, 0x4c, 0xd1, 0x32, 0x42, 0x68, 0x8f, 0xab, 0x52, 0xbf, 0xed, 0x5b, 0xf2, 0x21, 0x94,
	0x79, 0xa1, 0x55, 0xd4, 0x7b, 0xa4, 0x69, 0xae, 0x3e, 0x2b, 0x8c, 0x8c, 0x55, 0x68, 0x66, 0x35,
	0x94, 0x9b, 0x00, 0x10, 0x99, 0x8e, 0xb0, 0xdc, 0x28, 0xe2, 0xf6, 0x6e, 0xeb, 0x7b, 0x01, 0x37,
	0xae, 0x2a, 0x5e, 0xbf, 0xcb, 0x79, 0xf1, 0x8e, 0xc3, 0xec, 0x8e, 0xeb, 0xf9, 0xdd, 0xb7, 0xc1,
	0x75, 0x98, 0x2f, 0xac, 0x56, 0xa3, 0x9b, 0x00, 0xe1, 0xf0, 0xc8, 0x73, 0xfb, 0x56, 0x92, 0x8c,
	0x54, 0xb9, 0xe4, 0x0b, 0x7c, 0x69, 0xbc, 0xe4, 0x6f, 0x46, 0xee, 0x9b, 0xeb, 0x32, 0xa8, 0xdd,
	0x51, 0x26, 0x80, 0xb2, 0xad, 0x0e, 0x1b, 0xfa, 0xca, 0x89, 0xd8, 0x63, 0x87, 0x03, 0x7d, 0xd3,
	0xf2, 0x70, 0x62, 0x1c, 0x7f, 0x32, 0xdc, 0x36, 0x34, 0xb3, 0x5f, 0x63, 0x0b, 0x4a, 0xc3, 0x53,
	0x61, 0x10, 0x78, 0x62, 0xbe, 0x5b, 0xf9, 0xef, 0xaf, 0x4c, 0x69, 0xdc, 0x4e, 0x60, 0xc6, 0x14,
	0x7d, 0x9f, 0x43, 0x45, 0x5a, 0xb0, 0x24, 0xcb, 0x75, 0x54, 0xc5, 0x90, 0x3e, 0xa3, 0x15, 0x80,
	0x81, 0x1d, 0x7f, 0x3b, 0xc4, 0x91, 0x2d, 0xd2, 0xaf, 0x8a, 0x99, 0x92, 0x18, 0xbf, 0xd0, 0x60,
	0xae, 0xe8, 0x5b, 0x2d, 0xba, 0x97, 0x5a, 0xc2, 0xc5, 0xc2, 0x5b, 0x84, 0x08, 0x9d, 0x4f, 0xa1,
	0xec, 0xd9, 0x47, 0xd8, 0x93, 0xa9, 0xf1, 0xbd, 0x2b, 0xbe, 0x00, 0x3f, 0xd8, 0x65, 0x96, 0xe2,
	0x43, 0x01, 0x77, 0x5b, 0x7e, 0x06, 0xb5, 0x94, 0xf8, 0x9d, 0xb2, 0xcf, 0x4f, 0xf3, 0xe4, 0xc5,
	0x2c, 0xbd, 0x2d, 0x79, 0xa3, 0x03, 0x7a, 0x5e, 0x9e, 0xad, 0xa2, 0x6a, 0xf9, 0x2a, 0x6a, 0x51,
	0x09, 0xf6, 0xff, 0x35, 0x68, 0xe5, 0x3e, 0x26, 0x23, 0x23, 0x45, 0x01, 0xe5, 0xbf, 0x15, 0x8b,
	0xa9, 0xfb, 0x24, 0x37, 0x75, 0x46, 0xf1, 0x87, 0xe9, 0x3f, 0xf7, 0xac, 0x3d, 0x49, 0xb1, 0x15,
	0x13, 0xf6, 0x16, 0x6c, 0x8d, 0xf7, 0xa0, 0x96, 0x12, 0x15, 0x56, 0xf1, 0x0f, 0x01, 0xf8, 0x37,
	0xe1, 0x43, 0x91, 0xf4, 0xbb, 0xa1, 0xd8, 0xfe, 0x2b, 0x26, 0x7b, 0x66, 0xac, 0x2e, 0x3c, 0xdb,
	0x17, 0xa1, 0xc8, 0x1b, 0x74, 0xca, 0xd5, 0x97, 0x29, 0x59, 0x34, 0x56, 0x02, 0xe3, 0x37, 0x25,
	0xa8, 0xa5, 0xbe, 0x92, 0xa3, 0xf7, 0x53, 0x17, 0x8c, 0xa4, 0x04, 0xcc, 0x2c, 0x92, 0xcf, 0x39,
	0xe8, 0x23, 0xa8, 0xb3, 0x0a, 0x61, 0xe0, 0xf1, 0xb2, 0x18, 0x2f, 0x18, 0x5f, 0x53, 0x2f, 0x1a,
	0x7d, 0x65, 0x98, 0x39, 0xb8, 0xa1, 0x7c, 0xa6, 0xd3, 0xe8, 0xc4, 0x44, 0xe6, 0xb0, 0x4e, 0x4c,
	0x90, 0x01, 0x0d, 0x56, 0x61, 0x09, 0x1c, 0x7e, 0xeb, 0x17, 0x19, 0x7c, 0xcd, 0x89, 0x49, 0x2f,
	0x70, 0xd8, 0x25, 0x1f, 0xad, 0x40, 0x4d, 0xd9, 0xb8, 0xa1, 0xac, 0xbc, 0x0b, 0x8b, 0x6e, 0x48,
	0x93, 0xa2, 0xd8, 0x1e, 0x60, 0x2b, 0x1e, 0x1e, 0xf9, 0x98, 0xb0, 0x2f, 0x82, 0x15, 0x13, 0xa8,
	0xe8, 0x80, 0x49, 0xd0, 0x7b, 0x50, 0xa7, 0xe9, 0x4a, 0x30, 0x24, 0x27, 0x81, 0xeb, 0x9f, 0xb0,
	0xea, 0x6b, 0xc5, 0xac, 0xf9, 0x36, 0xd9, 0x13, 0x22, 0x74, 0x17, 0x9a, 0x5e, 0xd0, 0xb7, 0x3d,
	0x4b, 0xde, 0x2d, 0x58, 0xf9, 0xb5, 0x62, 0x36, 0x98, 0x54, 0x6e, 0xae, 0x68, 0x0d, 0x6a, 0x84,
	0xad, 0x00, 0x1f, 0x34, 0xff, 0xef, 0x8f, 0x1c, 0x74, 0xb2, 0x36, 0x26, 0x10, 0xf5, 0x6c, 0xdc,
	0x12, 0xd3, 0x2b, 0x62, 0x41, 0xcc, 0x41, 0x49, 0xcd, 0x81, 0xf1, 0xef, 0x1a, 0x2c, 0x8d, 0xfd,
	0xd7, 0x00, 0x0b, 0x04, 0x7a, 0xb7, 0x93, 0x81, 0x40, 0xef, 0x80, 0xe2, 0x2e, 0x50, 0x4a, 0xee,
	0x02, 0x99, 0xed, 0x72, 0x32, 0xbb, 0x5d, 0xa2, 0x55, 0xd0, 0x43, 0x3b, 0xc2, 0x3e, 0xb1, 0x1c,
	0xcc, 0x6a, 0x19, 0x6e, 0x28, 0xe6, 0xb9, 0xc9, 0xe5, 0x1d, 0x26, 0xee, 0x86, 0xc6, 0xc3, 0x42,
	0x26, 0x82, 0x79, 0x01, 0x13, 0xe3, 0x7b, 0x0d, 0x16, 0xc7, 0xfc, 0xb3, 0xe0, 0xca, 0xed, 0x3d,
	0x7b, 0xfc, 0x94, 0x72, 0xc7, 0x0f, 0x4d, 0xe4, 0x5c, 0x9f, 0xe0, 0xe8, 0xd8, 0x66, 0x6c, 0xb3,
	0x03, 0xbb, 0xa6, 0x54, 0x32, 0xf3, 0x33, 0x9e, 0x14, 0xb0, 0x78, 0xf3, 0x21, 0x63, 0xfc, 0x52,
	0x83, 0xf9, 0xc2, 0x3f, 0x17, 0xa0, 0x35, 0x98, 0x97, 0x85, 0x9f, 0xbe, 0x37, 0x8c, 0x09, 0x8e,
	0x2c, 0xba, 0xe1, 0xcb, 0xc2, 0xc5, 0xac, 0x50, 0x6e, 0x71, 0xdd, 0x16, 0x55, 0xa1, 0xc7, 0xc9,
	0xff, 0x6c, 0xf0, 0x05, 0xc1, 0x91, 0x6f, 0x7b, 0xc2, 0xa9, 0x24, 0x3e, 0x4c, 0x70, 0xed, 0xb6,
	0x50, 0x72, 0xaf, 0xbf, 0x83, 0x65, 0xe9, 0x45, 0x43, 0xec, 0xc8, 0xf6, 0x6c, 0xbf, 0xaf, 0xba,
	0xe3, 0x69, 0x60, 0x5b, 0x58, 0xec, 0xa6, 0x0c, 0x98, 0xf7, 0xfd, 0x55, 0xa8, 0xaa, 0x8f, 0x33,
	0x68, 0x06, 0x26, 0x37, 0x7a, 0x5f, 0xeb, 0x13, 0xa8, 0x02, 0x53, 0xdd, 0xfd, 0x57, 0x8f, 0xf5,
	0x29, 0xf1, 0xb4, 0xae, 0x97, 0xef, 0xff, 0x87, 0x06, 0x55, 0xf5, 0x12, 0xa3, 0x06, 0x54, 0xb7,
	0xba, 0x1d, 0xd3, 0xea, 0xf6, 0x3e, 0xdb, 0xd3, 0x27, 0xd0, 0x2c, 0xb4, 0xcc, 0xed, 0x97, 0x7b,
	0x87, 0xdb, 0xd6, 0x57, 0x7b, 0xe6, 0x17, 0xbb, 0x7b, 0x1b, 0x1d, 0x5d, 0x43, 0x2d, 0xa8, 0x09,
	0xe1, 0xce, 0xde, 0xc1, 0xa1, 0x5e, 0x42, 0x08, 0x9a, 0xbb, 0x7b, 0x5b, 0x1b, 0xbb, 0x89, 0xd1,
	0x24, 0x6a, 0x02, 0x70, 0x19, 0xb3, 0x99, 0x42, 0xd7, 0xa0, 0x21, 0x9c, 0x0e, 0xbf, 0xec, 0xf5,
	0xb6, 0x77, 0xf5, 0x69, 0xa4, 0x43, 0x9d, 0x9b, 0x08, 0x49, 0xf9, 0xfe, 0x33, 0x80, 0x64, 0x87,
	0xa0, 0x1c, 0x7b, 0x7b, 0xbd, 0x6d, 0x7d, 0x02, 0xd5, 0xa1, 0xd2, 0xdb, 0xb3, 0xb6, 0x7b, 0x5b,
	0x1b, 0xfb, 0xba, 0x86, 0xaa, 0x30, 0xcd, 0x82, 0x51, 0x2f, 0xf1, 0x61, 0x74, 0xf7, 0xf5, 0xc9,
	0xb5, 0xe7, 0x00, 0xfc, 0x73, 0x1c, 0xfb, 0x83, 0xe7, 0x23, 0x98, 0x62, 0xbf, 0x72, 0x53, 0x4d,
	0xfd, 0xbf, 0x74, 0x59, 0xca, 0x52, 0xff, 0x31, 0x7d, 0xa4, 0x6d, 0x2e, 0xfe, 0xf8, 0xf3, 0x8a,
	0xf6, 0xeb, 0x9f, 0x57, 0xb4, 0xdf, 0xfe, 0xbc, 0xa2, 0xfd, 0xf0, 0xfb, 0x95, 0x89, 0x7f, 0x98,
	0x66, 0xdf, 0x2e, 0x8e, 0xca, 0xec, 0xe7, 0xa3, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xef, 0x43,
	0xfe, 0x9e, 0xc1, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicySyncClient is the client API for PolicySync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicySyncClient interface {
	// On this API, only the following payloads will be sent:
	//  - InSync
	//  - IPSetUpdate
	//  - IPSetDeltaUpdate
	//  - IPSetRemove
	//  - ActiveProfileUpdate
	//  - ActiveProfileRemove
	//  - ActivePolicyUpdate
	//  - ActivePolicyRemove
	//  - WorkloadEndpointUpdate
	//  - WorkloadEndpointRemove
	//  - ServiceAccountUpdate
	//  - ServiceAccountRemove
	//  - NamespaceUpdate
	//  - NamespaceRemove
	//  - RouteUpdate
	//  - RouteRemove
	//  - VXLANTunnelEndpointUpdate
	//  - VXLANTunnelEndpointRemove
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (PolicySync_SyncClient, error)
}

type policySyncClient struct {
	cc *grpc.ClientConn
}

func NewPolicySyncClient(cc *grpc.ClientConn) PolicySyncClient {
	return &policySyncClient{cc}
}

func (c *policySyncClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (PolicySync_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PolicySync_serviceDesc.Streams[0], "/felix.PolicySync/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &policySyncSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolicySync_SyncClient interface {
	Recv() (*ToDataplane, error)
	grpc.ClientStream
}

type policySyncSyncClient struct {
	grpc.ClientStream
}

func (x *policySyncSyncClient) Recv() (*ToDataplane, error) {
	m := new(ToDataplane)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PolicySyncServer is the server API for PolicySync service.
type PolicySyncServer interface {
	// On this API, only the following payloads will be sent:
	//  - InSync
	//  - IPSetUpdate
	//  - IPSetDeltaUpdate
	//  - IPSetRemove
	//  - ActiveProfileUpdate
	//  - ActiveProfileRemove
	//  - ActivePolicyUpdate
	//  - ActivePolicyRemove
	//  - WorkloadEndpointUpdate
	//  - WorkloadEndpointRemove
	//  - ServiceAccountUpdate
	//  - ServiceAccountRemove
	//  - NamespaceUpdate
	//  - NamespaceRemove
	//  - RouteUpdate
	//  - RouteRemove
	//  - VXLANTunnelEndpointUpdate
	//  - VXLANTunnelEndpointRemove
	Sync(*SyncRequest, PolicySync_SyncServer) error
}

// UnimplementedPolicySyncServer can be embedded to have forward compatible implementations.
type UnimplementedPolicySyncServer struct {
}

func (*UnimplementedPolicySyncServer) Sync(req *SyncRequest, srv PolicySync_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterPolicySyncServer(s *grpc.Server, srv PolicySyncServer) {
	s.RegisterService(&_PolicySync_serviceDesc, srv)
}

func _PolicySync_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolicySyncServer).Sync(m, &policySyncSyncServer{stream})
}

type PolicySync_SyncServer interface {
	Send(*ToDataplane) error
	grpc.ServerStream
}

type policySyncSyncServer struct {
	grpc.ServerStream
}

func (x *policySyncSyncServer) Send(m *ToDataplane) error {
	return x.ServerStream.SendMsg(m)
}

var _PolicySync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "felix.PolicySync",
	HandlerType: (*PolicySyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _PolicySync_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "felixbackend.proto",
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ToDataplane) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToDataplane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x78
	}
	return len(dAtA) - i, nil
}

func (m *ToDataplane_InSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_InSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InSync != nil {
		{
			size, err := m.InSync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_IpsetUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_IpsetUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpsetUpdate != nil {
		{
			size, err := m.IpsetUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_IpsetDeltaUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_IpsetDeltaUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpsetDeltaUpdate != nil {
		{
			size, err := m.IpsetDeltaUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_IpsetRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_IpsetRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpsetRemove != nil {
		{
			size, err := m.IpsetRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ActiveProfileUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ActiveProfileUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveProfileUpdate != nil {
		{
			size, err := m.ActiveProfileUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ActiveProfileRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ActiveProfileRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveProfileRemove != nil {
		{
			size, err := m.ActiveProfileRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ActivePolicyUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ActivePolicyUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivePolicyUpdate != nil {
		{
			size, err := m.ActivePolicyUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ActivePolicyRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ActivePolicyRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActivePolicyRemove != nil {
		{
			size, err := m.ActivePolicyRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_HostEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_HostEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostEndpointUpdate != nil {
		{
			size, err := m.HostEndpointUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_HostEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_HostEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostEndpointRemove != nil {
		{
			size, err := m.HostEndpointRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_WorkloadEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_WorkloadEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkloadEndpointUpdate != nil {
		{
			size, err := m.WorkloadEndpointUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_WorkloadEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_WorkloadEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkloadEndpointRemove != nil {
		{
			size, err := m.WorkloadEndpointRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigUpdate != nil {
		{
			size, err := m.ConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_HostMetadataUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_HostMetadataUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostMetadataUpdate != nil {
		{
			size, err := m.HostMetadataUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_IpamPoolUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_IpamPoolUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpamPoolUpdate != nil {
		{
			size, err := m.IpamPoolUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_IpamPoolRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_IpamPoolRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpamPoolRemove != nil {
		{
			size, err := m.IpamPoolRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_HostMetadataRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_HostMetadataRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostMetadataRemove != nil {
		{
			size, err := m.HostMetadataRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ServiceAccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ServiceAccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceAccountUpdate != nil {
		{
			size, err := m.ServiceAccountUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_ServiceAccountRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_ServiceAccountRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceAccountRemove != nil {
		{
			size, err := m.ServiceAccountRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_NamespaceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_NamespaceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamespaceUpdate != nil {
		{
			size, err := m.NamespaceUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_NamespaceRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_NamespaceRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamespaceRemove != nil {
		{
			size, err := m.NamespaceRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_RouteUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_RouteUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteUpdate != nil {
		{
			size, err := m.RouteUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_RouteRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_RouteRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RouteRemove != nil {
		{
			size, err := m.RouteRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_VtepUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_VtepUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VtepUpdate != nil {
		{
			size, err := m.VtepUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_VtepRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_VtepRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VtepRemove != nil {
		{
			size, err := m.VtepRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_WireguardEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_WireguardEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WireguardEndpointUpdate != nil {
		{
			size, err := m.WireguardEndpointUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_WireguardEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_WireguardEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WireguardEndpointRemove != nil {
		{
			size, err := m.WireguardEndpointRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ToDataplane_GlobalBgpConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToDataplane_GlobalBgpConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalBgpConfigUpdate != nil {
		{
			size, err := m.GlobalBgpConfigUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FromDataplane) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x40
	}
	return len(dAtA) - i, nil
}

func (m *FromDataplane_ProcessStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_ProcessStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProcessStatusUpdate != nil {
		{
			size, err := m.ProcessStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane_HostEndpointStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_HostEndpointStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostEndpointStatusUpdate != nil {
		{
			size, err := m.HostEndpointStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane_HostEndpointStatusRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_HostEndpointStatusRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HostEndpointStatusRemove != nil {
		{
			size, err := m.HostEndpointStatusRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane_WorkloadEndpointStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_WorkloadEndpointStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkloadEndpointStatusUpdate != nil {
		{
			size, err := m.WorkloadEndpointStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane_WorkloadEndpointStatusRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_WorkloadEndpointStatusRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WorkloadEndpointStatusRemove != nil {
		{
			size, err := m.WorkloadEndpointStatusRemove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *FromDataplane_WireguardStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FromDataplane_WireguardStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WireguardStatusUpdate != nil {
		{
			size, err := m.WireguardStatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Config) > 0 {
		for k := range m.Config {
			v := m.Config[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFelixbackend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *IPSetUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSetUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPSetUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPSetDeltaUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSetDeltaUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPSetDeltaUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemovedMembers) > 0 {
		for iNdEx := len(m.RemovedMembers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemovedMembers[iNdEx])
			copy(dAtA[i:], m.RemovedMembers[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.RemovedMembers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddedMembers) > 0 {
		for iNdEx := len(m.AddedMembers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddedMembers[iNdEx])
			copy(dAtA[i:], m.AddedMembers[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.AddedMembers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPSetRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSetRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPSetRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveProfileUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveProfileUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveProfileUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveProfileRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveProfileRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveProfileRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProfileID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OutboundRules) > 0 {
		for iNdEx := len(m.OutboundRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InboundRules) > 0 {
		for iNdEx := len(m.InboundRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActivePolicyUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePolicyUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePolicyUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivePolicyRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivePolicyRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivePolicyRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tier) > 0 {
		i -= len(m.Tier)
		copy(dAtA[i:], m.Tier)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Tier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PreDnat {
		i--
		if m.PreDnat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Untracked {
		i--
		if m.Untracked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OutboundRules) > 0 {
		for iNdEx := len(m.OutboundRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InboundRules) > 0 {
		for iNdEx := len(m.InboundRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InboundRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Rule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RuleId) > 0 {
		i -= len(m.RuleId)
		copy(dAtA[i:], m.RuleId)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.RuleId)))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if len(m.OriginalSrcServiceNamespace) > 0 {
		i -= len(m.OriginalSrcServiceNamespace)
		copy(dAtA[i:], m.OriginalSrcServiceNamespace)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalSrcServiceNamespace)))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xaa
	}
	if len(m.OriginalSrcService) > 0 {
		i -= len(m.OriginalSrcService)
		copy(dAtA[i:], m.OriginalSrcService)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalSrcService)))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	if len(m.OriginalDstServiceNamespace) > 0 {
		i -= len(m.OriginalDstServiceNamespace)
		copy(dAtA[i:], m.OriginalDstServiceNamespace)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalDstServiceNamespace)))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	if len(m.OriginalDstService) > 0 {
		i -= len(m.OriginalDstService)
		copy(dAtA[i:], m.OriginalDstService)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalDstService)))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x92
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xda
	}
	if m.HttpMatch != nil {
		{
			size, err := m.HttpMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd2
	}
	if m.DstServiceAccountMatch != nil {
		{
			size, err := m.DstServiceAccountMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xca
	}
	if m.SrcServiceAccountMatch != nil {
		{
			size, err := m.SrcServiceAccountMatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	if len(m.OriginalNotDstSelector) > 0 {
		i -= len(m.OriginalNotDstSelector)
		copy(dAtA[i:], m.OriginalNotDstSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalNotDstSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xba
	}
	if len(m.OriginalNotSrcSelector) > 0 {
		i -= len(m.OriginalNotSrcSelector)
		copy(dAtA[i:], m.OriginalNotSrcSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalNotSrcSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb2
	}
	if len(m.OriginalDstNamespaceSelector) > 0 {
		i -= len(m.OriginalDstNamespaceSelector)
		copy(dAtA[i:], m.OriginalDstNamespaceSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalDstNamespaceSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xaa
	}
	if len(m.OriginalSrcNamespaceSelector) > 0 {
		i -= len(m.OriginalSrcNamespaceSelector)
		copy(dAtA[i:], m.OriginalSrcNamespaceSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalSrcNamespaceSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if len(m.OriginalDstSelector) > 0 {
		i -= len(m.OriginalDstSelector)
		copy(dAtA[i:], m.OriginalDstSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalDstSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	if len(m.OriginalSrcSelector) > 0 {
		i -= len(m.OriginalSrcSelector)
		copy(dAtA[i:], m.OriginalSrcSelector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OriginalSrcSelector)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	if len(m.NotDstNamedPortIpSetIds) > 0 {
		for iNdEx := len(m.NotDstNamedPortIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotDstNamedPortIpSetIds[iNdEx])
			copy(dAtA[i:], m.NotDstNamedPortIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotDstNamedPortIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x7
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.NotSrcNamedPortIpSetIds) > 0 {
		for iNdEx := len(m.NotSrcNamedPortIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotSrcNamedPortIpSetIds[iNdEx])
			copy(dAtA[i:], m.NotSrcNamedPortIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotSrcNamedPortIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x7
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.NotDstIpSetIds) > 0 {
		for iNdEx := len(m.NotDstIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotDstIpSetIds[iNdEx])
			copy(dAtA[i:], m.NotDstIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotDstIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.NotSrcIpSetIds) > 0 {
		for iNdEx := len(m.NotSrcIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotSrcIpSetIds[iNdEx])
			copy(dAtA[i:], m.NotSrcIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotSrcIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xea
		}
	}
	if m.NotIcmp != nil {
		{
			size := m.NotIcmp.Size()
			i -= size
			if _, err := m.NotIcmp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.NotDstPorts) > 0 {
		for iNdEx := len(m.NotDstPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotDstPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.NotDstNet) > 0 {
		for iNdEx := len(m.NotDstNet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotDstNet[iNdEx])
			copy(dAtA[i:], m.NotDstNet[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotDstNet[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.NotSrcPorts) > 0 {
		for iNdEx := len(m.NotSrcPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NotSrcPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.NotSrcNet) > 0 {
		for iNdEx := len(m.NotSrcNet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotSrcNet[iNdEx])
			copy(dAtA[i:], m.NotSrcNet[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.NotSrcNet[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xba
		}
	}
	if m.NotProtocol != nil {
		{
			size, err := m.NotProtocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.DstIpPortSetIds) > 0 {
		for iNdEx := len(m.DstIpPortSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DstIpPortSetIds[iNdEx])
			copy(dAtA[i:], m.DstIpPortSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstIpPortSetIds[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.DstNamedPortIpSetIds) > 0 {
		for iNdEx := len(m.DstNamedPortIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DstNamedPortIpSetIds[iNdEx])
			copy(dAtA[i:], m.DstNamedPortIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstNamedPortIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.SrcNamedPortIpSetIds) > 0 {
		for iNdEx := len(m.SrcNamedPortIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SrcNamedPortIpSetIds[iNdEx])
			copy(dAtA[i:], m.SrcNamedPortIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.SrcNamedPortIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.DstIpSetIds) > 0 {
		for iNdEx := len(m.DstIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DstIpSetIds[iNdEx])
			copy(dAtA[i:], m.DstIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.SrcIpSetIds) > 0 {
		for iNdEx := len(m.SrcIpSetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SrcIpSetIds[iNdEx])
			copy(dAtA[i:], m.SrcIpSetIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.SrcIpSetIds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Icmp != nil {
		{
			size := m.Icmp.Size()
			i -= size
			if _, err := m.Icmp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DstPorts) > 0 {
		for iNdEx := len(m.DstPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DstPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DstNet) > 0 {
		for iNdEx := len(m.DstNet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DstNet[iNdEx])
			copy(dAtA[i:], m.DstNet[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstNet[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SrcPorts) > 0 {
		for iNdEx := len(m.SrcPorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SrcPorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SrcNet) > 0 {
		for iNdEx := len(m.SrcNet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SrcNet[iNdEx])
			copy(dAtA[i:], m.SrcNet[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.SrcNet[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IpVersion != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.IpVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rule_IcmpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule_IcmpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFelixbackend(dAtA, i, uint64(m.IcmpType))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *Rule_IcmpTypeCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule_IcmpTypeCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IcmpTypeCode != nil {
		{
			size, err := m.IcmpTypeCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Rule_NotIcmpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule_NotIcmpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFelixbackend(dAtA, i, uint64(m.NotIcmpType))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *Rule_NotIcmpTypeCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule_NotIcmpTypeCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotIcmpTypeCode != nil {
		{
			size, err := m.NotIcmpTypeCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ServiceAccountMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Paths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Methods) > 0 {
		for iNdEx := len(m.Methods) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Methods[iNdEx])
			copy(dAtA[i:], m.Methods[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Methods[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HTTPMatch_PathMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPMatch_PathMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPMatch_PathMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PathMatch != nil {
		{
			size := m.PathMatch.Size()
			i -= size
			if _, err := m.PathMatch.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *HTTPMatch_PathMatch_Exact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPMatch_PathMatch_Exact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Exact)
	copy(dAtA[i:], m.Exact)
	i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Exact)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *HTTPMatch_PathMatch_Prefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPMatch_PathMatch_Prefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Prefix)
	copy(dAtA[i:], m.Prefix)
	i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Prefix)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RuleMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuleMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuleMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFelixbackend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IcmpTypeAndCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IcmpTypeAndCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IcmpTypeAndCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumberOrName != nil {
		{
			size := m.NumberOrName.Size()
			i -= size
			if _, err := m.NumberOrName.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Protocol_Number) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_Number) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintFelixbackend(dAtA, i, uint64(m.Number))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *Protocol_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *PortRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Last != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.Last))
		i--
		dAtA[i] = 0x10
	}
	if m.First != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.First))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpointID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpointID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpointID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndpointId) > 0 {
		i -= len(m.EndpointId)
		copy(dAtA[i:], m.EndpointId)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.EndpointId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkloadId) > 0 {
		i -= len(m.WorkloadId)
		copy(dAtA[i:], m.WorkloadId)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.WorkloadId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorId) > 0 {
		i -= len(m.OrchestratorId)
		copy(dAtA[i:], m.OrchestratorId)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.OrchestratorId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpointUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv6Nat) > 0 {
		for iNdEx := len(m.Ipv6Nat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ipv6Nat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Ipv4Nat) > 0 {
		for iNdEx := len(m.Ipv4Nat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ipv4Nat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Ipv6Nets) > 0 {
		for iNdEx := len(m.Ipv6Nets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv6Nets[iNdEx])
			copy(dAtA[i:], m.Ipv6Nets[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Ipv6Nets[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Ipv4Nets) > 0 {
		for iNdEx := len(m.Ipv4Nets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ipv4Nets[iNdEx])
			copy(dAtA[i:], m.Ipv4Nets[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Ipv4Nets[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ProfileIds) > 0 {
		for iNdEx := len(m.ProfileIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfileIds[iNdEx])
			copy(dAtA[i:], m.ProfileIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ProfileIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Mac) > 0 {
		i -= len(m.Mac)
		copy(dAtA[i:], m.Mac)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Mac)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpointRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpointID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpointID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpointID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EndpointId) > 0 {
		i -= len(m.EndpointId)
		copy(dAtA[i:], m.EndpointId)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.EndpointId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpointUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Endpoint != nil {
		{
			size, err := m.Endpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ForwardTiers) > 0 {
		for iNdEx := len(m.ForwardTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PreDnatTiers) > 0 {
		for iNdEx := len(m.PreDnatTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreDnatTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.UntrackedTiers) > 0 {
		for iNdEx := len(m.UntrackedTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UntrackedTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ExpectedIpv6Addrs) > 0 {
		for iNdEx := len(m.ExpectedIpv6Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpectedIpv6Addrs[iNdEx])
			copy(dAtA[i:], m.ExpectedIpv6Addrs[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ExpectedIpv6Addrs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ExpectedIpv4Addrs) > 0 {
		for iNdEx := len(m.ExpectedIpv4Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExpectedIpv4Addrs[iNdEx])
			copy(dAtA[i:], m.ExpectedIpv4Addrs[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ExpectedIpv4Addrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Tiers) > 0 {
		for iNdEx := len(m.Tiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFelixbackend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProfileIds) > 0 {
		for iNdEx := len(m.ProfileIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfileIds[iNdEx])
			copy(dAtA[i:], m.ProfileIds[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ProfileIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpointRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TierInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EgressPolicies) > 0 {
		for iNdEx := len(m.EgressPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EgressPolicies[iNdEx])
			copy(dAtA[i:], m.EgressPolicies[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.EgressPolicies[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IngressPolicies) > 0 {
		for iNdEx := len(m.IngressPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IngressPolicies[iNdEx])
			copy(dAtA[i:], m.IngressPolicies[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.IngressPolicies[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IntIp) > 0 {
		i -= len(m.IntIp)
		copy(dAtA[i:], m.IntIp)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.IntIp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtIp) > 0 {
		i -= len(m.ExtIp)
		copy(dAtA[i:], m.ExtIp)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ExtIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uptime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Uptime))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.IsoTimestamp) > 0 {
		i -= len(m.IsoTimestamp)
		copy(dAtA[i:], m.IsoTimestamp)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.IsoTimestamp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpointStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpointStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpointStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostEndpointStatusRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostEndpointStatusRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostEndpointStatusRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpointStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpointStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpointStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadEndpointStatusRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadEndpointStatusRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadEndpointStatusRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WireguardStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireguardStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WireguardStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostMetadataUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostMetadataUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostMetadataRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostMetadataRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPAMPoolUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMPoolUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAMPoolUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPAMPoolRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMPoolRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAMPoolRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IPAMPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPAMPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Masquerade {
		i--
		if m.Masquerade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cidr) > 0 {
		i -= len(m.Cidr)
		copy(dAtA[i:], m.Cidr)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Cidr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAccountUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFelixbackend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAccountRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAccountID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFelixbackend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TunnelType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TunnelType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Wireguard {
		i--
		if m.Wireguard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Vxlan {
		i--
		if m.Vxlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Ipip {
		i--
		if m.Ipip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TunnelType != nil {
		{
			size, err := m.TunnelType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFelixbackend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.LocalWorkload {
		i--
		if m.LocalWorkload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.NatOutgoing {
		i--
		if m.NatOutgoing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SameSubnet {
		i--
		if m.SameSubnet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.DstNodeIp) > 0 {
		i -= len(m.DstNodeIp)
		copy(dAtA[i:], m.DstNodeIp)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstNodeIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DstNodeName) > 0 {
		i -= len(m.DstNodeName)
		copy(dAtA[i:], m.DstNodeName)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.DstNodeName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dst) > 0 {
		i -= len(m.Dst)
		copy(dAtA[i:], m.Dst)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Dst)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IpPoolType != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.IpPoolType))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintFelixbackend(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Dst) > 0 {
		i -= len(m.Dst)
		copy(dAtA[i:], m.Dst)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Dst)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *VXLANTunnelEndpointUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VXLANTunnelEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VXLANTunnelEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParentDeviceIp) > 0 {
		i -= len(m.ParentDeviceIp)
		copy(dAtA[i:], m.ParentDeviceIp)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ParentDeviceIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ipv4Addr) > 0 {
		i -= len(m.Ipv4Addr)
		copy(dAtA[i:], m.Ipv4Addr)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Ipv4Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mac) > 0 {
		i -= len(m.Mac)
		copy(dAtA[i:], m.Mac)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Mac)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VXLANTunnelEndpointRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VXLANTunnelEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VXLANTunnelEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WireguardEndpointUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireguardEndpointUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WireguardEndpointUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InterfaceIpv4Addr) > 0 {
		i -= len(m.InterfaceIpv4Addr)
		copy(dAtA[i:], m.InterfaceIpv4Addr)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.InterfaceIpv4Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WireguardEndpointRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireguardEndpointRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WireguardEndpointRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalBGPConfigUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalBGPConfigUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalBGPConfigUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceLoadbalancerCidrs) > 0 {
		for iNdEx := len(m.ServiceLoadbalancerCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceLoadbalancerCidrs[iNdEx])
			copy(dAtA[i:], m.ServiceLoadbalancerCidrs[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ServiceLoadbalancerCidrs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ServiceExternalCidrs) > 0 {
		for iNdEx := len(m.ServiceExternalCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceExternalCidrs[iNdEx])
			copy(dAtA[i:], m.ServiceExternalCidrs[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ServiceExternalCidrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceClusterCidrs) > 0 {
		for iNdEx := len(m.ServiceClusterCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceClusterCidrs[iNdEx])
			copy(dAtA[i:], m.ServiceClusterCidrs[iNdEx])
			i = encodeVarintFelixbackend(dAtA, i, uint64(len(m.ServiceClusterCidrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFelixbackend(dAtA []byte, offset int, v uint64) int {
	offset -= sovFelixbackend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToDataplane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovFelixbackend(uint64(m.SequenceNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ToDataplane_InSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InSync != nil {
		l = m.InSync.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_IpsetUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpsetUpdate != nil {
		l = m.IpsetUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_IpsetDeltaUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpsetDeltaUpdate != nil {
		l = m.IpsetDeltaUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_IpsetRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpsetRemove != nil {
		l = m.IpsetRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ActiveProfileUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveProfileUpdate != nil {
		l = m.ActiveProfileUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ActiveProfileRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveProfileRemove != nil {
		l = m.ActiveProfileRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ActivePolicyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivePolicyUpdate != nil {
		l = m.ActivePolicyUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ActivePolicyRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivePolicyRemove != nil {
		l = m.ActivePolicyRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_HostEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostEndpointUpdate != nil {
		l = m.HostEndpointUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_HostEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostEndpointRemove != nil {
		l = m.HostEndpointRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_WorkloadEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkloadEndpointUpdate != nil {
		l = m.WorkloadEndpointUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_WorkloadEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkloadEndpointRemove != nil {
		l = m.WorkloadEndpointRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigUpdate != nil {
		l = m.ConfigUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_HostMetadataUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostMetadataUpdate != nil {
		l = m.HostMetadataUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_IpamPoolUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpamPoolUpdate != nil {
		l = m.IpamPoolUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_IpamPoolRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpamPoolRemove != nil {
		l = m.IpamPoolRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_HostMetadataRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostMetadataRemove != nil {
		l = m.HostMetadataRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ServiceAccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceAccountUpdate != nil {
		l = m.ServiceAccountUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_ServiceAccountRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceAccountRemove != nil {
		l = m.ServiceAccountRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_NamespaceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceUpdate != nil {
		l = m.NamespaceUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_NamespaceRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceRemove != nil {
		l = m.NamespaceRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_RouteUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteUpdate != nil {
		l = m.RouteUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_RouteRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteRemove != nil {
		l = m.RouteRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_VtepUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VtepUpdate != nil {
		l = m.VtepUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_VtepRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VtepRemove != nil {
		l = m.VtepRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_WireguardEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WireguardEndpointUpdate != nil {
		l = m.WireguardEndpointUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_WireguardEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WireguardEndpointRemove != nil {
		l = m.WireguardEndpointRemove.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ToDataplane_GlobalBgpConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalBgpConfigUpdate != nil {
		l = m.GlobalBgpConfigUpdate.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovFelixbackend(uint64(m.SequenceNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FromDataplane_ProcessStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessStatusUpdate != nil {
		l = m.ProcessStatusUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane_HostEndpointStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostEndpointStatusUpdate != nil {
		l = m.HostEndpointStatusUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane_HostEndpointStatusRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostEndpointStatusRemove != nil {
		l = m.HostEndpointStatusRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane_WorkloadEndpointStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkloadEndpointStatusUpdate != nil {
		l = m.WorkloadEndpointStatusUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane_WorkloadEndpointStatusRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkloadEndpointStatusRemove != nil {
		l = m.WorkloadEndpointStatusRemove.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *FromDataplane_WireguardStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WireguardStatusUpdate != nil {
		l = m.WireguardStatusUpdate.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFelixbackend(uint64(len(k))) + 1 + len(v) + sovFelixbackend(uint64(len(v)))
			n += mapEntrySize + 1 + sovFelixbackend(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPSetUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovFelixbackend(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPSetDeltaUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.AddedMembers) > 0 {
		for _, s := range m.AddedMembers {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.RemovedMembers) > 0 {
		for _, s := range m.RemovedMembers {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPSetRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveProfileUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveProfileRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProfileID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundRules) > 0 {
		for _, e := range m.InboundRules {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.OutboundRules) > 0 {
		for _, e := range m.OutboundRules {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivePolicyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivePolicyRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tier)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InboundRules) > 0 {
		for _, e := range m.InboundRules {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.OutboundRules) > 0 {
		for _, e := range m.OutboundRules {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.Untracked {
		n += 2
	}
	if m.PreDnat {
		n += 2
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.IpVersion != 0 {
		n += 1 + sovFelixbackend(uint64(m.IpVersion))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.SrcNet) > 0 {
		for _, s := range m.SrcNet {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.SrcPorts) > 0 {
		for _, e := range m.SrcPorts {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.DstNet) > 0 {
		for _, s := range m.DstNet {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.DstPorts) > 0 {
		for _, e := range m.DstPorts {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.Icmp != nil {
		n += m.Icmp.Size()
	}
	if len(m.SrcIpSetIds) > 0 {
		for _, s := range m.SrcIpSetIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.DstIpSetIds) > 0 {
		for _, s := range m.DstIpSetIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.SrcNamedPortIpSetIds) > 0 {
		for _, s := range m.SrcNamedPortIpSetIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.DstNamedPortIpSetIds) > 0 {
		for _, s := range m.DstNamedPortIpSetIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.DstIpPortSetIds) > 0 {
		for _, s := range m.DstIpPortSetIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.NotProtocol != nil {
		l = m.NotProtocol.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if len(m.NotSrcNet) > 0 {
		for _, s := range m.NotSrcNet {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotSrcPorts) > 0 {
		for _, e := range m.NotSrcPorts {
			l = e.Size()
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotDstNet) > 0 {
		for _, s := range m.NotDstNet {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotDstPorts) > 0 {
		for _, e := range m.NotDstPorts {
			l = e.Size()
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.NotIcmp != nil {
		n += m.NotIcmp.Size()
	}
	if len(m.NotSrcIpSetIds) > 0 {
		for _, s := range m.NotSrcIpSetIds {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotDstIpSetIds) > 0 {
		for _, s := range m.NotDstIpSetIds {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotSrcNamedPortIpSetIds) > 0 {
		for _, s := range m.NotSrcNamedPortIpSetIds {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.NotDstNamedPortIpSetIds) > 0 {
		for _, s := range m.NotDstNamedPortIpSetIds {
			l = len(s)
			n += 2 + l + sovFelixbackend(uint64(l))
		}
	}
	l = len(m.OriginalSrcSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalDstSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalSrcNamespaceSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalDstNamespaceSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalNotSrcSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalNotDstSelector)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if m.SrcServiceAccountMatch != nil {
		l = m.SrcServiceAccountMatch.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if m.DstServiceAccountMatch != nil {
		l = m.DstServiceAccountMatch.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if m.HttpMatch != nil {
		l = m.HttpMatch.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalDstService)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalDstServiceNamespace)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalSrcService)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.OriginalSrcServiceNamespace)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.RuleId)
	if l > 0 {
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rule_IcmpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFelixbackend(uint64(m.IcmpType))
	return n
}
func (m *Rule_IcmpTypeCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IcmpTypeCode != nil {
		l = m.IcmpTypeCode.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *Rule_NotIcmpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovFelixbackend(uint64(m.NotIcmpType))
	return n
}
func (m *Rule_NotIcmpTypeCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotIcmpTypeCode != nil {
		l = m.NotIcmpTypeCode.Size()
		n += 2 + l + sovFelixbackend(uint64(l))
	}
	return n
}
func (m *ServiceAccountMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HTTPMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Methods) > 0 {
		for _, s := range m.Methods {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Paths) > 0 {
		for _, e := range m.Paths {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HTTPMatch_PathMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PathMatch != nil {
		n += m.PathMatch.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HTTPMatch_PathMatch_Exact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exact)
	n += 1 + l + sovFelixbackend(uint64(l))
	return n
}
func (m *HTTPMatch_PathMatch_Prefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	n += 1 + l + sovFelixbackend(uint64(l))
	return n
}
func (m *RuleMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFelixbackend(uint64(len(k))) + 1 + len(v) + sovFelixbackend(uint64(len(v)))
			n += mapEntrySize + 1 + sovFelixbackend(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IcmpTypeAndCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFelixbackend(uint64(m.Type))
	}
	if m.Code != 0 {
		n += 1 + sovFelixbackend(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOrName != nil {
		n += m.NumberOrName.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Protocol_Number) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFelixbackend(uint64(m.Number))
	return n
}
func (m *Protocol_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovFelixbackend(uint64(l))
	return n
}
func (m *PortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovFelixbackend(uint64(m.First))
	}
	if m.Last != 0 {
		n += 1 + sovFelixbackend(uint64(m.Last))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpointID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorId)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.WorkloadId)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.EndpointId)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Endpoint != nil {
		l = m.Endpoint.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.ProfileIds) > 0 {
		for _, s := range m.ProfileIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Ipv4Nets) > 0 {
		for _, s := range m.Ipv4Nets {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Ipv6Nets) > 0 {
		for _, s := range m.Ipv6Nets {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Ipv4Nat) > 0 {
		for _, e := range m.Ipv4Nat {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Ipv6Nat) > 0 {
		for _, e := range m.Ipv6Nat {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpointID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EndpointId)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Endpoint != nil {
		l = m.Endpoint.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.ProfileIds) > 0 {
		for _, s := range m.ProfileIds {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.Tiers) > 0 {
		for _, e := range m.Tiers {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.ExpectedIpv4Addrs) > 0 {
		for _, s := range m.ExpectedIpv4Addrs {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.ExpectedIpv6Addrs) > 0 {
		for _, s := range m.ExpectedIpv6Addrs {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.UntrackedTiers) > 0 {
		for _, e := range m.UntrackedTiers {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.PreDnatTiers) > 0 {
		for _, e := range m.PreDnatTiers {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.ForwardTiers) > 0 {
		for _, e := range m.ForwardTiers {
			l = e.Size()
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TierInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.IngressPolicies) > 0 {
		for _, s := range m.IngressPolicies {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.EgressPolicies) > 0 {
		for _, s := range m.EgressPolicies {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExtIp)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.IntIp)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IsoTimestamp)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Uptime != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpointStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndpointStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostEndpointStatusRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpointStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkloadEndpointStatusRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WireguardStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostMetadataUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostMetadataRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPAMPoolUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPAMPoolRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IPAMPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cidr)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.Masquerade {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceAccountUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFelixbackend(uint64(len(k))) + 1 + len(v) + sovFelixbackend(uint64(len(v)))
			n += mapEntrySize + 1 + sovFelixbackend(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceAccountRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceAccountID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamespaceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFelixbackend(uint64(len(k))) + 1 + len(v) + sovFelixbackend(uint64(len(v)))
			n += mapEntrySize + 1 + sovFelixbackend(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamespaceRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamespaceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TunnelType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipip {
		n += 2
	}
	if m.Vxlan {
		n += 2
	}
	if m.Wireguard {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RouteUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFelixbackend(uint64(m.Type))
	}
	if m.IpPoolType != 0 {
		n += 1 + sovFelixbackend(uint64(m.IpPoolType))
	}
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.DstNodeName)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.DstNodeIp)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.SameSubnet {
		n += 2
	}
	if m.NatOutgoing {
		n += 2
	}
	if m.LocalWorkload {
		n += 2
	}
	if m.TunnelType != nil {
		l = m.TunnelType.Size()
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RouteRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VXLANTunnelEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.Ipv4Addr)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.ParentDeviceIp)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VXLANTunnelEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WireguardEndpointUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	l = len(m.InterfaceIpv4Addr)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WireguardEndpointRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovFelixbackend(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalBGPConfigUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceClusterCidrs) > 0 {
		for _, s := range m.ServiceClusterCidrs {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.ServiceExternalCidrs) > 0 {
		for _, s := range m.ServiceExternalCidrs {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if len(m.ServiceLoadbalancerCidrs) > 0 {
		for _, s := range m.ServiceLoadbalancerCidrs {
			l = len(s)
			n += 1 + l + sovFelixbackend(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFelixbackend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFelixbackend(x uint64) (n int) {
	return sovFelixbackend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToDataplane) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToDataplane: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToDataplane: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InSync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InSync{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_InSync{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsetUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPSetUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_IpsetUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsetDeltaUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPSetDeltaUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_IpsetDeltaUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsetRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPSetRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_IpsetRemove{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveProfileUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveProfileUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ActiveProfileUpdate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveProfileRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveProfileRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ActiveProfileRemove{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePolicyUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivePolicyUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ActivePolicyUpdate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePolicyRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActivePolicyRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ActivePolicyRemove{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostEndpointUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostEndpointUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_HostEndpointUpdate{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostEndpointRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostEndpointRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_HostEndpointRemove{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadEndpointUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkloadEndpointUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_WorkloadEndpointUpdate{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadEndpointRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkloadEndpointRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_WorkloadEndpointRemove{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConfigUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ConfigUpdate{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostMetadataUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostMetadataUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_HostMetadataUpdate{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpamPoolUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPAMPoolUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_IpamPoolUpdate{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpamPoolRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPAMPoolRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_IpamPoolRemove{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostMetadataRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostMetadataRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_HostMetadataRemove{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceAccountUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ServiceAccountUpdate{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceAccountRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_ServiceAccountRemove{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NamespaceUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_NamespaceUpdate{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NamespaceRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_NamespaceRemove{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_RouteUpdate{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_RouteRemove{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtepUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VXLANTunnelEndpointUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_VtepUpdate{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VtepRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VXLANTunnelEndpointRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_VtepRemove{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WireguardEndpointUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WireguardEndpointUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_WireguardEndpointUpdate{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WireguardEndpointRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WireguardEndpointRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_WireguardEndpointRemove{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalBgpConfigUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GlobalBGPConfigUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ToDataplane_GlobalBgpConfigUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FromDataplane) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FromDataplane: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FromDataplane: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProcessStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_ProcessStatusUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostEndpointStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostEndpointStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_HostEndpointStatusUpdate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostEndpointStatusRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HostEndpointStatusRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_HostEndpointStatusRemove{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadEndpointStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkloadEndpointStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_WorkloadEndpointStatusUpdate{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadEndpointStatusRemove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WorkloadEndpointStatusRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_WorkloadEndpointStatusRemove{v}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WireguardStatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WireguardStatusUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &FromDataplane_WireguardStatusUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFelixbackend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFelixbackend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSetUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSetUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSetUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IPSetUpdate_IPSetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSetDeltaUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSetDeltaUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSetDeltaUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedMembers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedMembers = append(m.AddedMembers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedMembers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedMembers = append(m.RemovedMembers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSetRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSetRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSetRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveProfileUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveProfileUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveProfileUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ProfileID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveProfileRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveProfileRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveProfileRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ProfileID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundRules = append(m.InboundRules, &Rule{})
			if err := m.InboundRules[len(m.InboundRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundRules = append(m.OutboundRules, &Rule{})
			if err := m.OutboundRules[len(m.OutboundRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePolicyUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePolicyUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePolicyUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &PolicyID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivePolicyRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivePolicyRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivePolicyRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &PolicyID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundRules = append(m.InboundRules, &Rule{})
			if err := m.InboundRules[len(m.InboundRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundRules = append(m.OutboundRules, &Rule{})
			if err := m.OutboundRules[len(m.OutboundRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Untracked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Untracked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDnat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreDnat = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVersion", wireType)
			}
			m.IpVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpVersion |= IPVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNet = append(m.SrcNet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPorts = append(m.SrcPorts, &PortRange{})
			if err := m.SrcPorts[len(m.SrcPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstNet = append(m.DstNet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPorts = append(m.DstPorts, &PortRange{})
			if err := m.DstPorts[len(m.DstPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Icmp = &Rule_IcmpType{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpTypeCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IcmpTypeAndCode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Icmp = &Rule_IcmpTypeCode{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcIpSetIds = append(m.SrcIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstIpSetIds = append(m.DstIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNamedPortIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNamedPortIpSetIds = append(m.SrcNamedPortIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNamedPortIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstNamedPortIpSetIds = append(m.DstNamedPortIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIpPortSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstIpPortSetIds = append(m.DstIpPortSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotProtocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotProtocol == nil {
				m.NotProtocol = &Protocol{}
			}
			if err := m.NotProtocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSrcNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSrcNet = append(m.NotSrcNet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSrcPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSrcPorts = append(m.NotSrcPorts, &PortRange{})
			if err := m.NotSrcPorts[len(m.NotSrcPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotDstNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotDstNet = append(m.NotDstNet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotDstPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotDstPorts = append(m.NotDstPorts, &PortRange{})
			if err := m.NotDstPorts[len(m.NotDstPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIcmpType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotIcmp = &Rule_NotIcmpType{v}
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIcmpTypeCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IcmpTypeAndCode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NotIcmp = &Rule_NotIcmpTypeCode{v}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSrcIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSrcIpSetIds = append(m.NotSrcIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotDstIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotDstIpSetIds = append(m.NotDstIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSrcNamedPortIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSrcNamedPortIpSetIds = append(m.NotSrcNamedPortIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotDstNamedPortIpSetIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotDstNamedPortIpSetIds = append(m.NotDstNamedPortIpSetIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSrcSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSrcSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDstSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDstSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSrcNamespaceSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSrcNamespaceSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 117:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDstNamespaceSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDstNamespaceSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 118:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalNotSrcSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalNotSrcSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 119:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalNotDstSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalNotDstSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcServiceAccountMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcServiceAccountMatch == nil {
				m.SrcServiceAccountMatch = &ServiceAccountMatch{}
			}
			if err := m.SrcServiceAccountMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 121:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstServiceAccountMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstServiceAccountMatch == nil {
				m.DstServiceAccountMatch = &ServiceAccountMatch{}
			}
			if err := m.DstServiceAccountMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 122:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpMatch == nil {
				m.HttpMatch = &HTTPMatch{}
			}
			if err := m.HttpMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 123:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RuleMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 130:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDstService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDstService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDstServiceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalDstServiceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSrcService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSrcService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 133:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalSrcServiceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalSrcServiceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, &HTTPMatch_PathMatch{})
			if err := m.Paths[len(m.Paths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPMatch_PathMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathMatch = &HTTPMatch_PathMatch_Exact{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathMatch = &HTTPMatch_PathMatch_Prefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuleMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuleMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuleMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFelixbackend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFelixbackend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IcmpTypeAndCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IcmpTypeAndCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IcmpTypeAndCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumberOrName = &Protocol_Number{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumberOrName = &Protocol_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			m.Last = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpointID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpointID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpointID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpointUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpointUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpointUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &WorkloadEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &WorkloadEndpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileIds = append(m.ProfileIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Nets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Nets = append(m.Ipv4Nets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Nets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Nets = append(m.Ipv6Nets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &TierInfo{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Nat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Nat = append(m.Ipv4Nat, &NatInfo{})
			if err := m.Ipv4Nat[len(m.Ipv4Nat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Nat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Nat = append(m.Ipv6Nat, &NatInfo{})
			if err := m.Ipv6Nat[len(m.Ipv6Nat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpointRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpointRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpointRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &WorkloadEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpointID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpointID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpointID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpointUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpointUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpointUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &HostEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endpoint == nil {
				m.Endpoint = &HostEndpoint{}
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileIds = append(m.ProfileIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiers = append(m.Tiers, &TierInfo{})
			if err := m.Tiers[len(m.Tiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedIpv4Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedIpv4Addrs = append(m.ExpectedIpv4Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedIpv6Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedIpv6Addrs = append(m.ExpectedIpv6Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntrackedTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UntrackedTiers = append(m.UntrackedTiers, &TierInfo{})
			if err := m.UntrackedTiers[len(m.UntrackedTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDnatTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreDnatTiers = append(m.PreDnatTiers, &TierInfo{})
			if err := m.PreDnatTiers[len(m.PreDnatTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardTiers = append(m.ForwardTiers, &TierInfo{})
			if err := m.ForwardTiers[len(m.ForwardTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpointRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpointRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpointRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &HostEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TierInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressPolicies = append(m.IngressPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgressPolicies = append(m.EgressPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsoTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsoTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Uptime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpointStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpointStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpointStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &HostEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &EndpointStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostEndpointStatusRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostEndpointStatusRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostEndpointStatusRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &HostEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpointStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpointStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpointStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &WorkloadEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &EndpointStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadEndpointStatusRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadEndpointStatusRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadEndpointStatusRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &WorkloadEndpointID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireguardStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireguardStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireguardStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadataUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadataUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadataRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadataRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMPoolUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMPoolUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMPoolUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &IPAMPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMPoolRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMPoolRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMPoolRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masquerade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masquerade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ServiceAccountID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFelixbackend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFelixbackend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ServiceAccountID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &NamespaceID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFelixbackend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFelixbackend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFelixbackend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFelixbackend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &NamespaceID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipip = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vxlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vxlan = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wireguard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wireguard = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RouteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPoolType", wireType)
			}
			m.IpPoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpPoolType |= IPPoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNodeIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstNodeIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameSubnet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SameSubnet = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatOutgoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NatOutgoing = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalWorkload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalWorkload = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TunnelType == nil {
				m.TunnelType = &TunnelType{}
			}
			if err := m.TunnelType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VXLANTunnelEndpointUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VXLANTunnelEndpointUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VXLANTunnelEndpointUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentDeviceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentDeviceIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VXLANTunnelEndpointRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VXLANTunnelEndpointRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VXLANTunnelEndpointRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireguardEndpointUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireguardEndpointUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireguardEndpointUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceIpv4Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceIpv4Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WireguardEndpointRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireguardEndpointRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireguardEndpointRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalBGPConfigUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalBGPConfigUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalBGPConfigUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceClusterCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceClusterCidrs = append(m.ServiceClusterCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceExternalCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceExternalCidrs = append(m.ServiceExternalCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceLoadbalancerCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFelixbackend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceLoadbalancerCidrs = append(m.ServiceLoadbalancerCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFelixbackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFelixbackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFelixbackend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFelixbackend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFelixbackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFelixbackend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFelixbackend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFelixbackend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFelixbackend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFelixbackend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFelixbackend = fmt.Errorf("proto: unexpected end of group")
)
