//Version:1.6
syntax = "proto3";

option go_package = "./gen;gen";

import "Common.proto";

message SystemBasicInfo {
	string mfg_name = 1;
	string model_name = 2;
	string serial_num = 3;
	string product_code = 4;
	string hardware_version = 5;
	string firmware_version = 6;
	string phy_version = 7;
	string oam_version = 8;
}

message GetSystemBasicInfoRequest {
}

message GetSystemBasicInfoResponse {
	ResultStatus result = 1;
	string error_message = 2; //empty when result is SUCCESS
    SystemBasicInfo system_info = 3; //null when result is FAIL
    repeated LaneInfo lanes = 4; //null when result is FAIL
}

enum LinkStaus {
   LINK_UP = 0;
   LINK_DOWN = 1;
}

message LaneInfo {
    int32 lane_id = 1;
	string mac_addr = 2;
	LinkStaus link_status = 3; 
}

message SystemRebootRequest {
}
message SystemRebootResponse {
	ResultStatus result = 1;
	string error_message = 2;
}

message EnableFECRequest {
	bool enable = 1;
	int32 sfp_id = 2;
}
message EnableFECResponse {
	ResultStatus result = 1;
	string error_message = 2;
}

message SetGPSCableDelayReq {
	uint32 delay_time = 1;
}

message SetGPSCableDelayRsp {
	ResultStatus result = 1;
	string error_message = 2;
}

message RfoeStatus {
	//lane 7~0  #00000001 => 16 Binary: 0x01 ; 11111111 => 16 Binary: 0xFF ; 
	//TxEnableFlag: 
	//			0 means tx enable
	//			1 means tx disable
	//SetFhRateFlag: 
	//			0 means 10G,
	//			1 means 25G
	uint32 lane_bitmap = 1;	
}

message SetRfoeRsp {
	ResultStatus result = 1;
	string error_message = 2;	
}

message GetRfoeReq {
}

message GetSfpStateReq {
}

message GetSfpStateRsp {
	ResultStatus result = 1;
	string error_message = 2;
	uint32 sfp_state = 3; //0: Both FH0 and FH1 online, 1: FH0 offline, 2: FH1 offline, 3: All offline; And null when result is FAIL;
}

service SystemManagementService {
	// Get RPC, send from server-OAM to vDU-OAM. Used to query the vDU system information 
  rpc GetSystemBasicInfo(GetSystemBasicInfoRequest) returns (GetSystemBasicInfoResponse);
	
	// Set RPC, send from server-OAM to vDU-OAM. Used to reboot vDU
  rpc Reboot(SystemRebootRequest) returns (SystemRebootResponse);

  // Set RPC, send from server-OAM to vDU-OAM. Used to enable/disable FEC feature on vDU
  rpc EnableFEC(EnableFECRequest) returns (EnableFECResponse);
  
  // Set RPC, send from DU-OAM to vDU-OAM. Used to set the actual antenna cable delay time, unit: nanoseconds
  rpc SetGPSCableDelay(SetGPSCableDelayReq) returns (SetGPSCableDelayRsp);
  
  // Get SFP optical module status
  rpc GetSfpState(GetSfpStateReq) returns (GetSfpStateRsp); 
  
  // Set TxEnable, Make sure all of the optical module is properly connected before setting.
  rpc TxEnable(RfoeStatus) returns (SetRfoeRsp);
  
  // Set FH rate, Currently only all 10G or all 25G is supported
  rpc SetFhRate(RfoeStatus) returns (SetRfoeRsp);
  
  // Get FH rate
  rpc GetFhRate(GetRfoeReq) returns (RfoeStatus);
}