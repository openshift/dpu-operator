// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: SystemManagement.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemManagementServiceClient is the client API for SystemManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemManagementServiceClient interface {
	// Get RPC, send from server-OAM to vDU-OAM. Used to query the vDU system information
	GetSystemBasicInfo(ctx context.Context, in *GetSystemBasicInfoRequest, opts ...grpc.CallOption) (*GetSystemBasicInfoResponse, error)
	// Set RPC, send from server-OAM to vDU-OAM. Used to reboot vDU
	Reboot(ctx context.Context, in *SystemRebootRequest, opts ...grpc.CallOption) (*SystemRebootResponse, error)
	// Set RPC, send from server-OAM to vDU-OAM. Used to enable/disable FEC feature on vDU
	EnableFEC(ctx context.Context, in *EnableFECRequest, opts ...grpc.CallOption) (*EnableFECResponse, error)
	// Set RPC, send from DU-OAM to vDU-OAM. Used to set the actual antenna cable delay time, unit: nanoseconds
	SetGPSCableDelay(ctx context.Context, in *SetGPSCableDelayReq, opts ...grpc.CallOption) (*SetGPSCableDelayRsp, error)
	// Get SFP optical module status
	GetSfpState(ctx context.Context, in *GetSfpStateReq, opts ...grpc.CallOption) (*GetSfpStateRsp, error)
	// Set TxEnable, Make sure all of the optical module is properly connected before setting.
	TxEnable(ctx context.Context, in *RfoeStatus, opts ...grpc.CallOption) (*SetRfoeRsp, error)
	// Set FH rate, Currently only all 10G or all 25G is supported
	SetFhRate(ctx context.Context, in *RfoeStatus, opts ...grpc.CallOption) (*SetRfoeRsp, error)
	// Get FH rate
	GetFhRate(ctx context.Context, in *GetRfoeReq, opts ...grpc.CallOption) (*RfoeStatus, error)
}

type systemManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemManagementServiceClient(cc grpc.ClientConnInterface) SystemManagementServiceClient {
	return &systemManagementServiceClient{cc}
}

func (c *systemManagementServiceClient) GetSystemBasicInfo(ctx context.Context, in *GetSystemBasicInfoRequest, opts ...grpc.CallOption) (*GetSystemBasicInfoResponse, error) {
	out := new(GetSystemBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/SystemManagementService/GetSystemBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) Reboot(ctx context.Context, in *SystemRebootRequest, opts ...grpc.CallOption) (*SystemRebootResponse, error) {
	out := new(SystemRebootResponse)
	err := c.cc.Invoke(ctx, "/SystemManagementService/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) EnableFEC(ctx context.Context, in *EnableFECRequest, opts ...grpc.CallOption) (*EnableFECResponse, error) {
	out := new(EnableFECResponse)
	err := c.cc.Invoke(ctx, "/SystemManagementService/EnableFEC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) SetGPSCableDelay(ctx context.Context, in *SetGPSCableDelayReq, opts ...grpc.CallOption) (*SetGPSCableDelayRsp, error) {
	out := new(SetGPSCableDelayRsp)
	err := c.cc.Invoke(ctx, "/SystemManagementService/SetGPSCableDelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) GetSfpState(ctx context.Context, in *GetSfpStateReq, opts ...grpc.CallOption) (*GetSfpStateRsp, error) {
	out := new(GetSfpStateRsp)
	err := c.cc.Invoke(ctx, "/SystemManagementService/GetSfpState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) TxEnable(ctx context.Context, in *RfoeStatus, opts ...grpc.CallOption) (*SetRfoeRsp, error) {
	out := new(SetRfoeRsp)
	err := c.cc.Invoke(ctx, "/SystemManagementService/TxEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) SetFhRate(ctx context.Context, in *RfoeStatus, opts ...grpc.CallOption) (*SetRfoeRsp, error) {
	out := new(SetRfoeRsp)
	err := c.cc.Invoke(ctx, "/SystemManagementService/SetFhRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagementServiceClient) GetFhRate(ctx context.Context, in *GetRfoeReq, opts ...grpc.CallOption) (*RfoeStatus, error) {
	out := new(RfoeStatus)
	err := c.cc.Invoke(ctx, "/SystemManagementService/GetFhRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemManagementServiceServer is the server API for SystemManagementService service.
// All implementations must embed UnimplementedSystemManagementServiceServer
// for forward compatibility
type SystemManagementServiceServer interface {
	// Get RPC, send from server-OAM to vDU-OAM. Used to query the vDU system information
	GetSystemBasicInfo(context.Context, *GetSystemBasicInfoRequest) (*GetSystemBasicInfoResponse, error)
	// Set RPC, send from server-OAM to vDU-OAM. Used to reboot vDU
	Reboot(context.Context, *SystemRebootRequest) (*SystemRebootResponse, error)
	// Set RPC, send from server-OAM to vDU-OAM. Used to enable/disable FEC feature on vDU
	EnableFEC(context.Context, *EnableFECRequest) (*EnableFECResponse, error)
	// Set RPC, send from DU-OAM to vDU-OAM. Used to set the actual antenna cable delay time, unit: nanoseconds
	SetGPSCableDelay(context.Context, *SetGPSCableDelayReq) (*SetGPSCableDelayRsp, error)
	// Get SFP optical module status
	GetSfpState(context.Context, *GetSfpStateReq) (*GetSfpStateRsp, error)
	// Set TxEnable, Make sure all of the optical module is properly connected before setting.
	TxEnable(context.Context, *RfoeStatus) (*SetRfoeRsp, error)
	// Set FH rate, Currently only all 10G or all 25G is supported
	SetFhRate(context.Context, *RfoeStatus) (*SetRfoeRsp, error)
	// Get FH rate
	GetFhRate(context.Context, *GetRfoeReq) (*RfoeStatus, error)
	mustEmbedUnimplementedSystemManagementServiceServer()
}

// UnimplementedSystemManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemManagementServiceServer struct {
}

func (UnimplementedSystemManagementServiceServer) GetSystemBasicInfo(context.Context, *GetSystemBasicInfoRequest) (*GetSystemBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemBasicInfo not implemented")
}
func (UnimplementedSystemManagementServiceServer) Reboot(context.Context, *SystemRebootRequest) (*SystemRebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedSystemManagementServiceServer) EnableFEC(context.Context, *EnableFECRequest) (*EnableFECResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFEC not implemented")
}
func (UnimplementedSystemManagementServiceServer) SetGPSCableDelay(context.Context, *SetGPSCableDelayReq) (*SetGPSCableDelayRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGPSCableDelay not implemented")
}
func (UnimplementedSystemManagementServiceServer) GetSfpState(context.Context, *GetSfpStateReq) (*GetSfpStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSfpState not implemented")
}
func (UnimplementedSystemManagementServiceServer) TxEnable(context.Context, *RfoeStatus) (*SetRfoeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxEnable not implemented")
}
func (UnimplementedSystemManagementServiceServer) SetFhRate(context.Context, *RfoeStatus) (*SetRfoeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFhRate not implemented")
}
func (UnimplementedSystemManagementServiceServer) GetFhRate(context.Context, *GetRfoeReq) (*RfoeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFhRate not implemented")
}
func (UnimplementedSystemManagementServiceServer) mustEmbedUnimplementedSystemManagementServiceServer() {
}

// UnsafeSystemManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemManagementServiceServer will
// result in compilation errors.
type UnsafeSystemManagementServiceServer interface {
	mustEmbedUnimplementedSystemManagementServiceServer()
}

func RegisterSystemManagementServiceServer(s grpc.ServiceRegistrar, srv SystemManagementServiceServer) {
	s.RegisterService(&SystemManagementService_ServiceDesc, srv)
}

func _SystemManagementService_GetSystemBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).GetSystemBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/GetSystemBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).GetSystemBasicInfo(ctx, req.(*GetSystemBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemRebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).Reboot(ctx, req.(*SystemRebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_EnableFEC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFECRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).EnableFEC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/EnableFEC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).EnableFEC(ctx, req.(*EnableFECRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_SetGPSCableDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGPSCableDelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).SetGPSCableDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/SetGPSCableDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).SetGPSCableDelay(ctx, req.(*SetGPSCableDelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_GetSfpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSfpStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).GetSfpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/GetSfpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).GetSfpState(ctx, req.(*GetSfpStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_TxEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RfoeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).TxEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/TxEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).TxEnable(ctx, req.(*RfoeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_SetFhRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RfoeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).SetFhRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/SetFhRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).SetFhRate(ctx, req.(*RfoeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManagementService_GetFhRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRfoeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagementServiceServer).GetFhRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SystemManagementService/GetFhRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagementServiceServer).GetFhRate(ctx, req.(*GetRfoeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemManagementService_ServiceDesc is the grpc.ServiceDesc for SystemManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SystemManagementService",
	HandlerType: (*SystemManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemBasicInfo",
			Handler:    _SystemManagementService_GetSystemBasicInfo_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _SystemManagementService_Reboot_Handler,
		},
		{
			MethodName: "EnableFEC",
			Handler:    _SystemManagementService_EnableFEC_Handler,
		},
		{
			MethodName: "SetGPSCableDelay",
			Handler:    _SystemManagementService_SetGPSCableDelay_Handler,
		},
		{
			MethodName: "GetSfpState",
			Handler:    _SystemManagementService_GetSfpState_Handler,
		},
		{
			MethodName: "TxEnable",
			Handler:    _SystemManagementService_TxEnable_Handler,
		},
		{
			MethodName: "SetFhRate",
			Handler:    _SystemManagementService_SetFhRate_Handler,
		},
		{
			MethodName: "GetFhRate",
			Handler:    _SystemManagementService_GetFhRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "SystemManagement.proto",
}
